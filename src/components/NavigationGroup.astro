---
import NavLink from './NavigationLink.astro';
import ActivePageMarker from './NavigationActiveMarker.astro';

interface Group {
	type: 'group';
	label: string;
	badge: Badge | undefined;
	entries: (Link | Group)[];
	collapsed: boolean;
}

const {
  group,
  isCurrent,
  class: className,
} = Astro.props;

// If this is the mobile navigation then we always render the initial
// state, so that the state does not change during the close animation.
// The state will still update when we re-open (re-render) the navigation.
// FIXME
let isInsideMobileNavigation = false;
let [pathname, sections] = [];

let isActiveGroup =
  group.entries.findIndex((link) => link.href === pathname) !== -1
---
<li class:list={['relative mt-6', className]}>
  <h2
    layout="position"
    class="text-xs font-semibold text-zinc-900 dark:text-white"
  >
    {group.label}
  </h2>
  <div class="relative mt-3 pl-2">
    <!-- FIXME -->
    <!-- <AnimatePresence initial={!isInsideMobileNavigation}> -->
      <!-- {isCurrent && ( -->
      <!--   <VisibleSectionHighlight group={group} pathname={pathname} /> -->
      <!-- )} -->
    <!-- </AnimatePresence> -->
    <div
      layout
      class="absolute inset-y-0 left-2 w-px bg-zinc-900/10 dark:bg-white/5"
    />
    <!-- <AnimatePresence initial={false}> -->
      {isCurrent && (
        <ActivePageMarker group={group} pathname={pathname} />
      )}
    <!-- </AnimatePresence> -->
    <ul role="list" class="border-l border-transparent">
      {group.entries.map((link) => (
        <li key={link.href} layout="position" class="relative">
          <NavLink href={link.href} active={link.href === pathname}>
            {link.label}
          </NavLink>
          {/* <AnimatePresence mode="popLayout" initial={false}> */}
            {link.href === pathname && sections.length > 0 && (
              <ul
                role="list"
                initial={{ opacity: 0 }}
                animate={{
                  opacity: 1,
                  transition: { delay: 0.1 },
                }}
                exit={{
                  opacity: 0,
                  transition: { duration: 0.15 },
                }}
              >
                {sections.map((section) => (
                  <li key={section.id}>
                    <NavLink
                      href={`${link.href}#${section.id}`}
                      tag={section.tag}
                      isAnchorLink
                    >
                      {section.title}
                    </NavLink>
                  </li>
                ))}
              </ul>
            )}
          {/* </AnimatePresence> */}
        </li>
      ))}
    </ul>
  </div>
</li>
