[{"title":"Getting Started","type":0,"sectionRef":"#","url":"","content":"Getting Started Immersve is a multi-chain payment protocol and web3 Mastercard® product. Powered by the tech and values of web3, Immersve enables its clients to deliver decentralized and centralized payment experiences to their users. This documentation is aimed at developers and technically-minded folks interested in integrating with or understanding the underlying mechanics of the Immersve solution. If end users will directly control the means by which cards will be funded (i.e. they hold the private key controlling the relevant blockchain address) then you should start at the non-custodial wallet guides. If a custodian holds and controls the digital assets that will fund cards, such as a centralized exchange or other custodial wallet, then the custodial wallet guides are relevant to your use case. If you know exactly what you're looking for, you might like to go straight to these resources: API reference wherein you can view API request/response payloads and try interacting with the API from the browser.Immersve Payment Protocol smart contract interface documentation.","keywords":""},{"title":"Accounts","type":0,"sectionRef":"#","url":"api-reference/accounts","content":"Accounts 📄️ List Accounts Get accounts for authenticated subject","keywords":""},{"title":"accounts-custodial","type":0,"sectionRef":"#","url":"api-reference/accounts-custodial","content":"accounts-custodial","keywords":""},{"title":"activate-card-custodial","type":0,"sectionRef":"#","url":"api-reference/activate-a-card-for-physical-cards-only","content":"activate-card-custodial","keywords":""},{"title":"Asset Activities","type":0,"sectionRef":"#","url":"api-reference/asset-activities","content":"Asset Activities 📄️ List asset activities List parsed smart contract event/log(s) for a single asset 📄️ Get activity Get a single parsed smart contract event/log by ID 📄️ Get balance This endpoint returns the balance and available balance for a given asset.","keywords":""},{"title":"assets-category","type":0,"sectionRef":"#","url":"api-reference/assets","content":"assets-category","keywords":""},{"title":"Authentication","type":0,"sectionRef":"#","url":"api-reference/authentication","content":"Authentication 📄️ Generate challenge Generating the challenge is the first step in the process of getting the authentication token. 📄️ Login The login endpoint returns the authentication token in exchange","keywords":""},{"title":"block-card-custodial","type":0,"sectionRef":"#","url":"api-reference/block-a-card","content":"block-card-custodial","keywords":""},{"title":"card-cancel-asynchronously","type":0,"sectionRef":"#","url":"api-reference/cancel-a-card-asynchronously","content":"card-cancel-asynchronously","keywords":""},{"title":"cancel-account-custodial","type":0,"sectionRef":"#","url":"api-reference/cancel-an-account","content":"cancel-account-custodial","keywords":""},{"title":"Cards","type":0,"sectionRef":"#","url":"api-reference/card","content":"Cards 📄️ Create a card Create a card under a specified card program and affiliated with a Funding Source. 📄️ Cancel a card Cancel a card 📄️ Get a card token Generate a card token to enable the subsequent retrieval of the card's sensitive details including full PAN, expiry, CVV2 and embossedName. 📄️ Get card details Returns the non-sensitive details of a card by a given ID. 📄️ List cards Lists cards by account 📄️ Order a card - Legacy Order a virtual card for the current user. 📄️ Cancel a card synchronously Cancel a card synchronously (deprecated)","keywords":""},{"title":"cards-custodial","type":0,"sectionRef":"#","url":"api-reference/cards-custodial","content":"cards-custodial","keywords":""},{"title":"claim-funding-source","type":0,"sectionRef":"#","url":"api-reference/claim-a-funding-source-for-an-account","content":"claim-funding-source","keywords":""},{"title":"close-card-custodial","type":0,"sectionRef":"#","url":"api-reference/close-a-card","content":"close-card-custodial","keywords":""},{"title":"create-card-custodial","type":0,"sectionRef":"#","url":"api-reference/create-a-new-card","content":"create-card-custodial","keywords":""},{"title":"create-account-custodial","type":0,"sectionRef":"#","url":"api-reference/create-an-account","content":"create-account-custodial","keywords":""},{"title":"Currency","type":0,"sectionRef":"#","url":"api-reference/currency","content":"Currency 📄️ List currencies Get the list of currencies supported by Immersve. 📄️ Currency conversion Convert a source currency to a target currency.","keywords":""},{"title":"Funding Sources","type":0,"sectionRef":"#","url":"api-reference/funding-source","content":"Funding Sources 📄️ List funding sources List Funding Sources associated with the cardholder account 📄️ Register a funding source for an account This endpoint can be used to claim a wallet address as a source of funds. The funding wallet may be an EOA or a smart contract","keywords":""},{"title":"get-card-custodial","type":0,"sectionRef":"#","url":"api-reference/get-card-information","content":"get-card-custodial","keywords":""},{"title":"get-account-custodial","type":0,"sectionRef":"#","url":"api-reference/get-detailed-account-info","content":"get-account-custodial","keywords":""},{"title":"get-prerequisites","type":0,"sectionRef":"#","url":"api-reference/get-prerequisites","content":"get-prerequisites","keywords":""},{"title":"get-secure-card-custodial","type":0,"sectionRef":"#","url":"api-reference/get-secure-card-information","content":"get-secure-card-custodial","keywords":""},{"title":"Immersve API","type":0,"sectionRef":"#","url":"api-reference/immersve-api","content":"Version: 1.0.0 Immersve API Authentication​ HTTP: Bearer AuthAPI Key: apiKeyHeaderAPI Key: apiKeyHeaderWebhookAPI Key: apiSecretHeaderAPI Key: accountIdHeader Security Scheme Type:\thttp HTTP Authorization Scheme:\tbearer Bearer format:\tJWT","keywords":""},{"title":"Webhooks","type":0,"sectionRef":"#","url":"api-reference/immersve-webhooks","content":"Webhooks 📄️ Authorization This custodial integrator webhook endpoint is called when an authorization or sale request is made. 📄️ Transaction This custodial integrator webhook endpoint is called when a clearing or refund request is made. 📄️ Card Status Change This custodial integrator webhook endpoint is called when a card status is changed.","keywords":""},{"title":"KYC","type":0,"sectionRef":"#","url":"api-reference/kyc","content":"KYC 📄️ Submit Partner KYC Statement Submit a KYC statement about the cardholder.","keywords":""},{"title":"kyc-custodial","type":0,"sectionRef":"#","url":"api-reference/kyc-custodial","content":"kyc-custodial","keywords":""},{"title":"Prerequisites","type":0,"sectionRef":"#","url":"api-reference/prerequisites","content":"Prerequisites 📄️ Get spending prerequisites This endpoint specifies the necessary prerequisites that must be met for a cardholder to successfully create a card and transact with it against a specified Funding Source.","keywords":""},{"title":"set-pin-card-custodial","type":0,"sectionRef":"#","url":"api-reference/set-card-pin","content":"set-pin-card-custodial","keywords":""},{"title":"Simulator","type":0,"sectionRef":"#","url":"api-reference/simulator","content":"Simulator 📄️ Authorize a transaction This endpoint can be used to test authorizing a transaction on a simulated card network 📄️ Clear a transaction This endpoint can be used to test clearing a transaction on a simulated card network 📄️ Reverse a transaction This endpoint can be used to test reversing a transaction on a simulated card network","keywords":""},{"title":"Transactions","type":0,"sectionRef":"#","url":"api-reference/transactions","content":"Transactions 📄️ Get a transaction This endpoint returns the details of a card purchase transaction by a given ID. 📄️ List transactions List card purchase transactions by account","keywords":""},{"title":"update-account-custodial","type":0,"sectionRef":"#","url":"api-reference/update-an-account","content":"update-account-custodial","keywords":""},{"title":"unblock-card-custodial","type":0,"sectionRef":"#","url":"api-reference/unblock-a-card","content":"unblock-card-custodial","keywords":""},{"title":"upload-a-kyc-resource","type":0,"sectionRef":"#","url":"api-reference/upload-a-kyc-resource","content":"upload-a-kyc-resource","keywords":""},{"title":"category-custodial","type":0,"sectionRef":"#","url":"category/custodial-wallets","content":"category-custodial","keywords":""},{"title":"category-non-custodial","type":0,"sectionRef":"#","url":"category/non-custodial-wallets","content":"category-non-custodial","keywords":""},{"title":"Immersve Payment Protocol","type":0,"sectionRef":"#","url":"contracts/payment-protocol","content":"Immersve Payment Protocol Contract Module that allows users to deposit and lock funds in order to be able to fund one-time-use Immersve virtual cards. Proxy URLs​ Polygon USDC (Mainnet): 0x2EfB0F11a6521f69eD5ea87576b700FfB0bA9Ad1Polygon Mumbai USDC (Testnet): 0x91a4ee183763d9fd67F878abCCfFb2D6E51433eA Extensions​ For security reasons, the smart contract implements the following OpenZeppelin Contracts InitializableAccessControlPausableReentrancyGuard Proxy​ The Smart Contract implements the OpenZeppelin TransparentUpgradeable proxy. Proxy features: Security: If any bugs are found, or potential security risks, the Smart Contract can be updated to resolve any potential issuesFeature Upgradeability: Any new features and bug fixes can be added. The Smart Contract will keep the same state, without the need of expensive migrationsStability: Clients interacting with the Smart Contract will always do so through the same proxy address. The proxy will know the current implementation address and will always keep the same state. More about upgradeable contracts here: https://blog.openzeppelin.com/the-state-of-smart-contract-upgrades/ graph LR Client -- Trx --&gt; Proxy[(Proxy)] Proxy -- &quot;getImplementation()&quot; --&gt; Proxy Proxy -- old --&gt; v1{{ContractImplV1}} Proxy -- &quot;delegate call&quot; --&gt; v2{{ContractImplV2}} Functions​ withdraw(uint _amount) external nonReentrant notZeroValue(_amount) whenNotPaused​ CardHolders can withdraw token funds associated to their balance from the Smart Contract using this function. Locked funds cannot be withdrawn until the lock expires, or Immersve revokes the lock. tokenAmount (type uint): token Amount to withdraw in minor units depositAndLock(uint _amount) external nonReentrant notZeroValue(_amount) whenNotPaused​ CardHolders can deposit an amount of funds and lock it immediately. This will lock the funds for a number of blocks specified by the timeoutBlocks property of the smart contract. _amount (type uint): token Amount to deposit in minor units extendLockedFund() external whenNotPaused​ Allows user to extend his own lock. This operation will fail if there are no locked funds for the wallet initiating the transaction getTimeoutHasPassed (address _address, uint _additionalBlocks) public view returns (bool)​ Retrieves whether the timeout has passed for the lock owned by the _address. _address (type address): CardHolder Address_additionalBlocks (type uint): Optional argument to calculate expiration of a locked fund based on an extra amount of blocks Response​ bool: true if the timeout of the block for _address has passed, false if the lock is still active getLockedFundBalance (address _address, uint _additionalBlocks) public view returns (bool, uint)​ Retrieves whether the timeout has passed for the lock owned by the _address. Similar to getTimeoutHasPassed but it returns an array indicating if the timeout has passed and the actual balance of the lock for the specified address _address (type address): CardHolder Address_additionalBlocks (type uint): Optional argument to calculate expiration of a locked fund based on an extra amount of blocks Response​ array: 0 timeoutHasPassed (type bool): true if the timeout of the block for _address has passed, false if the lock is still active1 lockedFundBalance (type uint): the balance of the locked fund for the specified address Immersve Card E-Commerce Payment Happy Path​ Card Holder locks token funds with Immersve Smart ContractCard Holder receives a valid Credit Card to be used for E-Commerce transaction from ImmersveCard Holder uses the Immersve Card to pay for goods purchased on an E-Commerce platformImmersve authorizes the payment with Credit Card network once the locked funds are confirmedPurchase is confirmed by Immersve and E-Commerce merchant sequenceDiagram participant H as Card Holder participant W as Web3 Wallet participant I as Immersve Backend participant S as Smart Contract participant U as token Smart Contract participant E as E-Commerce website participant M as E-Commerce Merchant H-&gt;&gt;I: Create card pre-request I--&gt;&gt;H: Web3 Transaction Details H-&gt;&gt;W: Submit Transactions W-&gt;&gt;U: Approve Card Total Authorized Amount in token W-&gt;&gt;S: Deposit and Lock token funds S-&gt;&gt;U: Transfer approved amount from Card Holder wallet to Immersve Smart Contract S--&gt;&gt;S: Add approved amount to Card Holder address balance S--&gt;&gt;S: Create LockedFund to temporarily lock Card Holder funds to be used by Immersve Card S--&gt;&gt;W: Transaction Hash W--&gt;&gt;H: Transaction Hash H-&gt;&gt;I: Card Create Request I-&gt;&gt;S: Check enough funds for Card creation S--&gt;&gt;I: Locked Funds confirmed I--&gt;&gt;H: Card created H-&gt;&gt;E: Use Immersve Card to pay for goods online E--&gt;&gt;M: Validate Credit Card payment M-&gt;&gt;I: Merchant request payment authorization through Credit Card network I-&gt;&gt;S: Check locked funds and settle payment amount S-&gt;&gt;S: Settle payment funds I-&gt;&gt;M: Authorize payment","keywords":""},{"title":"Add a Card to a Digital Wallet","type":0,"sectionRef":"#","url":"guides/add-card-to-digital-wallet","content":"Add a Card to a Digital Wallet tip Apple Pay and Google Pay manual provisioning support coming soon! Expected Q4 2023 Apple Pay, Google Pay, and Samsung Pay wallets (collectively colloquially known as the 'xPays') allow users to tokenize a card. Such a token held within an xPay wallet may subsequently be used to make payments online and by contactless tap in-store. To tokenize a card within an xPay wallet, a card must first be issued to a cardholder. Follow the issue a virtual card guide for more information on how to create and issue a card. Whereas the card itself holds a primary account number (PAN) which is usually depicted on the card, a device PAN (DPAN) is assigned to the card as a pseudonym during tokenization. A DPAN is associated with a particular device (such as a smartphone) that emulates the card virtually when stored in the xPay wallet. If the same card is stored virtually in another wallet it will have DPAN which differs from the one held by the other wallet. Immersve assigns a DPAN at the time of adding the virtual card to the xPay wallet. The complexity of managing DPANs is opaque to the cardholder and the process to provision a card to an xPay wallet is rather simple from their perspective. Where your application (within which the virtual card is presented) is co-located with the xPay wallet then the user can simply copy/paste and/or manually enter the card details from your application into the xPay wallet. Where your application resides on a device other than the one that holds the target xPay wallet then the user can scan the virtual card with their camera to add it to their xPay wallet. See the Apple guide and the Google guide for more details on how this operates from the user's perspective.","keywords":""},{"title":"Card Funding","type":0,"sectionRef":"#","url":"guides/card-funding","content":"Card Funding A Funding Source is a pointer to a source of funds for a cardholder that can be drawn upon in relation to transactions made on cards issued to that cardholder. A Funding Source must have been created prior to creating a card; a card must be tagged with a Funding Source at the time of card creation. Whilst a Funding Source is a pointer to the state of a ledger (often a blockchain address or smart contract address) it is in fact decoupled from the underlying ledger. For instance, when listing Funding Sources the balance represented within Funding Source may not always match the balance held on the underlying ledger. This might be due to instances where deposit or load limits have been exceeded or where Immersve AML/CFT controls have determined that the funds in question should not contribute towards the balance. Given that there is sufficient balance within the Funding Source at the time of presentation of a transaction on a card associated with that Funding Source then the transaction may be approved. Any number of cards can be created in relation to a given Funding Source and all cards associated to the Funding Source will have access to the balance held by it. Authentication​ The authentication processes are described in the authentication guide. Funding Source Provisioning​ A Funding Source is created by a request to the claim a Funding Source for an account endpoint. The funding wallet may be an EOA or a smart contract implementing the ERC-1271 interface. Funding Process​ On-chain funding can be done at any time regardless of card or Funding Source provisioning. A Funding Source can be loaded with digital assets without using Immersve APIs by depositing funds directly to our smart contract. However, our APIs aim to reduce the complexity of determining what is the amount of digital assets needed to meet a users desired spend in their desired fiat currency. They also provide pre-built &quot;smart-contract-write&quot; transactions for successful interactions with the Immersve smart contract. Currency Conversion​ A user may be quoted a price for a purchase by a merchant in a local fiat currency. To determine the sufficient amount of local fiat currency to fund a card in its billing currency (USD), use the currency conversion API endpoint. The returned value can passed to the get spending prerequisites endpoint as detailed below. Lock Funds​ To ensure that funds are sufficiently locked within the smart contract such that Immersve are in a position to approve an authorization request received via the card scheme network you will need to have first locked sufficient digital assets within the smart contract via digital asset transfer and smart contract invocations as instructed by the get spending prerequisites operation. The necessary blockchain transactions are contained within the prerequisites collection returned. If the user has not transacted using the solution before then the get spending prerequisites response will typically call for an ERC20 approve in favour of the smart contract followed by a depositAndLock invocation of the smart contract. If multiple transactions are present then they should be carried out in the order in which they are presented. The client application is to parse and formulate the raw blockchain transaction message such that it is presented to the user within the web3 wallet and signed and sent to the relevant blockchain. How to use prerequisites example for ts/js​ The get spending prerequisites endpoint returns an array of both regulatory and smart contract prerequisite transactions. Each object in the array has type and params. Type &quot;smart_contract_write&quot; means that this action is about interaction with the smart contract. params contains all the details required to perform this interaction. Code snippet (using ethers.js) Typescript code const { abi, contractAddress, method, params } = response.data.prerequisites.params; const contract = new Contract(contractAddress, abi, signer); // third param Signer is required const { hash } = await contract[method](...Object.values(params)); Wallet Funding for Development and Testing​ To ensure that integrators can obtain sufficient ERC-20 tokens to facilitate development and testing, Immersve uses an ERC-20 token contract that allows tokens to be freely minted as needed. In non-production environments, any transaction returned by get spending prerequisites with actions related to ERC20 smart contract will refer to the &quot;IMMUSDC&quot; token. The &quot;IMMUSDC&quot; token has a mint function allowing for the unlimited minting of the token to any wallet address. One particularly convenient way to get the necessary tokens is to use the Polygonscan interface. Open the IMMUSDC token in PolygonscanClick Write as ProxyClick Connect to Web3 to connect your wallet with PolygonscanOpen the mint functionSet the destination wallet address (where assets are to be sent) in the to field. Set an amount in the amount field.Initiate the web3 transaction by clicking the Write buttonConfirm the transaction in the web3 wallet and pay the gas fees Funding Sequence Diagram​ sequenceDiagram participant U as User participant C as Your Application participant I as Immersve participant W as Wallet participant B as Blockchain note over U: Authentication as per authentication guide C-&gt;&gt;I: Create Funding Source I--&gt;&gt;C: Funding Source ID C-&gt;&gt;I: Get spending prerequisites I--&gt;&gt;C: prerequisites collection loop For each smart-contract-write transaction C-&gt;&gt;C: Construct raw transaction message C-&gt;&gt;W: Transmit raw transaction to wallet U-&gt;&gt;W: Confirm / authorize transaction W-&gt;&gt;B: Transmit transaction end C-&gt;&gt;I: List Funding Sources I--&gt;&gt;C: Funding Source list","keywords":""},{"title":"Authentication","type":0,"sectionRef":"#","url":"guides/authentication","content":"Authentication Depending on the use case and operation, either API key or Sign-in-with-ethereum (SIWE) authentication mechanism may be used. The SIWE method allows client applications to act on behalf of users within scopes explicitly granted by the user and is typically used by decentralized applications and web3 wallets. API keys might be used for administrative operations and for applications not using SIWE authentication for their users such as custodial wallets and exchanges. Contact us to provision credentials for your application. API Key Authentication​ Each request must be made with the following headers: Authentication: x-api-key - The API key issued by Immersvex-api-secret - The API secret issued by Immersve Target account: x-account-id - The account ID targeted by the operation. This can be omitted if the target is the root account (such as when creating an account for example) The caller must have the correct permissions over this account to perform the requested operation. SIWE Authentication​ The use of web3-native authentication mechanisms within the context of card issuance means that the same level of protection to a user's funds in self-custodial wallets is applied to their activities as a cardholder. Accounts are identified by way of blockchain addresses. Proof of ownership of an address is based upon a process of authentication by way of verification of EIP-4361 challenges signed by the private key underlying an address. Upon successful authentication, Immersve will issue an access token for subsequent use in interactions with the Immersve API. Subsequent requests for protected resources from the Immersve API may be authenticated by supplying the access token in the Authorization header. Login Flow​ sequenceDiagram participant W as Web3 Wallet participant C as API Client participant I as Immersve C-&gt;&gt;+I: Generate challenge I--&gt;&gt;-C: Challenge C-&gt;&gt;W: Request to sign a message W--&gt;&gt;C: Signature C-&gt;&gt;+I: Send challenge + signature I--&gt;&gt;-C: Return access token note over C: Access token will be used for subsequent requests for protected resources from the Immersve API Generate a challenge. The response is an EIP-4361 message in plain text to be signed by the wallet. When generating a challenge, authorization scopes must be passed. These scopes are presented to the user when signing the challenge message and are used to determine the level of access the user is granting to the application. The following scopes are available: full-access - Have full access to all your Immersve resourcesfull-access:partner - Have full access to all resources within your {partnerName} Immersve Accountcardholder-partner - Manage cards within your {partnerName} Immersve account For example: ``` app.immersve.com wants you to sign in with your Ethereum account: 0xA3058369d6A481B1ff08F62B352409c3D709De9b Sign in with Ethereum to the app. This request will not trigger a blockchain transaction or cost any gas fees. URI: https://app.immersve.com Version: 1 Chain ID: 1 Nonce: 2hFm7TDbZmerUgnrJ Issued At: 2022-08-11T22:29:48.244Z ``` Invoke the wallet's message signing capability to get a signature for the given challenge message. The specific nature of the invocation of the message signing function is specific to the particular wallet in use. For a quick start, Metamask users can sign the challenge message using this CodePen. Alternatively, use this Node.js script to create a wallet and sign the challenge. Signing Script const ethers = require('ethers'); const axios = require('axios'); const baseUrl = 'https://api.immersve.com'; const log = (...data) =&gt; { console.log.apply(null, data); } // Create a wallet to sign the message with const privateKey = ''; //TODO: Set Private key here const walletAddress = ''; //TODO: Set wallet address here const chainId = 137; //Chain ID Reference: https://chainlist.org/ if (!privateKey || privateKey.length === 0) { console.error('WALLET_PRIVATE_KEY missing'); process.exit(1); } if (!walletAddress || walletAddress.length === 0) { console.error('WALLET_ADDRESS missing'); process.exit(1); } const wallet = new ethers.Wallet(privateKey); const clientInstance = axios.create({ baseURL: baseUrl }); const signIn = async () =&gt; { const getSignInChallenge = await clientInstance.post('/siwe/generate-challenge', { walletAddress, chainId, }); const challenge = getSignInChallenge.data; const signature = await wallet.signMessage(challenge); const output = { message: challenge, signature: signature }; log(JSON.stringify(output)); } signIn(); Submit the signed challenge along with the signature to get the access token. The access token should be used for subsequent requests for protected resources from the Immersve API by supplying it in the Authorization header.","keywords":""},{"title":"Card Lifecycle","type":0,"sectionRef":"#","url":"guides/card-lifecycle","content":"Card Lifecycle Card States​ Short-lived virtual cards are activated and ready to use by default. When the card is either expired or cancelled by the user it will transition to the cancelled state. stateDiagram-v2 [*]--&gt; Created: Create Created--&gt;Active: Provisioning Active--&gt;Cancelled : Cancel card, Expired Cancelled --&gt; [*] State Transitions​ Create a card​ Call the create a card operation to request Immersve generate a card, returning an ID. It is ready to use when a call to get card details with the card ID returns a payload with status &quot;active&quot;. Cancel a card​ Should a cardholder change their mind prior to presenting the card to a merchant, cancel the card by calling the cancel a card operation.","keywords":""},{"title":"authentication-custodial","type":0,"sectionRef":"#","url":"guides/custodial wallets/authentication","content":"authentication-custodial","keywords":""},{"title":"card-lifecycle-custodial","type":0,"sectionRef":"#","url":"guides/custodial wallets/card-lifecycle","content":"card-lifecycle-custodial","keywords":""},{"title":"physical-cards-custodial","type":0,"sectionRef":"#","url":"guides/custodial wallets/physical-cards","content":"physical-cards-custodial","keywords":""},{"title":"Custodial Wallets","type":0,"sectionRef":"#","url":"guides/custodial-wallets","content":"Custodial Wallets Organizations acting as custodians of customer funds, such as custodial exchanges and wallet providers, may wish to support card issuance and funding flows for their users. The partnered custodial organization's overarching account may be pre-funded and discrete card transaction authorization determinations made by the the partner. The below guides are available to assist in your integration: Your application will authenticate against the API as described in the API Authentication Guide. End-user authentication is handled by your application and is outside of Immersve's purview.The Card Funding guide describes how a cardholder account is funded such that transactions may be authorized.The Issue a Virtual Card guide and Card Lifecycle guide will give you an understanding of how to create and issue a card to a user. note If this doesn't sound right given your use case then check out the non-custodial wallets guide for information on how cards may be issued to and funded directly by cardholders leveraging various web3 technologies. Contact us if you require further assistance to understand how your use case might be supported.","keywords":""},{"title":"introduction","type":0,"sectionRef":"#","url":"guides/introduction","content":"introduction","keywords":""},{"title":"Issue a Virtual Card","type":0,"sectionRef":"#","url":"guides/issue-a-virtual-card","content":"Issue a Virtual Card A virtual card is a payment card that exists only in digital form. As such, virtual cards are most suitable for online e-commerce purchases as opposed to in-store purchases at brick-and-mortar merchants. By default, virtual cards are logically time-bound and ephemeral. Beginning at the time of issuance of a virtual card, it has a finite useable lifespan which is often represented within the UI of the issuing client application as a stopwatch-type timer. This model presents certain benefits over a persistent payment card model (be they virtual, tokenized or physical) in that the potential for card fraud is dramatically reduced. Before being permitted to create a card a user must first have successfully authenticated and fulfilled any regulatory prerequisites as instructed by the get spending prerequisites operation. Authentication​ The authentication processes are described in the authentication guide. As the user account is anchored by control of the private key, there is no distinct prior explicit registration or signup process needed before authenticating. Provision Funding Source​ A Funding Source is required for card creation. Besides this requirement, cards and Funding Sources are managed independently. See Claim a Funding Source for an account and the Card Funding guide. Create a card​ Call the create a card operation to request Immersve to generate a card. If successful a create a card request will return a card ID. Immersve will provision and activate the card by default. It is provisioned and activated when the get card details response payload includes a status of &quot;active&quot;. All cards are currently short-lived and the time to expiry begins at the time of activation, the expiry timestamp is returned in the immersveExpiration field. Issue a Card​ Having created a virtual card via the create a card operation and confirmed it is &quot;active&quot;, you are in a position to be able to obtain the sensitive card details to be presented to the cardholder. There are two steps in this process; Obtaining a token for transmission to the client application to which the card details are to be provided (i.e. the application that will display the card data to the cardholder) and;The exchange, by that client application, of the token for the card data. note It is not recommended that the card token is supplied to any application other than one that resides within the cardholder environment (i.e. their mobile application or web application running in their browser) unless that system is sufficiently compliant with PCI-DSS requirements and is audited as such. Get a Card Token​ Generate a single-use card token using the get a card token operation. The token is typically then transmitted to the cardholder's environment (i.e. web application or mobile application running in their web browser) to complete the final step completing the card issuance. Get Sensitive Card Details​ To obtain the full PAN and CVV2 for display to the cardholder your client-side application should exchange the token for the sensitive card data. See fetching secure card information. Virtual Card Issuance Sequence Diagram​ sequenceDiagram participant U as User participant C as Your Application participant I as Immersve note over U: Authentication as per authentication guide C-&gt;&gt;I: Create Funding Source I--&gt;&gt;C: Funding Source ID par Get spending prerequisites and create card C-&gt;&gt;I: Get spending prerequisites I--&gt;&gt;C: prerequisites collection U-&gt;&gt;C: Request card C-&gt;&gt;+I: Create a card I--&gt;&gt;C: cardId I-&gt;&gt;I: Provision Card end","keywords":""},{"title":"authentication-non-custodial","type":0,"sectionRef":"#","url":"guides/non-custodial wallets/authentication","content":"authentication-non-custodial","keywords":""},{"title":"Fetching Secure Card Information","type":0,"sectionRef":"#","url":"guides/fetching-secure-card-information","content":"Fetching Secure Card Information In order to retrieve the secure details of a card (CVV, expiry, PAN), a one-time token must be generated. The steps for retrieving secure card details are as follows: Call the get a card token endpoint with the card ID.Call the GET URL specified in the callbackUrl response body field. The callbackUrl can only be used once, subsequent calls to this URL will return a 403 response code. Sequence Diagram​ sequenceDiagram participant U as User participant C as Your Client Application participant I as Immersve note over U: Authentication as per authentication guide C-&gt;&gt;I: Get card token I--&gt;&gt;C: Card token C-&gt;&gt;I: Request sensitive card data I--&gt;&gt;C: Return sensitive card data C--&gt;&gt;U: Display sensitive card data Example code snippet JavaScript import axios from 'axios'; // Using non-custodial authentication const tokenResponse = await axios.post( 'https://api.immersve.com/api/cards/123/pan-token', {}, { headers: { Authorization: 'Bearer eyJhbvbbfg', // jwt token, }, } ); const secureCardDetail = await axios.get(tokenResponse.callbackUrl); // Using custodial authentication const tokenResponse = await axios.post( 'https://api.immersve.com/api/cards/123/pan-token', {}, { headers: { 'x-api-key': 'imm-key-prod-LIVE-6e7e3821983ef6fe6cecabdbc8571bbf', 'x-api-secret': 'imm-secret-prod-LIVE-95b90292dfd747c143a9d258a93fb835', 'x-account-ID': '8gh464292dfd747c143a9d258aj6jdkd8', // target account ID (the account ID this card belongs to) }, } ); const secureCardDetail = await axios.get(tokenResponse.callbackUrl); ","keywords":""},{"title":"card-lifecycle-non-custodial","type":0,"sectionRef":"#","url":"guides/non-custodial wallets/card-lifecycle","content":"card-lifecycle-non-custodial","keywords":""},{"title":"Non-Custodial Wallets","type":0,"sectionRef":"#","url":"guides/non-custodial-wallets","content":"Non-Custodial Wallets Decentralized applications (such as DeFi and GameFi dApps) or web3 wallets themselves may support card issuance flows utilizing various web3 technologies. Cardholder accounts may be funded by way of either the end user's non-custodial wallet or, in some cases, via intermediary smart contract deposits. The below guides are available to assist in your integration: The SIWE Authentication Guide describes how your application may support a cardholder in establishing a session by authenticating directing using their web3 wallet.The Card Funding guide describes how a cardholder account is funded such that transactions may be approved.The Issue a Virtual Card guide and Card Lifecycle guide will give you an understanding of how to create and issue a card to a user. note If this doesn't sound right given your use case then check out the custodial wallets guide for information on how you might fund cardholder accounts on behalf of your users. Contact us if you require further assistance to understand how your use case might be supported.","keywords":""},{"title":"issue-a-virtual-card-non-custodial","type":0,"sectionRef":"#","url":"guides/non-custodial wallets/issue-a-virtual-card","content":"issue-a-virtual-card-non-custodial","keywords":""},{"title":"Clearing Reports","type":0,"sectionRef":"#","url":"guides/reports/clearing-reports","content":"Clearing Reports The clearing report can be used to review all card purchase clearings for a given period. Field\tDescriptioncardToken\tUnique identifier of the card. transactionId\tUnique identifier of the associated card transaction. authorizationId\tUnique identifier of the original authorization request received via the card scheme network. transactionType\tISO 8583 message class. This is a messaging standard for payments initiated with a card. merchantCurrency\tLocal currency of the country where the transaction was processed. merchantAmount\tAmount of the transaction, in minor units of the local currency. billingCurrency\tCurrency of the card holder's account balance. billingAmount\tAmount of the transaction, in minor units of the billing currency. settlementCurrency\tCurrency the card issuer selects to be paid in. settlementAmount\tAmount to be settled, in minor units of the settlement currency. This amount may include fees. exchangeRate\tExchange rate applied between the merchant amount and the billing amount. accountId\tUnique identifier of the account which the card belongs to. merchantId\tUnique identifier of the merchant. merchantName\tName of the merchant. merchantCity\tCity of the merchant. merchantCountry\tCountry of the merchant. createdAt\tWhen the transaction was created, expressed in UNIX epoch time. approvedAt\tWhen the transaction was approved, expressed in UNIX epoch time. mcc\tFour-digit number listed in ISO 18245. Used to classify a business by the types of goods or services it provides. channel\tChannel used to initialize the transaction. Examples include ATM, and Online. Example​ 169286b0603e6a75122cc0b217d3b850_clearing_2023-04-18T00:00:00.000Z_2023-04-18T00:00:00.000Z.csv card_token,transaction_id,authorization_id,transaction_type,merchant_currency,merchant_amount,billing_currency,billing_amount,settlement_currency,settlement_amount,exchange_rate,account_id,merchant_id,merchant_name,merchant_city,merchant_country,creation_at,approved_at,mcc,channel 789f7719eab12100789653487c136165,1000000324137,1000000324138,1200,USD,500,USD,500,USDC,6000000,1.0000000000,e64aa69f0a9af2d664e5989bd7f22562,000000000000000,Family Clothing Store,Auckland,NZL,2023-04-18T01:08:06.435Z,2023-04-18T01:08:09.144Z,5651,Online ","keywords":""},{"title":"Authorization Reports","type":0,"sectionRef":"#","url":"guides/reports/authorization-reports","content":"Authorization Reports The authorization report can be used to review all card purchase authorizations for a given period. Field\tDescriptioncardToken\tUnique identifier of the card. transactionId\tUnique identifier of the associated card transaction. authorizationId\tUnique identifier of the original authorization request received via the card scheme network. authorizationCode\tSource of the transaction. See Authorization Codes. transactionType\tISO 8583 message class. This is a messaging standard for payments initiated with a card. status\tStatus of the transaction. Valid values are approved or declined. merchantCurrency\tLocal currency of the country where the transaction was processed. merchantAmount\tAmount of the transaction, in minor units of the local currency. billingCurrency\tCurrency of the card holder's account balance. billingAmount\tAmount of the transaction, in minor units of the billing currency. settlementCurrency\tCurrency the card issuer selects to be paid in. settlementAmount\tAmount to be settled, in minor units of the settlement currency. This amount may include fees. exchangeRate\tExchange rate applied between the merchant amount and the billing amount. accountId\tUnique identifier of the account which the card belongs to. merchantId\tUnique identifier of the merchant. merchantName\tName of the merchant. merchantCity\tCity of the merchant. merchantCountry\tCountry of the merchant. createdAt\tWhen the transaction was created, expressed in UNIX epoch time. approvedAt\tWhen the transaction was approved, expressed in UNIX epoch time. mcc\tFour-digit number listed in ISO 18245. Used to classify a business by the types of goods or services it provides. channel\tChannel used to initialize the transaction. Examples include ATM, and Online. Authorization Codes​ Code\tDescription0\tUnknown 1\tInWalletPOS 2\tOutOfWalletPOS 3\tInWalletATM 4\tOutOfWalletATM 5\tOnline 6\tPartner 7\tCustomer 8\tInternal 9\tStatic 10\tMobileCommerce 11\tOnUs 12\tOutOfWalletOnline Example​ 82cc0b217d3b850169286b0603e6a756_authorization_2023-03-28T00:00:00.000Z_2023-03-28T00:00:00.000Z.csv cardToken,transactionId,authorizationId,authorizationCode,transactionType,status,merchantCurrency,merchantAmount,billingCurrency,billingAmount,settlementCurrency,settlementAmount,exchangeRate,accountId,merchantId,merchantName,merchantCity,merchantCountry,createdAt,approvedAt,mcc,channel 6c474aa7a5dc45bff721b5a207cf0f47,1000000318081,1000000318080,5,0100,approved,USD,10000,NZD,16172,USDC,100000000,1.6172000000,225d85e65495722bf6517ea0ba0d6f56,47e4d565f99457119fd9c672f6edf0aa,Family Clothing Store,Auckland,NZL,2023-03-28T23:23:22.958Z,2023-03-28T23:23:24.533Z,5651,Online ","keywords":""},{"title":"Authorization","type":0,"sectionRef":"#","url":"guides/simulator/authorization","content":"Authorization An authorization is an initial step in a transaction that checks if funds are available and sets up the approval for the transaction. At this point the transaction is initialized, with an initial hold being made on the funds, however no funds are settled with the merchant itself. The amount being supplied as the value for such an authorization cannot exceed the funds initially allocated to the card on creation. When the authorization has succeded, a transaction will show up on the Immersve apps dashboard with a processed date of pending","keywords":""},{"title":"Clearing","type":0,"sectionRef":"#","url":"guides/simulator/clearing","content":"Clearing A clearing acts in a very similar way to clearing without auth, however the card information that is used is based upon the initial authorization that was executed. When executing this clearing action, the user is prompted to enter a value. This allows for partial clearings to be made, where the amount being cleared may be less than the initial amount of authorized funds. Like with direct clearing without auth, this step will process the transaction, changing its status to the current date in the Immersve dashboard.","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"guides/reports/introduction","content":"Introduction Immersve can generate reports for a given card program over a time period that suits your needs. The report is in CSV format. The file name format is {reportId}_{reportType}_{startDate}_{endDate}.csvreportId is the unique identifier for the report.reportType is the type of report. Valid values are authorization or clearing.startDate (inclusive) and endDate (exclusive) represent the time period being reported on. Once a report is generated, Immersve will send a notification to your webhook endpoint. sequenceDiagram participant API Client participant Immersve API Client-&gt;&gt;Immersve: Register webhook endpoint Immersve-&gt;&gt;Immersve: Create report Immersve-&gt;&gt;API Client: Send report notification Notification​ Notifications to your webhook endpoint will have the following payload. Field\tDescriptionreportId\tUnique identifier of the report. url\tURL to access the report. The URL will be valid for 7 days.","keywords":""},{"title":"Clearing Without Auth","type":0,"sectionRef":"#","url":"guides/simulator/clearing-without-auth","content":"Clearing Without Auth Instead of authorizing first, a payment can be made by outright creating a clearing. This clearing creates a debit for the account, allowing for reconciliation to be executed with the merchant. At this point, the transaction is considered to be processed. When this clearing is made successfully, a transaction will show up in the Immersve apps dashboard with a processed date of the current day.","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"guides/simulator/introduction","content":"Introduction The simulator app is a test application that enables use of Immersve cards with a fake merchant. To begin using the simulator, one must first create an Immersve test card with the following steps: Visit https://app.immersve.com/config and toggle ENABLE_TEST_MODE to onGo to https://app.immersve.com and sign in with a new metamask account (don’t use your existing account)Create a card Once a card is acquired you can go to https://app.immersve.com/simulator to use the simulator. NOTE: You must stay logged into your Immersve account while using the simulator. Once on the simulator app, you will be given a form to enter your card details into, as well as a series of options as indicated by the flow diagram below. graph TD; A[Enter Card Details] --&gt; B[Clear Without Auth] A --&gt; C[Authorize] C --&gt; D[Clear] B --&gt; E[Reverse] C --&gt; E D --&gt; E At any point the reset button can be used to restore the application to its initial state, not maintaining any previous transaction history.","keywords":""},{"title":"Reversal","type":0,"sectionRef":"#","url":"guides/simulator/reversal","content":"Reversal After any of clearing, clearing without auth and authorization have been completed, the transaction can also be reversed using the reverse button. When this action is executed, a modal will allow the user to enter a value that is to be reversed. This can be less than the initial value of the previous action, allowing for a partial reversal of the transaction. Once reversed, the transaction in the Immersve dashboard will show as having its value reduced by the amount that was entered within the process.","keywords":""},{"title":"Webhooks","type":0,"sectionRef":"#","url":"guides/webhooks","content":"Webhooks Immersve uses webhooks to push real-time notifications to your app. Immersve sends events to your webhook endpoint as part of a POST request with a JSON payload. Your webhook must return a 200 response. If a 200 response is not received, Immersve will retry sending the notification with exponential backoff. Immersve has a maximum retry delay of 12 hours. There are multiple webhooks that Immersve sends to your app: Authorization - Sales and Authorization requestsTransaction - Clearing and Refund requestsCard Status Change - Card status changes Steps to receive webhooks​ You can start receiving event notifications in your app using the steps in this section: Create a webhook endpoint as an HTTP endpoint (URL) on your local server Webhook API Reference.Handle requests from Immersve by parsing each event object and returning a 200 response status code.Deploy your webhook endpoint so it’s a publicly accessible HTTPS URL.Contact Immersve to register your publicly accessible HTTPS URL.","keywords":""}]