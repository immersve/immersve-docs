"use strict";(self.webpackChunkimsv_docs_docusaurus=self.webpackChunkimsv_docs_docusaurus||[]).push([[7145],{7489:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>f,contentTitle:()=>b,default:()=>T,frontMatter:()=>h,metadata:()=>i,toc:()=>g});const i=JSON.parse('{"id":"get-kyc-statement","title":"Get KYC Statement","description":"Retrieve the KYC statement for the cardholder if it exists.","source":"@site/docs/get-kyc-statement.api.mdx","sourceDirName":".","slug":"/get-kyc-statement","permalink":"/api-reference/get-kyc-statement","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"get-kyc-statement","title":"Get KYC Statement","description":"Retrieve the KYC statement for the cardholder if it exists.","sidebar_label":"Get KYC Statement","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"get api-method","info_path":"immersve-api","custom_edit_url":null},"sidebar":"primarySidebar","previous":{"title":"Submit KYC Statement","permalink":"/api-reference/submit-kyc-statement"},"next":{"title":"Get KYC Profile","permalink":"/api-reference/get-kyc-profile"}}');var s=r(62540),n=r(43023),a=r(20701),o=r.n(a),d=r(9923),p=r.n(d),c=r(27457),l=r.n(c),u=r(6815),m=r.n(u),y=(r(17202),r(11208),r(72034));const h={id:"get-kyc-statement",title:"Get KYC Statement",description:"Retrieve the KYC statement for the cardholder if it exists.",sidebar_label:"Get KYC Statement",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"get api-method",info_path:"immersve-api",custom_edit_url:null},b=void 0,f={},g=[];function S(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(y.default,{as:"h1",className:"openapi__heading",children:"Get KYC Statement"}),"\n",(0,s.jsx)(o(),{method:"get",path:"/api/accounts/{cardholderAccountId}/partner-kyc-statement",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"Retrieve the KYC statement for the cardholder if it exists."}),"\n",(0,s.jsx)(y.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(p(),{parameters:[{name:"cardholderAccountId",in:"path",description:"ID of the cardholder account.",example:"65a7e8ef0d230d0a6bf755e07d39eb02",required:!0,schema:{type:"string"}}]}),"\n",(0,s.jsx)(l(),{title:"Body",body:void 0}),"\n",(0,s.jsx)(m(),{id:void 0,label:void 0,responses:{200:{content:{"application/json":{schema:{type:"object",properties:{accountId:{type:"string",description:"The cardholder account id.",example:"225d85e65495722bf6517ea0ba0d6f56"},partnerAccountId:{type:"string",description:"The partner account id that is affiliated with the cardholder.",example:"314d85e65495722bf6517ea0ba0d4lp3"},createdAt:{type:"string",description:"Timestamp of KYC statement creation.",example:"2022-11-16T03:13:18.142Z"},createdBy:{type:"string",description:"The Immersve Resource Name (IRN) that created the resource.",example:"irn:314d85e65495722bf6517ea0ba0d4lp3:api-key:SLOs3U38hdhfEqwF1JKpTw"},idempotencyKey:{type:"string",description:"A client-supplied identifier that helps support idempotency for\nsafely retrying requests without submitting the same statement twice (e.g. after a transient failure).\nThis should change for each different version of the KYC statement you submit.\n",example:"21ede8ef0d230d0a6bf755e07d39la54"},claims:{type:"array",description:"A list of claims about the cardholder's identity.",items:{type:"object",discriminator:{propertyName:"claimType"},anyOf:[{type:"object",properties:{claimType:{type:"enum",description:"The type of claim.",example:"DOB",enum:["DOB"]},attributes:{type:"object",description:"The attributes that support the DOB claim.",required:["dateOfBirth"],properties:{dateOfBirth:{type:"string",description:"The cardholder's date of birth formatted as YYYY-MM-DD",example:"1981-11-03"}}}},title:"DOB"},{type:"object",properties:{claimType:{type:"enum",description:"The type of claim.",example:"FULL_NAME",enum:["FULL_NAME"]},attributes:{type:"object",description:"The attributes that support the FULL_NAME claim.",properties:{honorific:{type:"string",description:"Title used to address the cardholder.",example:"Mr"},givenName:{type:"string",description:"Primary name.",example:"John"},middleName:{type:"string",description:"Other name(s).",example:"Foo Bar"},familyName:{type:"string",description:"Family name or surname.",example:"Doe"}}}},title:"FULL_NAME"},{type:"object",properties:{claimType:{type:"enum",description:"The type of claim.",enum:["ADDRESS"]},attributes:{type:"object",description:"The attributes that support the address claim.",oneOf:[{type:"object",required:["country"],properties:{addressType:{type:"string",description:"The type of address.",enum:["RESIDENTIAL"],example:"RESIDENTIAL"},unitNumber:{type:"string",description:"The unit number.",example:"1"},streetNumber:{type:"string",description:"Street number. Generally a number but can also be alphanumeric.",example:"3A"},streetName:{type:"string",description:"Street name.",example:"Victoria"},streetType:{type:"string",description:"Street type. e.g. Road, St, Avenue, Circuit.",example:"Avenue"},town:{type:"string",description:"The town/village/suburb/city.",example:"Auckland"},suburb:{type:"string",description:'The suburb in the town/city. Only use this if you require a suburb AND a town/city, otherwise, just use the "town" parameter.',example:"Epsom"},state:{type:"string",description:"The state. Use local abbreviations such as VIC (Victoria) or TX (Texas).",example:"AKL"},region:{type:"string",description:"The county, province, or cantonment.",example:"AKL"},postalCode:{type:"string",description:"Postal code.",example:"1050"},country:{type:"string",description:"The ISO 3166-2 Country code of the country the address is in.",example:"NZ"}},title:"StructuredAddress"},{type:"object",required:["country","fullAddress"],properties:{addressType:{type:"string",description:"The type of address.",enum:["RESIDENTIAL"],example:"RESIDENTIAL"},fullAddress:{type:"string",description:"An address written as a single string. i.e. not an address that is structured\ninto individual components (e.g. unit number, street number,\nstreet name, etc.) This is useful when the address cannot be provided in\na structured way. We recommend using a structured address whenever\npossible as correct parsing is not guaranteed.",example:"2/45 Laddier Road, Centurion, The Reeds, Auckland, Auckland 0100, New Zealand"},country:{type:"string",description:"The ISO 3166-2 Country code of the country the address is in.",examples:["NZ","AU"]}},title:"UnstructuredAddress"}]}},title:"ADDRESS"}],title:"claims"}},evidence:{type:"array",description:"A list of evidence supporting the claimed identity. At least one piece of evidence is required.",items:{type:"object",anyOf:[{type:"object",properties:{evidenceType:{type:"string",description:"The type of evidence.",enum:["PASSPORT"]},documentId:{type:"string",description:"The passport number.",example:"DS230475"},country:{type:"string",description:"The country that issued the document.",enum:["NZ","AU","AR","MX","BR"],example:"NZ"},expiry:{type:"string",description:"The passport expiry formatted as YYYY-MM-DD.",example:"2024-10-12"}},required:["evidenceType","documentId","country","expiry"],title:"PASSPORT"},{type:"object",properties:{evidenceType:{type:"string",description:"The type of evidence.",enum:["DRIVERS_LICENSE"]},documentId:{type:"string",description:"The license number.",example:"DS230475"},country:{type:"string",description:"The country that issued the document.",enum:["NZ","AU","AR","MX","BR"],example:"NZ"},region:{type:"string",description:"Where appropriate, the state or region that issued the document, in the format provided by the issuer.\ne.g. for Australia a Victorian Drivers license, this would be 'VIC'.\nFor New Zealand no value is required.\n",example:"VIC"},version:{type:"string",description:"The driver's license card number or version",example:"978"}},required:["evidenceType","documentId","country","version"],title:"DRIVERS_LICENSE"},{type:"object",properties:{evidenceType:{type:"string",description:"The type of evidence.",enum:["NATIONAL_ID"]},documentId:{type:"string",description:"The national id number.",example:"S1234567A"},country:{type:"string",description:"The country that issued the document.",enum:["BR","AR","MX"],example:"BR"},paternalFamilyName:{type:"string",description:"The paternal family name of the cardholder. This is required when country is MX.",example:"Silva"},maternalFamilyName:{type:"string",description:"The maternal family name of the cardholder. This is required when country is MX.",example:"Souza"}},required:["evidenceType","documentId","country"],title:"NATIONAL_ID"}],discriminator:{propertyName:"evidenceType"},title:"evidence"}},region:{type:"string",description:"An Alpha2 (ISO-3166-1) country code representing the country in which the user is being verified.",example:"NZ"}},example:{idempotencyKey:"(random key that is unique for each request)",region:"NZ",claims:[{claimType:"FULL_NAME",attributes:{givenName:"Jason",middleName:"James",honorific:"Mr",familyName:"Anderson"}},{claimType:"ADDRESS",attributes:{addressType:"RESIDENTIAL",country:"NZ",streetNumber:"73",streetName:"Great Southern",streetType:"ROAD",suburb:"Auckland CBD",town:"Auckland",region:"Auckland",state:"AKL",postalCode:"6140"}},{claimType:"DOB",attributes:{dateOfBirth:"1962-05-09"}}],evidence:[{evidenceType:"DRIVERS_LICENSE",documentId:"80513",country:"AU",region:"VIC",version:"P0001975"}]},title:"retrieve-kyc-statement-response"}}}},403:{description:"Subject is not allowed to perform the action with the reason stated in the `errorCode`\n\n**FORBIDDEN**\nResource does not exist or there are no sufficient permissions to perform the action.\n\n**KYC_STATEMENT_DOES_NOT_EXIST**\nPartner has not submitted any KYC statements\n",content:{"application/json":{schema:{type:"object",properties:{statusCode:{type:"integer",example:403},statusName:{type:"string",example:"Forbidden"},errorCode:{type:"string",example:"FORBIDDEN"},reason:{type:"string",example:"Unauthorized"}},required:["statusCode","statusName","errorCode"],title:"api-error-403"}}}}}})]})}function T(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(S,{...e})}):S(e)}}}]);