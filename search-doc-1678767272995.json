[{"title":"Accounts (Custodial)","type":0,"sectionRef":"#","url":"/api-reference/accounts-custodial","content":"Accounts (Custodial) 📄️ Create an Account Create an Account 📄️ Get detailed account info Get detailed account info 📄️ Update an Account Update an Account 📄️ Cancel an Account Cancel an Account","keywords":""},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/","content":"Getting Started Immersve is a multi-chain payment protocol and web3 / metaverse Mastercard® product. Powered by the tech and values of web3, Immersve enables its clients to deliver a decentralized payment experience to their users. This documentation is aimed at developers and technically-minded folks interested in integrating with or understanding the underlying mechanics of the Immersve solution. Included here are: Helpful guides demonstrate how to issue cards and process transactions within either a custodial and non-custodial context.An API reference wherein you can view API request/response payloads and try interacting with the API from the browser.The Immersve Payment Protocol smart contract interface documentation.","keywords":""},{"title":"Assets","type":0,"sectionRef":"#","url":"/api-reference/assets","content":"Assets 📄️ Get Balance This endpoint returns the balance and available balance for a given asset.","keywords":""},{"title":"Authentication","type":0,"sectionRef":"#","url":"/api-reference/authentication","content":"Authentication 📄️ Generate Challenge Generating the challenge is the first step in the process of getting the authentication token. 📄️ Login The login endpoint returns the authentication token in exchange","keywords":""},{"title":"Cards","type":0,"sectionRef":"#","url":"/api-reference/card","content":"Cards 📄️ Order a Card Order a virtual card for the current user. 📄️ Cancel a Card Cancel a card. 📄️ Get a Card Token Generate a card token to enable the subsequent retrieval of the card's sensitive details including full PAN and CVV2. 📄️ Get Prerequisite Transactions This endpoint returns the requisite blockchain transactions required to permit the creation of a new Immersve Card. It also indicates if everything is in order before instructing the client of any blockchain transactions. Insufficient KYC and AML status may trigger an error response. 📄️ Get Secure Card Details The secure card details endpoint returns the sensitive card details when presented with a token obtained via the `generate card token` endpoint.","keywords":""},{"title":"Cards (Custodial)","type":0,"sectionRef":"#","url":"/api-reference/cards-custodial","content":"Cards (Custodial) 📄️ Create a new card Create a new card 📄️ Close a card Close a card 📄️ Block a card Block a card 📄️ Get card information Get card information","keywords":""},{"title":"Currency","type":0,"sectionRef":"#","url":"/api-reference/currency","content":"Currency 📄️ Currency List Get the list of currencies supported by Immersve. 📄️ Currency Convert Convert a source currency to a target currency.","keywords":""},{"title":"Transactions","type":0,"sectionRef":"#","url":"/api-reference/transactions","content":"Transactions 📄️ Get a Transaction This endpoint returns the details of a transaction by a given id.","keywords":""},{"title":"Authentication","type":0,"sectionRef":"#","url":"/guides/custodial wallets/authentication","content":"Authentication API clients consuming the custodial wallet API endpoints use API key authentication to authenticate to the API. API keys are issued to the custodial wallet provider by Immersve and are used to authorize requests to the relevant custodial wallet endpoints. Each request must be made with the following headers: x-api-key - The API key issued by Immersvex-api-secret - The API secret issued by Immersvex-account-id - The account ID targeted by the operation. This can be omitted if the target is the root account (such as when creating an account for example) Contact us if you require the above credentials.","keywords":""},{"title":"Immersve Payment Protocol","type":0,"sectionRef":"#","url":"/contracts/payment-protocol","content":"Immersve Payment Protocol Contract Module that allows users to deposit and lock funds in order to be able to fund one-time-use Immersve virtual cards. Extensions​ For security reasons, the smart contract implements the following OpenZeppelin Contracts InitializableAccessControlPausableReentrancyGuard Proxy​ The Smart Contract implements the OpenZeppelin TransparentUpgradeable proxy. Proxy features: Security: If any bugs are found, or potential security risks, the Smart Contract can be updated to resolve any potential issuesFeature Upgradeability: Any new features and bug fixes can be added. The Smart Contract will keep the same state, without the need of expensive migrationsStability: Clients interacting with the Smart Contract will always do so through the same proxy address. The proxy will know the current implementation address and will always keep the same state. More about upgradeable contracts here: https://blog.openzeppelin.com/the-state-of-smart-contract-upgrades/ graph LR Client -- Trx --&gt; Proxy[(Proxy)] Proxy -- &quot;getImplementation()&quot; --&gt; Proxy Proxy -- old --&gt; v1{{ContractImplV1}} Proxy -- &quot;delegate call&quot; --&gt; v2{{ContractImplV2}} Proxy URLs​ Polygon (Mainnet): PENDINGPolygon Mumbai (Testnet): 0xd73c2deE4604a1af3Db4E8E07Cf6Fb798aB77982 Functions​ initialize(address _settlerRole, address payable _settlementAddress, address _tokenSmartContract, uint256 _defaultTimeoutBlocks, uint256 _safetyBlocks) external initializer​ Initialize the Smart Contract with the required arguments _settlerRole (type address): The web3 address that will act with the SETTLER role._settlementAddress (type address payable): The web3 address were Locked funds will be sent once a payment is confirmed by Immersve_tokenSmartContract (type address): The current network address of the ERC-20 token Smart Contract_defaultTimeoutBlocks (type uint256): Number of blocks in the blockchain that an asset lock will last by default_safetyBlocks (type uint256): Number of blocks on top of the default timeout used to calculate if a Lock is usable or not. Because there might be a delay between a transaction confirmation and the actual use of Locked funds by Immersve, there has to be some safety threshold for Immersve to execute the settlement of funds. getVersion() external pure returns(string memory)​ Get the current version implementation of the smart contract with a Version number stored in a Solidity Constant. This means that the constant is not saved into the Smart Contract store. pause() public onlyRole(PAUSER_ROLE)​ Pauses the functionality of the Smart Contract. All the functions marked with the whenNotPaused modifier will reject the transaction once a pause is in effect. Only the PAUSER_ROLE will be able to call this function. unpause() public onlyRole(PAUSER_ROLE)​ Unpauses the functionality of the Smart Contract. All the functions marked with the whenNotPaused modifier will accept the transaction normally. Only the PAUSER_ROLE will be able to call this function. setTimeoutBlocks(uint256 timeoutBlocks) public onlyRole(SETTLER_ROLE)​ Set the default timeout for AssetLockedFund as described in Asset Locked Funds section. Only the SETTLER_ROLE will be able to call this function. timeoutBlocks (type uint256): Number of blocks for an Asset Lock to be considered expired setSafetyBlocks(uint256 timeoutBlocks) public onlyRole(SETTLER_ROLE)​ Set the safety block threshold for AssetLockedFund as described in Asset Locked Funds section. Only the SETTLER_ROLE will be able to call this function. timeoutBlocks (type uint256): Number of blocks for an Asset Lock to be considered safe to settle deposit(uint256 tokenAmount) external whenNotPaused nonReentrant​ CardHolders can deposit token funds into the Smart Contract using this function. The funds can either be locked or withdrawn by the consumer later. Locked funds cannot be withdrawn until the lock expires, or the user revokes the lock with an Immersve token. There is a pre-requisite for this function to work. Because token is an ERC-20 token, the consumer needs to approve (https://polygonscan.com/token/0x2791bca1f2de4661ed88a30c99a7a9449aa84174#writeProxyContract#F1 token funds to the Smart Contract public address tokenAmount (type uint256): token Amount to deposit in ethers format depositTo(uint256 tokenAmount, address sender) external whenNotPaused nonReentrant​ CardHolders can deposit token funds for a specific address into the Smart Contract using this function. The funds can either be locked or withdrawn by the consumer later. Locked funds cannot be withdrawn until the lock expires, or the user revokes the lock with an Immersve token. There is a pre-requisite for this function to work. Because token is an ERC-20 token, the consumer needs to approve (https://polygonscan.com/token/0x2791bca1f2de4661ed88a30c99a7a9449aa84174#writeProxyContract#F1 token funds to the target sender address for the Smart Contract public address tokenAmount (type uint256): token Amount to deposit in ethers formataddress (type address): Deposit target address withdraw(uint256 tokenAmount) external whenNotPaused nonReentrant​ CardHolders can withdraw token funds associated to their balance from the Smart Contract using this function. Locked funds cannot be withdrawn until the lock expires, or the user revokes the lock with an Immersve token. tokenAmount (type uint256): token Amount to withdraw in ethers format createLockedFund (uint256 tokenAmount) external whenNotPaused nonReentrant​ CardHolders can put a Lock in place for deposited funds so Immersve can authorize the use of a credit card using those locked funds as collateral. The locked funds will be represented with a AssetLockedFund struct inside the Smart Contract. When created, a timeout will be put in place for this lock based on the default Timeout Blocks (see []) tokenAmount (type uint256): token Amount to lock in ethers format depositAndCreateLockedFund (uint256 tokenAmount) external whenNotPaused nonReentrant​ Similar to deposit but combined with createLockedFund. This function is doing both the deposit and the lock at the same time to save gas fees. tokenAmount (type uint256): token Amount to deposit in ethers format depositAndCreateLockedFundFor (uint256 tokenAmount, address sender) external whenNotPaused nonReentrant​ Similar to depositAndCreateLockedFund but the target address is specified as an argument instead of using msg.sender tokenAmount (type uint256): token Amount to deposit in ethers format checkLockedFundPayment (address sender, uint256 price, uint256 lockedFundId) external view whenNotPaused returns(uint256)​ Used by Immersve to check that the locked funds of an Immersve Card payment is currently valid. This function will check that the specified address has enough locked funds for the specified lockedFundId and will return the number of blocks that the lock is still valid for. sender (type address): CardHolder Address doing a payment requiring locked funds with Immersveprice (type uint256): token Amount to settle in ethers formatlockedFundId (type uint256): Matching Locked Fund Id (which is linked to a Card) to settle payment being done with an Immersve Credit Card confirmLockedFundPayment (address sender, uint256 price, uint256 lockedFundId) external whenNotPaused nonReentrant onlyRole(SETTLER_ROLE)​ Used by Immersve to confirm the settlement of an Immersve Card payment. This function will check that the specified address has enough locked funds for the specified lockedFundId and will transfer the settlement amount (price) to the settlement address, specified in the initialize function. It can only be called by the SETTLER role sender (type address): CardHolder Address doing a payment requiring locked funds with Immersveprice (type uint256): token Amount to settle in ethers formatlockedFundId (type uint256): Matching Locked Fund Id (which is linked to a Card) to settle payment being done with an Immersve Credit Card getAvailableLockedFundsBalance (address sender)​ Get Available Locked funds for the specified address sender (type address): CardHolder Address that already did a funds lock getBalance()​ Get the available token balance of the msg.sender deposited in the Smart Contract. Balance is not the necessarily the same as locked funds as the former are short lived. getSenderBalance (address sender)​ Get the available token balance of the specified sender argument, deposited in the Smart Contract. Balance is not the necessarily the same as locked funds as the former are short lived. sender (type address): CardHolder Address getLockedFunds()​ Get the AssetLockedFund objects of the msg.sender getSenderLockedFunds (address sender) onlyRole(SETTLER_ROLE)​ Get the AssetLockedFund objects of the specified sender argument sender (type address): CardHolder Address that already locked funds at least once revokeLockedFundMultiSig (uint256 lockedFundId, uint256 nonce, bytes memory signature) external whenNotPaused nonReentrant​ CardHolders will be able to revoke a fund lock using an Immersve signature. Immersve will first check if the funds is being used for a payment on Immersve backend. If the funds are free to release, Immersve will sign a message with a nonce only valid for a lockedFundId and the funds will be put back into the CardHolder balance lockedFundId (type uint256): Id of the AssetLockedFund to be releasednonce (type uint256): Nonce provided by Immersve API and matches the signaturesignature (type memory): String signature provided by Immersve API created with a nonce to avoid replay calls revokeLockedFund (address sender, uint256 lockedFundId) external whenNotPaused nonReentrant onlyRole(SETTLER_ROLE)​ Function used by Immersve Backend (only SETTLER role can call this function) to revoke an unexpired lock. This could be done if Immersve detect illegal or malicious activity related to the sender and prefers to revoke locked fund ids sender (type address): CardHolder Address that already locked funds with the Smart ContractlockedFundId (type uint256): Id of the AssetLockedFund to be released Immersve Card E-Commerce Payment Happy Path​ Card Holder locks token funds with Immersve Smart ContractCard Holder receives a valid Credit Card to be used for E-Commerce transaction from ImmersveCard Holder uses the Immersve Card to pay for goods purchased on an E-Commerce platformImmersve authorizes the payment with Credit Card network once the locked funds are confirmedPurchase is confirmed by Immersve and E-Commerce merchant sequenceDiagram participant H as Card Holder participant W as Web-3 Wallet participant I as Immersve Backend participant S as Smart Contract participant U as token Smart Contract participant E as E-Commerce website participant M as E-Commerce Merchant H-&gt;&gt;I: Create card pre-request I--&gt;&gt;H: Web3 Transaction Details H-&gt;&gt;W: Submit Transactions W-&gt;&gt;U: Approve Card Total Authorized Amount in token W-&gt;&gt;S: Deposit and Lock token funds S-&gt;&gt;U: Transfer approved amount from Card Holder wallet to Immersve Smart Contract S--&gt;&gt;S: Add approved amount to Card Holder address balance S--&gt;&gt;S: Create AssetLockedFund to temporarily lock Card Holder funds to be used by Immersve Card S--&gt;&gt;W: Transaction Hash W--&gt;&gt;H: Transaction Hash H-&gt;&gt;I: Card Create Request I-&gt;&gt;S: Check enough funds for Card creation S--&gt;&gt;I: Locked Funds confirmed I--&gt;&gt;H: Card created H-&gt;&gt;E: Use Immersve Card to pay for goods online E--&gt;&gt;M: Validate Credit Card payment M-&gt;&gt;I: Merchant request payment authorization through Credit Card network I-&gt;&gt;S: Check locked funds and settle payment amount S-&gt;&gt;S: Settle payment funds I-&gt;&gt;M: Authorize payment","keywords":""},{"title":"Card Lifecycle","type":0,"sectionRef":"#","url":"/guides/custodial wallets/card-lifecycle","content":"Card Lifecycle The lifecycle of a card is tracked via a set of predefined card states. Throughout the card lifecycle the current state is used to determine the capabilities of the card. For example, cards must be activated before they can be used for purchases or other such activity. Immersve manages the lifecycle of cards, acting upon inputs from clients and other connected systems whilst ensuring that only permitted state transitions are carried out. note Card blocks are a distinct concept from the card lifecycle states Introduction​ As soon as a card is created it will be default to the created state. Depending on the type of card that was created it might be moved into different states automatically at this point. Card state updates can be made at any time once a card is created. The most common instances of card state updates include: Card activation in order to make the card ready for useCard deactivation once the card is no longer needed Card state updates are performed using the Update Card State API. A state must be provided in the request and a memo can optionally be included. Certain card state transitions are carried out automatically without explicit API client interactions. These circumstances include when a physical card moves from created to shipped once the card embossing file has been generated for that card. Card States​ State\tDescriptioncreated\tCard record has been created shipped\tCard has shipped to the manufacturer for production. sold\tCard has been sold, typically at a point-of-sale (POS). returned\tCard has been returned to the banking institution. resent\tCard has been resent to the customer's address. activated\tCard is activated and ready for use. invalid\tCard is no longer valid and is blocked from further use. State Transitions​ The following diagram shows the lifecycle of a card's different states. stateDiagram-v2 [*] --&gt; Created: start Created --&gt; Activated: Created --&gt; Shipped: Created --&gt; Invalid: Shipped --&gt; Returned: Shipped --&gt; Activated: Shipped --&gt; Sold: Shipped --&gt; Invalid: Returned --&gt; Resent: Returned --&gt; Invalid: Resent --&gt; Returned: Resent --&gt; Sold: Resent --&gt; Activated: Resent --&gt; Invalid: Sold --&gt; Activated: Sold --&gt; Invalid: Activated --&gt; Invalid: Invalid --&gt; [*]: end Virtual cards​ Card activation​ A virtual card is activated automatically upon creation and no explicit interactions are required prior to the usage of the card. Physical cards​ Shipped / Returned / Resent / Sold​ Transitions to shipped, returned, sold and resent states are determined by the data provided by the card personalization bureau. Card activation​ To activate a card, set the state in the request to activated. For security reasons, a physical card cannot be moved from created to activated. Instead, it can only be activated after it is sold or shipped. Card activation ensures that the details of a physical card cannot be used until it is delivered to the customer and activated. You can alternatively activate a card by setting the card Personal Identification Number (PIN) for the first time. Card deactivation​ Once a card is no longer needed, the card can be deactivated. When a card is deactivated, a card block is created on the card so that it can no longer be used. To deactivate a card, set the state in the request to invalid. Once a card has been set to invalid, it can no longer be transitioned to another state. You can cancel the card by calling the cancel a card operation. You can alternatively deactivate a card by selecting the option when reissuing a card. For more information, see Card Orders.","keywords":""},{"title":"Physical cards","type":0,"sectionRef":"#","url":"/guides/custodial wallets/physical-cards","content":"Physical cards A card represents a collection of data including primary account number (PAN), expiry date, and security code, that allows a cardholder to make card payments. A physical card is an object that is encoded with unique card data during manufacture and is delivered to a cardholder. Physical cards let cardholders hold the data pertaining to their card on their person. Immersve supports physical card issuance and manufacture via the card creation API operation. Immersve does not ourselves produce physical cards; rather we integrate with card manufacturers who handle physical card production and shipping. As a client, you can request to create a physical card using the Immersve APIs. Immersve then includes the particulars of the newly-created card within an embossing file and sends it to your chosen card manufacturer partner. The physical card order flow is as shown in the following diagram. flowchart LR Create_card([Create card])--&gt;Generate_card([Generate card]) Queue_embossing_file([Queue embossing file])--&gt;Manufacture_card([Manufacture card]) subgraph Card Manufacturer direction TB Manufacture_card([Manufacture card])--&gt;Ship_card([Ship card]) end subgraph Immersve direction TB Generate_card([Generate card])--&gt;Generate_embossing_file([Generate embossing file]) Generate_embossing_file([Generate embossing file])--&gt;Queue_embossing_file([Queue embossing file]) end subgraph API Client direction TB Create_card([Create card]) end Contact us to find out if your preferred card manufacturer can be supported. Prerequisites​ Immersve must be securely integrated with the card manufacturing partner in order to provide card embossing files. Immersve integrates with card manufacturers by registering the manufacturer as a partner and issuing access credentials for their system. Typical steps to get set up with a card manufacturer include: Create card designsAcquire approval from your card networkProduce blank card plasticCreate card collateral Stock levels are not managed or recorded as part of the Immersve physical card orders process. For information on stock levels, work with your card manufacturer. To place a physical card order with Immersve, create a card referencing a particular card program. When a card order has been placed, information about the ordered card will be added to your embossing file. This file is then sent to your card manufacturer. Physical card order fulfillment​ After you complete a physical card order, Immersve generates a file containing all the information required for the cards to be produced. The ordered cards are included in the file. The embossing file supports orders for individual cards as well as bulk card orders. The embossing file consists of two parts: information about the entire order, contained in the cards object, and information about all the cards in the order, contained in the cards object. Order information​ The embossing file is sent to card manufacturers once per day. Each file includes all cards that have been created since the last time the file was generated. The embossing file can also be sent in batches. caution Because the embossing file is sent only once daily, submitting multiple physical card orders for the same cardholder but to different shipping addresses can only be done at least 1 day apart. When your card manufacturer receives the embossing file, the cards will be produced according to the order information in the file. When the cards have been produced, they will be shipped to your customers or specified branch locations. Physical card shipping​ Physical card shipping will be managed by the card manufacturer. When an order for a physical card has been placed, it typically goes through the following sequence of card states: After the card order has been placed and the card is created in the database, its state is created.When the card order information has been sent to the card manufacturer, its state changes to shipped.If the card is returned before reaching the customer, its state changes to returned.If a Point-of-Sale (POS) has been configured and the card is sold at a POS, its state changes to sold.If the card is being resent to the customer address, its state changes to resent.When the card is activated and ready to be used, its card state changes to activated.If the card is deactivated, its card state changes to invalid.","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"/guides/introduction","content":"Introduction The particular set of guides that are relevant to your use case is dependent upon the context in which payment cards are to be funded. If end users will directly control the means by which cards will be funded (i.e. they hold the private key controlling the relevant blockchain address) then you should refer to the non-custodial wallet guides. If a custodian holds and controls the digital assets that will fund cards, such as a centralized exchange or other custodial wallet, then the custodial wallet guides are relevant to your use case.","keywords":""},{"title":"Card Lifecycle","type":0,"sectionRef":"#","url":"/guides/non-custodial wallets/card-lifecycle","content":"Card Lifecycle Card States​ Single-use virtual cards are activated and ready to use by default. When the card is either used to make a purchase or cancelled by the user it will transition to the cancelled state. stateDiagram-v2 [*]--&gt; Active: create Active--&gt;Cancelled : cancel_card Active--&gt;Cancelled : once_used Cancelled --&gt; [*] State Transitions​ Order a card​ A card begins life when you call the order a card operation to request Immersve to generate a card. Cancel a card​ Should a cardholder change their mind prior to presenting the card to a merchant, you can cancel the card by calling the cancel a card operation.","keywords":""},{"title":"Authentication","type":0,"sectionRef":"#","url":"/guides/non-custodial wallets/authentication","content":"Authentication Accounts are identified by way of blockchain addresses. Proof of ownership of an address is based upon a process of authentication by way of verification of EIP-4361 challenges signed by the private key underlying an address. Upon successful authentication, Immersve will issue an access token for subsequent use in interactions with the Immersve API. Subsequent requests for protected resources from the Immersve API may be authenticated by supplying the access token in the Authorization header. Login Flow​ sequenceDiagram participant W as Web3 Wallet participant C as API Client participant I as Immersve C-&gt;&gt;+I: Generate challenge I--&gt;&gt;-C: Challenge C-&gt;&gt;W: Request to sign a message W--&gt;&gt;C: Signature C-&gt;&gt;+I: Send challenge + signature I--&gt;&gt;-C: Return access token note over C: Access token will be used for subsequent requests for protected resources from the Immersve API Generate a challenge. The response is an EIP-4361 message in plain text to be signed by the wallet. For example: app.immersve.com wants you to sign in with your Ethereum account: 0xA3058369d6A481B1ff08F62B352409c3D709De9b Sign in with Ethereum to the app. This request will not trigger a blockchain transaction or cost any gas fees. URI: https://app.immersve.com Version: 1 Chain ID: 1 Nonce: 2hFm7TDbZmerUgnrJ Issued At: 2022-08-11T22:29:48.244Z Invoke the wallet's message signing capability to get a signature for the given challenge message. The specific nature of the invocation of the message signing function is specific to the particular wallet in use. Submit the signed challenge along with the signature to get the access token. The access token should be used for subsequent requests for protected resources from the Immersve API by supplying it in the Authorization header.","keywords":""},{"title":"Issue a Virtual Card","type":0,"sectionRef":"#","url":"/guides/non-custodial wallets/issue-a-virtual-card","content":"Issue a Virtual Card A virtual card is a payment card that exists only in digital form. As such, virtual cards are most suitable for online e-commerce purchases as opposed to in-store purchases at brick-and-mortar merchants. Immersve treat virtual cards as being logically time-bound and ephemeral. Beginning at the time of issuance of a virtual card, it has a finite useable lifespan which is often represeted within the UI of the issuing client application as a stopwatch-type timer. This model presents certain benefits over a traditional persistent payment card model (be they virtual, tokenized or physical) in that the potential for card fraud is dramatically reduced. The use of web3-native authentication mechanisms within the context of card issuance mean that the same level of protection to a user's funds in self-custodial wallets is applied to their activities as a cardholder. Prior to being permitted to order a card a user must first have successfuly authenticated and locked digital assets within the smart contract via digital asset transfer and smart contract invocations as instructed by the get prerequisite transactions operation. Authentication​ The authentication processes is described in the authentication guide. As the user account is anchored by control of the private key, there is no distinct prior explicit registration or signup process needed before authenticating. Currency Conversion​ A user will more often than not be quoted a price for a purchase by a merchant in a fiat currency. In order to determine the sufficient amount of digital assets to fund a card and be made available for the purchase, you will retrieve the amount from the currency conversion API endpoint. Lock Funds​ In order to ensure that funds are sufficiently locked within the smart contract such that Immersve are in a position to approve an authorization request received via the card scheme network you will need to have firstly locked sufficient digital assets within the smart contract via digital asset transfer and smart contract invocations as instructed by the get prerequisite transactions operation. The necessary blockchain transactions are contained within the requiredTransactions collection returned. If the user has not transacted using the solution before then the the get prerequisite transactions response will typically call for and erc20_approval in favour of the smart contract followed by a depositAndCreateLockedFund invocation of the smart contract. If multiple transactions are present then they should be carried out in the order in which they are presented. The client application is to parse and formulate the raw blockchain transaction message such that it is presented to the user within the web3 wallet and signed and sent to the relevant blockchain. Wallet Funding for Development and Testing​ To ensure that integrators are able to obtain sufficient ERC-20 tokens to facilitate development and testing, Immersve uses an ERC-20 token contract that allows tokens to be freely minted as needed. In non-production environments any erc20_approval transaction type returned by get prerequisite transactions will refer to the &quot;IMMUSDC&quot; token. The &quot;IMMUSDC&quot; token has a mint function allowing for the unlimited minting of the token to any wallet address. One particularly convenient way to get the necessary tokens is to use the Polygonscan interface. Open the IMMUSDC token in PolygonscanClick Write as ProxyClick Connect to Web3 to connect your wallet with PolygonscanOpen the mint functionSet the destination wallet address (where assets are to be sent) in the to field. Set an amount in the amount field.Initiate the web3 transaction clicking the Write buttonConfirm the transaction in the web3 wallet and pay the gas fees Order a Card​ With the funds locked in the smart contract, it's now time to order a card. Call the order a card operation to request Immersve to generate a card. The returned card data returned in response to a order a card request includes only truncated or masked sensitive data. Single-use virtual cards are activated and ready to use by default. Issue a Card​ Having created an virtual card via the order a card operation, you are in a position to be able to obtain the sensitive card details to be presented to the cardholder. There are two steps in this process; firstly, obtaining a token for transmission to the client application to which the card details are to be provided (i.e. the application that will display the card data to the cardholder) and;secondly, the exchange, by that client application, of the token for the card data. note It is not recommended that the card token is supplied to any application other than one that resides within the cardholder environment (i.e. their mobile application or web application running in their browser) unless that system is sufficiently compliant with PCI-DSS requirements and is audited as such. Get a Card Token​ Generate a single-use card token using the get a card token operation. The token is typically then transmitted to the cardholder's environment (i.e. web application or mobile application running in their web browser) to complete the final step completing the card issuance. Get Card Details​ To obtain the full PAN and CVV2 for display to the cardholder your client-side application should exchange the token for the sensitive card data via the get secure card details operation. Virtual Card Issuance Sequence Diagram​ sequenceDiagram participant U as User participant C as API Client participant I as Immersve participant W as Wallet participant B as Blockchain note over U: Authentication as per authentication guide U-&gt;&gt;C: Input desired fiat card funding amount C-&gt;&gt;+I: Currency convert I--&gt;&gt;C: convertedAmount C-&gt;&gt;I: Get prerequisite transactions I--&gt;&gt;C: requiredTransactions collection loop For each required transaction C-&gt;&gt;C: Construct raw transaction message C-&gt;&gt;W: Transmit raw transaction to wallet U-&gt;&gt;W: Confirm / authorize transaction W-&gt;&gt;B: Transmit transaction end C-&gt;&gt;+I: Order card I--&gt;&gt;C: Non-sensitive card data C-&gt;&gt;+I: Get card token I--&gt;&gt;C: Card token C-&gt;&gt;I: Request sensitive card data I--&gt;&gt;C: Return sensitive card data C--&gt;&gt;U: Display sensitve card data","keywords":""}]