[{"title":"Getting Started","type":0,"sectionRef":"#","url":"","content":"Getting Started Immersve is a multi-chain payment protocol and web3 / metaverse Mastercard® product. Powered by the tech and values of web3, Immersve enables its clients to deliver a decentralized payment experience to their users. This documentation is aimed at developers and technically-minded folks interested in integrating with or understanding the underlying mechanics of the Immersve solution. Included here are: Helpful guides demonstrate how to issue cards and process transactions within either a custodial and non-custodial context.An API reference wherein you can view API request/response payloads and try interacting with the API from the browser.The Immersve Payment Protocol smart contract interface documentation.","keywords":""},{"title":"Accounts","type":0,"sectionRef":"#","url":"api-reference/accounts","content":"Accounts 📄️ List Accounts Get accounts for authenticated subject","keywords":""},{"title":"accounts-custodial","type":0,"sectionRef":"#","url":"api-reference/accounts-custodial","content":"accounts-custodial","keywords":""},{"title":"Asset activities","type":0,"sectionRef":"#","url":"api-reference/asset-activities","content":"Asset activities 📄️ List asset activities List parsed smart contract event/log(s) for a single asset 📄️ Get activity Get a single parsed smart contract event/log by ID","keywords":""},{"title":"activate-card-custodial","type":0,"sectionRef":"#","url":"api-reference/activate-a-card-for-physical-cards-only","content":"activate-card-custodial","keywords":""},{"title":"Authentication","type":0,"sectionRef":"#","url":"api-reference/authentication","content":"Authentication 📄️ Generate challenge Generating the challenge is the first step in the process of getting the authentication token. 📄️ Login The login endpoint returns the authentication token in exchange","keywords":""},{"title":"Assets","type":0,"sectionRef":"#","url":"api-reference/assets","content":"Assets 📄️ Get balance This endpoint returns the balance and available balance for a given asset.","keywords":""},{"title":"block-card-custodial","type":0,"sectionRef":"#","url":"api-reference/block-a-card","content":"block-card-custodial","keywords":""},{"title":"cancel-account-custodial","type":0,"sectionRef":"#","url":"api-reference/cancel-an-account","content":"cancel-account-custodial","keywords":""},{"title":"cards-custodial","type":0,"sectionRef":"#","url":"api-reference/cards-custodial","content":"cards-custodial","keywords":""},{"title":"Cards","type":0,"sectionRef":"#","url":"api-reference/card","content":"Cards 📄️ Order a card - Legacy Order a virtual card for the current user. 📄️ Create a card Create a card under a specified card program and affiliated with a funding source. 📄️ Cancel a card asynchronously Cancel a card asynchronously 📄️ Cancel a card synchronously Cancel a card synchronously (deprecated) 📄️ Get a card token Generate a card token to enable the subsequent retrieval of the card's sensitive details including full PAN, expiry, CVV2 and embossedName. 📄️ Get prerequisites This endpoint returns the requisite blockchain transactions required to permit the action (ex. creation of a new Immersve Card). It also indicates if everything is in order before instructing the client of any blockchain transactions. Insufficient KYC and AML status may trigger an error response. 📄️ Get card details Returns the non-sensitive details of a card by a given id. 📄️ List cards Lists cards by account","keywords":""},{"title":"close-card-custodial","type":0,"sectionRef":"#","url":"api-reference/close-a-card","content":"close-card-custodial","keywords":""},{"title":"create-card-custodial","type":0,"sectionRef":"#","url":"api-reference/create-a-new-card","content":"create-card-custodial","keywords":""},{"title":"create-account-custodial","type":0,"sectionRef":"#","url":"api-reference/create-an-account","content":"create-account-custodial","keywords":""},{"title":"Funding sources","type":0,"sectionRef":"#","url":"api-reference/funding-source","content":"Funding sources 📄️ List funding sources List funding sources associated with the cardholder account 📄️ Claim a funding source for an account. This endpoint can be used to claim a wallet address as a source of funds. The funding wallet may be an EOA or a smart contract","keywords":""},{"title":"Currency","type":0,"sectionRef":"#","url":"api-reference/currency","content":"Currency 📄️ List currencies Get the list of currencies supported by Immersve. 📄️ Currency conversion Convert a source currency to a target currency.","keywords":""},{"title":"get-card-custodial","type":0,"sectionRef":"#","url":"api-reference/get-card-information","content":"get-card-custodial","keywords":""},{"title":"get-account-custodial","type":0,"sectionRef":"#","url":"api-reference/get-detailed-account-info","content":"get-account-custodial","keywords":""},{"title":"get-secure-card-custodial","type":0,"sectionRef":"#","url":"api-reference/get-secure-card-information","content":"get-secure-card-custodial","keywords":""},{"title":"Immersve API","type":0,"sectionRef":"#","url":"api-reference/immersve-api","content":"Version: 1.0.0 Immersve API Authentication​ HTTP: Bearer AuthAPI Key: apiKeyHeaderAPI Key: apiKeyHeaderWebhookAPI Key: apiSecretHeaderAPI Key: accountIdHeader Security Scheme Type:\thttp HTTP Authorization Scheme:\tbearer Bearer format:\tJWT","keywords":""},{"title":"Webhooks","type":0,"sectionRef":"#","url":"api-reference/immersve-webhooks","content":"Webhooks 📄️ Authorization This custodial integrator webhook endpoint is called when an authorization or sale request is made. 📄️ Transaction This custodial integrator webhook endpoint is called when a clearing or refund request is made. 📄️ Card Status Change This custodial integrator webhook endpoint is called when a card status is changed.","keywords":""},{"title":"KYC","type":0,"sectionRef":"#","url":"api-reference/kyc","content":"KYC 📄️ Submit Partner KYC Statement Submit a KYC statement about the cardholder.","keywords":""},{"title":"kyc-custodial","type":0,"sectionRef":"#","url":"api-reference/kyc-custodial","content":"kyc-custodial","keywords":""},{"title":"Prerequisites","type":0,"sectionRef":"#","url":"api-reference/prerequisites","content":"Prerequisites 📄️ Get prerequisites This endpoint returns the requisite blockchain transactions required to permit the action (ex. creation of a new Immersve Card). It also indicates if everything is in order before instructing the client of any blockchain transactions. Insufficient KYC and AML status may trigger an error response. 📄️ Get spending prerequisites This endpoint specifies the necessary prerequisites that must be met for a cardholder to successfully create a card and transact with it against a specified funding source.","keywords":""},{"title":"set-pin-card-custodial","type":0,"sectionRef":"#","url":"api-reference/set-card-pin","content":"set-pin-card-custodial","keywords":""},{"title":"Simulator","type":0,"sectionRef":"#","url":"api-reference/simulator","content":"Simulator 📄️ Authorize a transaction This endpoint can be used to test authorizing a transaction on a simulated card network 📄️ Clear a transaction This endpoint can be used to test clearing a transaction on a simulated card network 📄️ Reverse a transaction This endpoint can be used to test reversing a transaction on a simulated card network","keywords":""},{"title":"Transactions","type":0,"sectionRef":"#","url":"api-reference/transactions","content":"Transactions 📄️ Get a transaction This endpoint returns the details of a card purchase transaction by a given id. 📄️ List transactions List card purchase transactions by account","keywords":""},{"title":"update-account-custodial","type":0,"sectionRef":"#","url":"api-reference/update-an-account","content":"update-account-custodial","keywords":""},{"title":"unblock-card-custodial","type":0,"sectionRef":"#","url":"api-reference/unblock-a-card","content":"unblock-card-custodial","keywords":""},{"title":"upload-a-kyc-resource","type":0,"sectionRef":"#","url":"api-reference/upload-a-kyc-resource","content":"upload-a-kyc-resource","keywords":""},{"title":"Immersve Payment Protocol","type":0,"sectionRef":"#","url":"contracts/payment-protocol","content":"Immersve Payment Protocol Contract Module that allows users to deposit and lock funds in order to be able to fund one-time-use Immersve virtual cards. Proxy URLs​ Polygon USDC (Mainnet): 0x2EfB0F11a6521f69eD5ea87576b700FfB0bA9Ad1Polygon Mumbai USDC (Testnet): 0x91a4ee183763d9fd67F878abCCfFb2D6E51433eA Extensions​ For security reasons, the smart contract implements the following OpenZeppelin Contracts InitializableAccessControlPausableReentrancyGuard Proxy​ The Smart Contract implements the OpenZeppelin TransparentUpgradeable proxy. Proxy features: Security: If any bugs are found, or potential security risks, the Smart Contract can be updated to resolve any potential issuesFeature Upgradeability: Any new features and bug fixes can be added. The Smart Contract will keep the same state, without the need of expensive migrationsStability: Clients interacting with the Smart Contract will always do so through the same proxy address. The proxy will know the current implementation address and will always keep the same state. More about upgradeable contracts here: https://blog.openzeppelin.com/the-state-of-smart-contract-upgrades/ graph LR Client -- Trx --&gt; Proxy[(Proxy)] Proxy -- &quot;getImplementation()&quot; --&gt; Proxy Proxy -- old --&gt; v1{{ContractImplV1}} Proxy -- &quot;delegate call&quot; --&gt; v2{{ContractImplV2}} Functions​ withdraw(uint _amount) external nonReentrant notZeroValue(_amount) whenNotPaused​ CardHolders can withdraw token funds associated to their balance from the Smart Contract using this function. Locked funds cannot be withdrawn until the lock expires, or Immersve revokes the lock. tokenAmount (type uint): token Amount to withdraw in minor units depositAndLock(uint _amount) external nonReentrant notZeroValue(_amount) whenNotPaused​ CardHolders can deposit an amount of funds and lock it immediately. This will lock the funds for a number of blocks specified by the timeoutBlocks property of the smart contract. _amount (type uint): token Amount to deposit in minor units extendLockedFund() external whenNotPaused​ Allows user to extend his own lock. This operation will fail if there are no locked funds for the wallet initiating the transaction getTimeoutHasPassed (address _address, uint _additionalBlocks) public view returns (bool)​ Retrieves whether the timeout has passed for the lock owned by the _address. _address (type address): CardHolder Address_additionalBlocks (type uint): Optional argument to calculate expiration of a locked fund based on an extra amount of blocks Response​ bool: true if the timeout of the block for _address has passed, false if the lock is still active getLockedFundBalance (address _address, uint _additionalBlocks) public view returns (bool, uint)​ Retrieves whether the timeout has passed for the lock owned by the _address. Similar to getTimeoutHasPassed but it returns an array indicating if the timeout has passed and the actual balance of the lock for the specified address _address (type address): CardHolder Address_additionalBlocks (type uint): Optional argument to calculate expiration of a locked fund based on an extra amount of blocks Response​ array: 0 timeoutHasPassed (type bool): true if the timeout of the block for _address has passed, false if the lock is still active1 lockedFundBalance (type uint): the balance of the locked fund for the specified address Immersve Card E-Commerce Payment Happy Path​ Card Holder locks token funds with Immersve Smart ContractCard Holder receives a valid Credit Card to be used for E-Commerce transaction from ImmersveCard Holder uses the Immersve Card to pay for goods purchased on an E-Commerce platformImmersve authorizes the payment with Credit Card network once the locked funds are confirmedPurchase is confirmed by Immersve and E-Commerce merchant sequenceDiagram participant H as Card Holder participant W as Web3 Wallet participant I as Immersve Backend participant S as Smart Contract participant U as token Smart Contract participant E as E-Commerce website participant M as E-Commerce Merchant H-&gt;&gt;I: Create card pre-request I--&gt;&gt;H: Web3 Transaction Details H-&gt;&gt;W: Submit Transactions W-&gt;&gt;U: Approve Card Total Authorized Amount in token W-&gt;&gt;S: Deposit and Lock token funds S-&gt;&gt;U: Transfer approved amount from Card Holder wallet to Immersve Smart Contract S--&gt;&gt;S: Add approved amount to Card Holder address balance S--&gt;&gt;S: Create LockedFund to temporarily lock Card Holder funds to be used by Immersve Card S--&gt;&gt;W: Transaction Hash W--&gt;&gt;H: Transaction Hash H-&gt;&gt;I: Card Create Request I-&gt;&gt;S: Check enough funds for Card creation S--&gt;&gt;I: Locked Funds confirmed I--&gt;&gt;H: Card created H-&gt;&gt;E: Use Immersve Card to pay for goods online E--&gt;&gt;M: Validate Credit Card payment M-&gt;&gt;I: Merchant request payment authorization through Credit Card network I-&gt;&gt;S: Check locked funds and settle payment amount S-&gt;&gt;S: Settle payment funds I-&gt;&gt;M: Authorize payment","keywords":""},{"title":"Authentication","type":0,"sectionRef":"#","url":"guides/authentication","content":"Authentication Depending on the use case and endpoint either API key or Sign-in-with-ethereum (SIWE) authentication may be used. Our SIWE method allows client applications to act on behalf of users within scopes explicitly granted by the user. API keys might be used for admin APIs and for applications not using SIWE authentication for their users. Contact us to provision credentials for your application. API Key Authentication​ Each request must be made with the following headers: x-api-key - The API key issued by Immersvex-api-secret - The API secret issued by Immersvex-account-id - The account ID targeted by the operation. This can be omitted if the target is the root account (such as when creating an account for example) SIWE Authentication​ Accounts are identified by way of blockchain addresses. Proof of ownership of an address is based upon a process of authentication by way of verification of EIP-4361 challenges signed by the private key underlying an address. Upon successful authentication, Immersve will issue an access token for subsequent use in interactions with the Immersve API. Subsequent requests for protected resources from the Immersve API may be authenticated by supplying the access token in the Authorization header. Login Flow​ sequenceDiagram participant W as Web3 Wallet participant C as API Client participant I as Immersve C-&gt;&gt;+I: Generate challenge I--&gt;&gt;-C: Challenge C-&gt;&gt;W: Request to sign a message W--&gt;&gt;C: Signature C-&gt;&gt;+I: Send challenge + signature I--&gt;&gt;-C: Return access token note over C: Access token will be used for subsequent requests for protected resources from the Immersve API Generate a challenge. The response is an EIP-4361 message in plain text to be signed by the wallet. When generating a challenge, authorization scopes must be passed. These scopes are presented to the user when signing the challenge message and are used to determine the level of access the user is granting to the application. The following scopes are available: full-access - Have full access to all your Immersve resourcesfull-access:partner - Have full access to all resources within your {partnerName} Immersve Accountcardholder-partner - Manage cards within your {partnerName} Immersve account For example: ``` app.immersve.com wants you to sign in with your Ethereum account: 0xA3058369d6A481B1ff08F62B352409c3D709De9b Sign in with Ethereum to the app. This request will not trigger a blockchain transaction or cost any gas fees. URI: https://app.immersve.com Version: 1 Chain ID: 1 Nonce: 2hFm7TDbZmerUgnrJ Issued At: 2022-08-11T22:29:48.244Z ``` Invoke the wallet's message signing capability to get a signature for the given challenge message. The specific nature of the invocation of the message signing function is specific to the particular wallet in use. For a quick start Metamask users can sign the challenge message using this CodePen. Alternatively use this Node.js script to create your own wallet and sign the challenge. Signing Script const ethers = require('ethers'); const axios = require('axios'); const baseUrl = 'https://api.immersve.com'; const log = (...data) =&gt; { console.log.apply(null, data); } // Create a wallet to sign the message with const privateKey = ''; //TODO: Set Private key here const walletAddress = ''; //TODO: Set wallet address here const chainId = 137; //Chain id Reference: https://chainlist.org/ if (!privateKey || privateKey.length === 0) { console.error('WALLET_PRIVATE_KEY missing'); process.exit(1); } if (!walletAddress || walletAddress.length === 0) { console.error('WALLET_ADDRESS missing'); process.exit(1); } const wallet = new ethers.Wallet(privateKey); const clientInstance = axios.create({ baseURL: baseUrl }); const signIn = async () =&gt; { const getSignInChallenge = await clientInstance.post('/siwe/generate-challenge', { walletAddress, chainId, }); const challenge = getSignInChallenge.data; const signature = await wallet.signMessage(challenge); const output = { message: challenge, signature: signature }; log(JSON.stringify(output)); } signIn(); Submit the signed challenge along with the signature to get the access token. The access token should be used for subsequent requests for protected resources from the Immersve API by supplying it in the Authorization header.","keywords":""},{"title":"authentication-custodial","type":0,"sectionRef":"#","url":"guides/custodial wallets/authentication","content":"authentication-custodial","keywords":""},{"title":"Card Lifecycle","type":0,"sectionRef":"#","url":"guides/custodial wallets/card-lifecycle","content":"Card Lifecycle The lifecycle of a card is tracked via a set of predefined card states. Throughout the card lifecycle the current state is used to determine the capabilities of the card. For example, cards must be activated before they can be used for purchases or other such activity. Immersve manages the lifecycle of cards, acting upon inputs from clients and other connected systems whilst ensuring that only permitted state transitions are carried out. note Card blocks are a distinct concept from the card lifecycle states Introduction​ As soon as a card is created it will be default to the created state. Depending on the type of card that was created it might be moved into different states automatically at this point. Card state updates can be made at any time once a card is created. The most common instances of card state updates include: Card activation in order to make the card ready for useCard deactivation once the card is no longer needed Card state updates are performed using the Update Card State API. A state must be provided in the request and a memo can optionally be included. Certain card state transitions are carried out automatically without explicit API client interactions. These circumstances include when a physical card moves from created to shipped once the card embossing file has been generated for that card. Card States​ State\tDescriptioncreated\tCard record has been created shipped\tCard has shipped to the manufacturer for production. sold\tCard has been sold, typically at a point-of-sale (POS). returned\tCard has been returned to the banking institution. resent\tCard has been resent to the customer's address. activated\tCard is activated and ready for use. invalid\tCard is no longer valid and is blocked from further use. State Transitions​ The following diagram shows the lifecycle of a card's different states. stateDiagram-v2 [*] --&gt; Created: start Created --&gt; Activated Created --&gt; Shipped Created --&gt; Invalid Shipped --&gt; Returned Shipped --&gt; Activated Shipped --&gt; Sold Shipped --&gt; Invalid Returned --&gt; Resent Returned --&gt; Invalid Resent --&gt; Returned Resent --&gt; Sold Resent --&gt; Activated Resent --&gt; Invalid Sold --&gt; Activated Sold --&gt; Invalid Activated --&gt; Invalid Invalid --&gt; [*]: end Virtual cards​ Card activation​ A virtual card is activated automatically upon creation and no explicit interactions are required prior to the usage of the card. Physical cards​ Shipped / Returned / Resent / Sold​ Transitions to shipped, returned, sold and resent states are determined by the data provided by the card personalization bureau. Card activation​ To activate a card, set the state in the request to activated. For security reasons, a physical card cannot be moved from created to activated. Instead, it can only be activated after it is sold or shipped. Card activation ensures that the details of a physical card cannot be used until it is delivered to the customer and activated. You can alternatively activate a card by setting the card Personal Identification Number (PIN) for the first time. Card deactivation​ Once a card is no longer needed, the card can be deactivated. When a card is deactivated, a card block is created on the card so that it can no longer be used. To deactivate a card, set the state in the request to invalid. Once a card has been set to invalid, it can no longer be transitioned to another state. You can cancel the card by calling the cancel a card operation. You can alternatively deactivate a card by selecting the option when reissuing a card. For more information, see Card Orders.","keywords":""},{"title":"Physical cards","type":0,"sectionRef":"#","url":"guides/custodial wallets/physical-cards","content":"Physical cards A card represents a collection of data including primary account number (PAN), expiry date, and security code, that allows a cardholder to make card payments. A physical card is an object that is encoded with unique card data during manufacture and is delivered to a cardholder. Physical cards let cardholders hold the data pertaining to their card on their person. Immersve supports physical card issuance and manufacture via the card creation API operation. Immersve does not ourselves produce physical cards; rather we integrate with card manufacturers who handle physical card production and shipping. As a client, you can request to create a physical card using the Immersve APIs. Immersve then includes the particulars of the newly-created card within an embossing file and sends it to your chosen card manufacturer partner. The physical card order flow is as shown in the following diagram. flowchart LR Create_card([Create card])--&gt;Generate_card([Generate card]) Queue_embossing_file([Queue embossing file])--&gt;Manufacture_card([Manufacture card]) subgraph Card Manufacturer direction TB Manufacture_card([Manufacture card])--&gt;Ship_card([Ship card]) end subgraph Immersve direction TB Generate_card([Generate card])--&gt;Generate_embossing_file([Generate embossing file]) Generate_embossing_file([Generate embossing file])--&gt;Queue_embossing_file([Queue embossing file]) end subgraph API Client direction TB Create_card([Create card]) end Contact us to find out if your preferred card manufacturer can be supported. Prerequisites​ Immersve must be securely integrated with the card manufacturing partner in order to provide card embossing files. Immersve integrates with card manufacturers by registering the manufacturer as a partner and issuing access credentials for their system. Typical steps to get set up with a card manufacturer include: Create card designsAcquire approval from your card networkProduce blank card plasticCreate card collateral Stock levels are not managed or recorded as part of the Immersve physical card orders process. For information on stock levels, work with your card manufacturer. To place a physical card order with Immersve, create a card referencing a particular card program. When a card order has been placed, information about the ordered card will be added to your embossing file. This file is then sent to your card manufacturer. Physical card order fulfillment​ After you complete a physical card order, Immersve generates a file containing all the information required for the cards to be produced. The ordered cards are included in the file. The embossing file supports orders for individual cards as well as bulk card orders. The embossing file consists of two parts: information about the entire order, contained in the cards object, and information about all the cards in the order, contained in the cards object. Order information​ The embossing file is sent to card manufacturers once per day. Each file includes all cards that have been created since the last time the file was generated. The embossing file can also be sent in batches. caution Because the embossing file is sent only once daily, submitting multiple physical card orders for the same cardholder but to different shipping addresses can only be done at least 1 day apart. When your card manufacturer receives the embossing file, the cards will be produced according to the order information in the file. When the cards have been produced, they will be shipped to your customers or specified branch locations. Physical card shipping​ Physical card shipping will be managed by the card manufacturer. When an order for a physical card has been placed, it typically goes through the following sequence of card states: After the card order has been placed and the card is created in the database, its state is created.When the card order information has been sent to the card manufacturer, its state changes to shipped.If the card is returned before reaching the customer, its state changes to returned.If a Point-of-Sale (POS) has been configured and the card is sold at a POS, its state changes to sold.If the card is being resent to the customer address, its state changes to resent.When the card is activated and ready to be used, its card state changes to activated.If the card is deactivated, its card state changes to invalid.","keywords":""},{"title":"Fetching secure card information","type":0,"sectionRef":"#","url":"guides/fetching-secure-card-information","content":"Fetching secure card information In order to retrieve the secure details of a card (cvv, expiry, pan), a one-time token must be generated. The steps for retrieving secure card details are as follows: Call the get a card token endpoint with the card id.Call the GET url specified in the callbackUrl response body field. The callbackUrl can only be used once, subsequent calls to this url will return a 403 response code. Example code snippet JavaScript import axios from 'axios'; // Using non-custodial authentication const tokenResponse = await axios.post( 'https://api.immersve.com/api/cards/123/pan-token', {}, { headers: { Authorization: 'Bearer eyJhbvbbfg', // jwt token, }, } ); const secureCardDetail = await axios.get(tokenResponse.callbackUrl); // Using custodial authentication const tokenResponse = await axios.post( 'https://api.immersve.com/api/cards/123/pan-token', {}, { headers: { 'x-api-key': 'imm-key-prod-LIVE-6e7e3821983ef6fe6cecabdbc8571bbf', 'x-api-secret': 'imm-secret-prod-LIVE-95b90292dfd747c143a9d258a93fb835', 'x-account-id': '8gh464292dfd747c143a9d258aj6jdkd8', // target account id (the account id this card belongs to) }, } ); const secureCardDetail = await axios.get(tokenResponse.callbackUrl); ","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"guides/introduction","content":"Introduction The particular set of guides that are relevant to your use case is dependent upon the context in which payment cards are to be funded. If end users will directly control the means by which cards will be funded (i.e. they hold the private key controlling the relevant blockchain address) then you should refer to the non-custodial wallet guides. If a custodian holds and controls the digital assets that will fund cards, such as a centralized exchange or other custodial wallet, then the custodial wallet guides are relevant to your use case.","keywords":""},{"title":"authentication-non-custodial","type":0,"sectionRef":"#","url":"guides/non-custodial wallets/authentication","content":"authentication-non-custodial","keywords":""},{"title":"Card Lifecycle","type":0,"sectionRef":"#","url":"guides/non-custodial wallets/card-lifecycle","content":"Card Lifecycle Card States​ Single-use virtual cards are activated and ready to use by default. When the card is either used to make a purchase or cancelled by the user it will transition to the cancelled state. stateDiagram-v2 [*]--&gt; Active: create Active--&gt;Cancelled : cancel_card Active--&gt;Cancelled : once_used Cancelled --&gt; [*] State Transitions​ Order a card​ A card begins life when you call the order a card operation to request Immersve to generate a card. Cancel a card​ Should a cardholder change their mind prior to presenting the card to a merchant, you can cancel the card by calling the cancel a card operation.","keywords":""},{"title":"Issue a Virtual Card","type":0,"sectionRef":"#","url":"guides/non-custodial wallets/issue-a-virtual-card","content":"Issue a Virtual Card A virtual card is a payment card that exists only in digital form. As such, virtual cards are most suitable for online e-commerce purchases as opposed to in-store purchases at brick-and-mortar merchants. Immersve treat virtual cards as being logically time-bound and ephemeral. Beginning at the time of issuance of a virtual card, it has a finite useable lifespan which is often represented within the UI of the issuing client application as a stopwatch-type timer. This model presents certain benefits over a traditional persistent payment card model (be they virtual, tokenized or physical) in that the potential for card fraud is dramatically reduced. The use of web3-native authentication mechanisms within the context of card issuance mean that the same level of protection to a user's funds in self-custodial wallets is applied to their activities as a cardholder. Prior to being permitted to order a card a user must first have successfully authenticated and locked digital assets within the smart contract via digital asset transfer and smart contract invocations as instructed by the get prerequisite transactions operation. Authentication​ The authentication processes is described in the authentication guide. As the user account is anchored by control of the private key, there is no distinct prior explicit registration or signup process needed before authenticating. Currency Conversion​ A user will more often than not be quoted a price for a purchase by a merchant in a fiat currency. In order to determine the sufficient amount of digital assets to fund a card and be made available for the purchase, you will retrieve the amount from the currency conversion API endpoint. Lock Funds​ In order to ensure that funds are sufficiently locked within the smart contract such that Immersve are in a position to approve an authorization request received via the card scheme network you will need to have firstly locked sufficient digital assets within the smart contract via digital asset transfer and smart contract invocations as instructed by the get prerequisite transactions operation. The necessary blockchain transactions are contained within the requiredTransactions collection returned. If the user has not transacted using the solution before then the the get prerequisite transactions response will typically call for and ERC20 approve in favour of the smart contract followed by a depositAndLock invocation of the smart contract. If multiple transactions are present then they should be carried out in the order in which they are presented. The client application is to parse and formulate the raw blockchain transaction message such that it is presented to the user within the web3 wallet and signed and sent to the relevant blockchain. How to use prerequisites example for ts/js​ Prerequisites endpoint returns Array of actions to be performed. Each object in array has type and params. Type smart_contract_write means that this action is about interaction with the smart contract. params contain all details required to perform this interaction. Code snippet (using ethers.js) Typescript code const { abi, contractAddress, method, params } = response.data.requiredTransactions.params; const contract = new Contract(contractAddress, abi, signer); // third param Signer is required const { hash } = await contract[method](...Object.values(params)); Wallet Funding for Development and Testing​ To ensure that integrators are able to obtain sufficient ERC-20 tokens to facilitate development and testing, Immersve uses an ERC-20 token contract that allows tokens to be freely minted as needed. In non-production environments any transaction returned by get prerequisite transactions with actions related to ERC20 smart contract will refer to the &quot;IMMUSDC&quot; token. The &quot;IMMUSDC&quot; token has a mint function allowing for the unlimited minting of the token to any wallet address. One particularly convenient way to get the necessary tokens is to use the Polygonscan interface. Open the IMMUSDC token in PolygonscanClick Write as ProxyClick Connect to Web3 to connect your wallet with PolygonscanOpen the mint functionSet the destination wallet address (where assets are to be sent) in the to field. Set an amount in the amount field.Initiate the web3 transaction clicking the Write buttonConfirm the transaction in the web3 wallet and pay the gas fees Order a Card​ With the funds locked in the smart contract, it's now time to order a card. Call the order a card operation to request Immersve to generate a card. The returned card data returned in response to a order a card request includes only truncated or masked sensitive data. Single-use virtual cards are activated and ready to use by default. Issue a Card​ Having created an virtual card via the order a card operation, you are in a position to be able to obtain the sensitive card details to be presented to the cardholder. There are two steps in this process; firstly, obtaining a token for transmission to the client application to which the card details are to be provided (i.e. the application that will display the card data to the cardholder) and;secondly, the exchange, by that client application, of the token for the card data. note It is not recommended that the card token is supplied to any application other than one that resides within the cardholder environment (i.e. their mobile application or web application running in their browser) unless that system is sufficiently compliant with PCI-DSS requirements and is audited as such. Get a Card Token​ Generate a single-use card token using the get a card token operation. The token is typically then transmitted to the cardholder's environment (i.e. web application or mobile application running in their web browser) to complete the final step completing the card issuance. Get Card Details​ To obtain the full PAN and CVV2 for display to the cardholder your client-side application should exchange the token for the sensitive card data. See fetching secure card information. Virtual Card Issuance Sequence Diagram​ sequenceDiagram participant U as User participant C as API Client participant I as Immersve participant W as Wallet participant B as Blockchain note over U: Authentication as per authentication guide U-&gt;&gt;C: Input desired fiat card funding amount C-&gt;&gt;+I: Currency convert I--&gt;&gt;C: convertedAmount C-&gt;&gt;I: Get prerequisite transactions I--&gt;&gt;C: requiredTransactions collection loop For each required transaction C-&gt;&gt;C: Construct raw transaction message C-&gt;&gt;W: Transmit raw transaction to wallet U-&gt;&gt;W: Confirm / authorize transaction W-&gt;&gt;B: Transmit transaction end C-&gt;&gt;+I: Order card I--&gt;&gt;C: Non-sensitive card data C-&gt;&gt;+I: Get card token I--&gt;&gt;C: Card token C-&gt;&gt;I: Request sensitive card data I--&gt;&gt;C: Return sensitive card data C--&gt;&gt;U: Display sensitve card data","keywords":""},{"title":"Authorization Reports","type":0,"sectionRef":"#","url":"guides/reports/authorization-reports","content":"Authorization Reports The authorization report can be used to review all card purchase authorizations for a given period. Field\tDescriptioncardToken\tUnique identifier of the card. transactionId\tUnique identifier of the associated card transaction. authorizationId\tUnique identifier of the original authorization request received via the card scheme network. authorizationCode\tSource of the transaction. See Authorization Codes. transactionType\tISO 8583 message class. This is a messaging standard for payments initiated with a card. status\tStatus of the transaction. Valid values are approved or declined. merchantCurrency\tLocal currency of the country where the transaction was processed. merchantAmount\tAmount of the transaction, in minor units of the local currency. billingCurrency\tCurrency of the card holder's account balance. billingAmount\tAmount of the transaction, in minor units of the billing currency. settlementCurrency\tCurrency the card issuer selects to be paid in. settlementAmount\tAmount to be settled, in minor units of the settlement currency. This amount may include fees. exchangeRate\tExchange rate applied between the merchant amount and the billing amount. accountId\tUnique identifier of the account which the card belongs to. merchantId\tUnique identifier of the merchant. merchantName\tName of the merchant. merchantCity\tCity of the merchant. merchantCountry\tCountry of the merchant. createdAt\tWhen the transaction was created, expressed in UNIX epoch time. approvedAt\tWhen the transaction was approved, expressed in UNIX epoch time. mcc\tFour-digit number listed in ISO 18245. Used to classify a business by the types of goods or services it provides. channel\tChannel used to initialize the transaction. Examples include ATM, and Online. Authorization Codes​ Code\tDescription0\tUnknown 1\tInWalletPOS 2\tOutOfWalletPOS 3\tInWalletATM 4\tOutOfWalletATM 5\tOnline 6\tPartner 7\tCustomer 8\tInternal 9\tStatic 10\tMobileCommerce 11\tOnUs 12\tOutOfWalletOnline Example​ 82cc0b217d3b850169286b0603e6a756_authorization_2023-03-28T00:00:00.000Z_2023-03-28T00:00:00.000Z.csv cardToken,transactionId,authorizationId,authorizationCode,transactionType,status,merchantCurrency,merchantAmount,billingCurrency,billingAmount,settlementCurrency,settlementAmount,exchangeRate,accountId,merchantId,merchantName,merchantCity,merchantCountry,createdAt,approvedAt,mcc,channel 6c474aa7a5dc45bff721b5a207cf0f47,1000000318081,1000000318080,5,0100,approved,USD,10000,NZD,16172,USDC,100000000,1.6172000000,225d85e65495722bf6517ea0ba0d6f56,47e4d565f99457119fd9c672f6edf0aa,Family Clothing Store,Auckland,NZL,2023-03-28T23:23:22.958Z,2023-03-28T23:23:24.533Z,5651,Online ","keywords":""},{"title":"Clearing Reports","type":0,"sectionRef":"#","url":"guides/reports/clearing-reports","content":"Clearing Reports The clearing report can be used to review all card purchase clearings for a given period. Field\tDescriptioncardToken\tUnique identifier of the card. transactionId\tUnique identifier of the associated card transaction. authorizationId\tUnique identifier of the original authorization request received via the card scheme network. transactionType\tISO 8583 message class. This is a messaging standard for payments initiated with a card. merchantCurrency\tLocal currency of the country where the transaction was processed. merchantAmount\tAmount of the transaction, in minor units of the local currency. billingCurrency\tCurrency of the card holder's account balance. billingAmount\tAmount of the transaction, in minor units of the billing currency. settlementCurrency\tCurrency the card issuer selects to be paid in. settlementAmount\tAmount to be settled, in minor units of the settlement currency. This amount may include fees. exchangeRate\tExchange rate applied between the merchant amount and the billing amount. accountId\tUnique identifier of the account which the card belongs to. merchantId\tUnique identifier of the merchant. merchantName\tName of the merchant. merchantCity\tCity of the merchant. merchantCountry\tCountry of the merchant. createdAt\tWhen the transaction was created, expressed in UNIX epoch time. approvedAt\tWhen the transaction was approved, expressed in UNIX epoch time. mcc\tFour-digit number listed in ISO 18245. Used to classify a business by the types of goods or services it provides. channel\tChannel used to initialize the transaction. Examples include ATM, and Online. Example​ 169286b0603e6a75122cc0b217d3b850_clearing_2023-04-18T00:00:00.000Z_2023-04-18T00:00:00.000Z.csv card_token,transaction_id,authorization_id,transaction_type,merchant_currency,merchant_amount,billing_currency,billing_amount,settlement_currency,settlement_amount,exchange_rate,account_id,merchant_id,merchant_name,merchant_city,merchant_country,creation_at,approved_at,mcc,channel 789f7719eab12100789653487c136165,1000000324137,1000000324138,1200,USD,500,USD,500,USDC,6000000,1.0000000000,e64aa69f0a9af2d664e5989bd7f22562,000000000000000,Family Clothing Store,Auckland,NZL,2023-04-18T01:08:06.435Z,2023-04-18T01:08:09.144Z,5651,Online ","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"guides/reports/introduction","content":"Introduction Immersve can generate reports for a given card program over a time period that suits your needs. The report is in CSV format. The file name format is {reportId}_{reportType}_{startDate}_{endDate}.csvreportId is the unique identifier for the report.reportType is the type of report. Valid values are authorization or clearing.startDate (inclusive) and endDate (exclusive) represent the time period being reported on. Once a report is generated, Immersve will send a notification to your webhook endpoint. sequenceDiagram participant API Client participant Immersve API Client-&gt;&gt;Immersve: Register webhook endpoint Immersve-&gt;&gt;Immersve: Create report Immersve-&gt;&gt;API Client: Send report notification Notification​ Notifications to your webhook endpoint will have the following payload. Field\tDescriptionreportId\tUnique identifier of the report. url\tURL to access the report. The URL will be valid for 7 days.","keywords":""},{"title":"Clearing","type":0,"sectionRef":"#","url":"guides/simulator/clearing","content":"Clearing A clearing acts in a very similar way to clearing without auth, however the card information that is used is based upon the initial authorization that was executed. When executing this clearing action, the user is prompted to enter a value. This allows for partial clearings to be made, where the amount being cleared may be less than the initial amount of authorized funds. Like with direct clearing without auth, this step will process the transaction, changing its status to the current date in the Immersve dashboard.","keywords":""},{"title":"Clearing Without Auth","type":0,"sectionRef":"#","url":"guides/simulator/clearing-without-auth","content":"Clearing Without Auth Instead of authorizing first, a payment can be made by outright creating a clearing. This clearing creates a debit for the account, allowing for reconciliation to be executed with the merchant. At this point, the transaction is considered to be processed. When this clearing is made successfully, a transaction will show up in the Immersve apps dashboard with a processed date of the current day.","keywords":""},{"title":"Authorization","type":0,"sectionRef":"#","url":"guides/simulator/authorization","content":"Authorization An authorization is an initial step in a transaction that checks if funds are available and sets up the approval for the transaction. At this point the transaction is initialized, with an initial hold being made on the funds, however no funds are settled with the merchant itself. The amount being supplied as the value for such an authorization cannot exceed the funds initially allocated to the card on creation. When the authorization has succeded, a transaction will show up on the Immersve apps dashboard with a processed date of pending","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"guides/simulator/introduction","content":"Introduction The simulator app is a test application that enables use of Immersve cards with a fake merchant. To begin using the simulator, one must first create an Immersve test card with the following steps: Visit https://app.immersve.com/config and toggle ENABLE_TEST_MODE to onGo to https://app.immersve.com and sign in with a new metamask account (don’t use your existing account)Create a card Once a card is acquired you can go to https://app.immersve.com/simulator to use the simulator. NOTE: You must stay logged into your Immersve account while using the simulator. Once on the simulator app, you will be given a form to enter your card details into, as well as a series of options as indicated by the flow diagram below. graph TD; A[Enter Card Details] --&gt; B[Clear Without Auth] A --&gt; C[Authorize] C --&gt; D[Clear] B --&gt; E[Reverse] C --&gt; E D --&gt; E At any point the reset button can be used to restore the application to its initial state, not maintaining any previous transaction history.","keywords":""},{"title":"Reversal","type":0,"sectionRef":"#","url":"guides/simulator/reversal","content":"Reversal After any of clearing, clearing without auth and authorization have been completed, the transaction can also be reversed using the reverse button. When this action is executed, a modal will allow the user to enter a value that is to be reversed. This can be less than the initial value of the previous action, allowing for a partial reversal of the transaction. Once reversed, the transaction in the Immersve dashboard will show as having its value reduced by the amount that was entered within the process.","keywords":""},{"title":"Webhooks","type":0,"sectionRef":"#","url":"guides/webhooks","content":"Webhooks Immersve uses webhooks to push real-time notifications to your app. Immersve sends events to your webhook endpoint as part of a POST request with a JSON payload. Your webhook must return a 200 response. If a 200 response is not received, Immersve will retry sending the notification with exponential backoff. Immersve has a maximum retry delay of 12 hours. There are multiple webhooks that Immersve sends to your app: Authorization - Sales and Authorization requestsTransaction - Clearing and Refund requestsCard Status Change - Card status changes Steps to receive webhooks​ You can start receiving event notifications in your app using the steps in this section: Create a webhook endpoint as an HTTP endpoint (URL) on your local server Webhook API Reference.Handle requests from Immersve by parsing each event object and returning a 200 response status code.Deploy your webhook endpoint so it’s a publicly accessible HTTPS URL.Contact Immersve to register your publicly accessible HTTPS URL.","keywords":""}]