[{"title":"Getting Started","type":0,"sectionRef":"#","url":"","content":"Getting Started Immersve is a multi chain payment protocol and Web3 / Metaverse Mastercard product. Powered by the tech and values of web3, Immersve enables its clients to deliver a decentralized payment experience.","keywords":""},{"title":"Generate Challenge","type":0,"sectionRef":"#","url":"api-reference/authentication/generate-challenge","content":"","keywords":""},{"title":"Operations​","type":1,"pageTitle":"Generate Challenge","url":"api-reference/authentication/generate-challenge#operations","content":"Request a challenge to be signed POST /siwe/generateChallenge curl --location --request POST 'https://app.immersve.com/siwe/generateChallenge' \\ --header 'Content-Type: application/json' \\ --data-raw '{ &quot;walletAddress&quot;: &quot;123&quot;, &quot;chainId&quot;: 123 }'  PAYLOAD:ChallengeRequest RESPONSE: Plain text in EIP-4361 format EXAMPLE RESPONSE PAYLOAD: app.immersve.com wants you to sign in with your Ethereum account: 0xA3058369d6A481B1ff08F62B352409c3D709De9b Sign in with Ethereum to the app. This request will not trigger a blockchain transaction or cost any gas fees. URI: https://app.immersve.com Version: 1 Chain ID: 1 Nonce: 2hFm7TDbZmerUgnrJ Issued At: 2022-08-11T22:29:48.244Z  "},{"title":"Login","type":0,"sectionRef":"#","url":"api-reference/authentication/login","content":"","keywords":""},{"title":"Operations​","type":1,"pageTitle":"Login","url":"api-reference/authentication/login#operations","content":"Exchange signed challenge for the authentication token POST /siwe/login curl 'https://app.immersve.com/siwe/login' \\ --header 'content-type: application/json' \\ --data-raw '{ &quot;message&quot;:&quot;app.immersve.com wants you to sign in with your Ethereum account:\\n0xA3058369d6A481B1ff08F62B352409c3D709De9b\\n\\nBy connecting your wallet and using Immersve, you agree to our Terms of services and Privacy Policy\\n\\nURI: https://app.immersve.com\\nVersion: 1\\nChain ID: 137\\nNonce: ocT89WH9QOmeC6nSF\\nIssued At: 2022-09-22T21:03:01.064Z&quot;,&quot;signature&quot;:&quot;0x4370802f2b4181bf904eb7f34cf928e2b6f32bb7301cf80f4e559989df3249ab4f21548e97fe27ffcb2a7539c9308442865fe8c524b5c936314d7d958fcbc8931b&quot; }'  PAYLOAD: LoginRequest RESPONSE: LoginResponse EXAMPLE RESPONSE PAYLOAD: { &quot;token&quot;: &quot;...&quot;, }  "},{"title":"Cancel card","type":0,"sectionRef":"#","url":"api-reference/card/cancel-card","content":"","keywords":""},{"title":"Models​","type":1,"pageTitle":"Cancel card","url":"api-reference/card/cancel-card#models","content":"Card "},{"title":"Operations​","type":1,"pageTitle":"Cancel card","url":"api-reference/card/cancel-card#operations","content":"Cancel the card PUT /api/cards/orders/{card-id} curl --location --request PUT 'https://api.immersve.com//api/cards/orders/{card-id}' \\ --header &quot;Authorization: Bearer $IMMERSVE_JWT_TOKEN&quot;  RESPONSE: Schema: Card EXAMPLE RESPONSE PAYLOAD: { &quot;id&quot;: &quot;91ad6fea3b52ca58d60d7fd310f789ec&quot;, &quot;externalId&quot;: &quot;8649543161870318367&quot;, &quot;expiry&quot;: &quot;202409&quot;, &quot;accountId&quot;: &quot;057aa15913a57f50577234c8426534c0&quot;, &quot;createdAt&quot;: &quot;2022-09-23T03:52:36.909Z&quot;, &quot;modifiedAt&quot;: &quot;2022-09-23T03:52:36.909Z&quot;, &quot;version&quot;: 1, &quot;type&quot;: &quot;virtual&quot;, &quot;state&quot;: &quot;cancelled&quot; }  "},{"title":"Generate card pan token","type":0,"sectionRef":"#","url":"api-reference/card/generate-card-pan-token","content":"","keywords":""},{"title":"Models​","type":1,"pageTitle":"Generate card pan token","url":"api-reference/card/generate-card-pan-token#models","content":"Token "},{"title":"Operations​","type":1,"pageTitle":"Generate card pan token","url":"api-reference/card/generate-card-pan-token#operations","content":"Generate a token to get card's detail POST /api/cards/{card-id}/panToken curl --location --request POST 'https://api.immersve.com/api/cards/{card-id}/panToken' \\ --header &quot;Authorization: Bearer $IMMERSVE_JWT_TOKEN&quot;  RESPONSE: Schema: Token EXAMPLE RESPONSE PAYLOAD: { &quot;tokenId&quot;: &quot;1E2426184B3676720F36E43A22649AFF-1000041153&quot;, }  Get the card's details from E6 mobile API POST E6_MOBILE_BASE_URL/v1/auth/pan/token/validate curl --location --request POST 'https://E6_MOBILE_BASE_URL/v1/auth/pan/token/validate' \\ --data-raw '{ &quot;tokenId&quot;:&quot;A token got from above operation&quot; }'  RESPONSE: Schema: The schema is defined in external provider's website The response must contains fields: pan and cvv2 EXAMPLE RESPONSE PAYLOAD: { &quot;creationTime&quot;: 1663888904887, &quot;modifiedTime&quot;: 1663888904887, &quot;id&quot;: &quot;1F63FE470D29ABC5C727570C1AD42B82-1000041003&quot;, &quot;cardNumber&quot;: &quot;5713851215688026472&quot;, &quot;panFirst6&quot;: &quot;424211&quot;, &quot;panLast4&quot;: &quot;0528&quot;, &quot;type&quot;: &quot;virtual&quot;, &quot;state&quot;: &quot;activated&quot;, &quot;sequenceNumber&quot;: 1, &quot;cardProfileName&quot;: &quot;Test card&quot;, &quot;pinFailCount&quot;: 0, &quot;reissue&quot;: false, &quot;expiry&quot;: &quot;202409&quot;, &quot;customerNumber&quot;: &quot;10000021250574&quot;, &quot;embossedName&quot;: &quot;CARDHOLDER/IMMERSVE&quot;, &quot;programName&quot;: &quot;vcc&quot;, &quot;pan&quot;: &quot;&lt;the full pan of the card&gt;&quot;, &quot;cvv2&quot;: &quot;&lt;the cvv2 of the card&gt;&quot; }  "},{"title":"Order card","type":0,"sectionRef":"#","url":"api-reference/card/order-card","content":"","keywords":""},{"title":"Models​","type":1,"pageTitle":"Order card","url":"api-reference/card/order-card#models","content":"Card "},{"title":"Operations​","type":1,"pageTitle":"Order card","url":"api-reference/card/order-card#operations","content":"Create a card by Immersve POST /api/cards/orders curl --location --request POST 'https://api.immersve.com/api/cards/orders' \\ --header 'Authorization: Bearer $IMMERSVE_JWT_TOKEN' \\ --header 'Content-Type: application/json' \\ --data-raw '{ &quot;transactionHash&quot;:&quot;the hash of transaction transferring USDC to Immersve wallet address &quot; }'  RESPONSE: Schema: Card EXAMPLE RESPONSE PAYLOAD: { &quot;id&quot;: &quot;91ad6fea3b52ca58d60d7fd310f789ec&quot;, &quot;externalId&quot;: &quot;8649543161870318367&quot;, &quot;expiry&quot;: &quot;202409&quot;, &quot;accountId&quot;: &quot;057aa15913a57f50577234c8426534c0&quot;, &quot;createdAt&quot;: &quot;2022-09-23T03:52:36.909Z&quot;, &quot;modifiedAt&quot;: &quot;2022-09-23T03:52:36.909Z&quot;, &quot;version&quot;: 1, &quot;type&quot;: &quot;virtual&quot;, &quot;state&quot;: &quot;active&quot; }  "},{"title":"Currency Convert","type":0,"sectionRef":"#","url":"api-reference/currency/currency-convert","content":"","keywords":""},{"title":"Models​","type":1,"pageTitle":"Currency Convert","url":"api-reference/currency/currency-convert#models","content":"Currency Conversion "},{"title":"Operations​","type":1,"pageTitle":"Currency Convert","url":"api-reference/currency/currency-convert#operations","content":"Convert a source currency to a target currency using Mastercard rates GET /api/currency/convert?currency={sourceCurrency}&amp;targetCurrency={targetCurrency}&amp;amount={amountToConvert}&amp;fee={extraFee} curl https://api.immersve.com/api/currency/convert?currency=NZD&amp;targetCurrency=USD&amp;amount=1000 \\ -H &quot;Authorization: Bearer $IMMERSVE_JWT_TOKEN&quot;  PARAMETERS: Field\tType\tRequired\tDescriptioncurrency\tString\tX\tThe currency alpha code to convert from amount\tNumber\tX\tThe amount of currency to convert to destination currency targetCurrency\tString The target currency alpha code for the conversion. Defaults to USD fee\tNumber Optional fee added on top of the conversion. Defaults to 0 RESPONSE: Schema: Currency Conversion EXAMPLE RESPONSE PAYLOAD: { &quot;currency&quot;: &quot;NZD&quot;, &quot;convertedCurrency&quot;: &quot;USD&quot;, &quot;amount&quot;: 1000, &quot;convertedAmount&quot;: 696.2285, &quot;rate&quot;: 0.6962285 }  "},{"title":"Currency List","type":0,"sectionRef":"#","url":"api-reference/currency/currency-list","content":"","keywords":""},{"title":"Models​","type":1,"pageTitle":"Currency List","url":"api-reference/currency/currency-list#models","content":"Currency "},{"title":"Operations​","type":1,"pageTitle":"Currency List","url":"api-reference/currency/currency-list#operations","content":"Get list of supported currencies by Immersve GET /api/currencies curl https://api.immersve.com/api/currencies \\ -H &quot;Authorization: Bearer $IMMERSVE_JWT_TOKEN&quot;  RESPONSE: Schema: Array&lt;Currency&gt; EXAMPLE RESPONSE PAYLOAD: [ { &quot;symbol&quot;: &quot;KYD&quot;, &quot;label&quot;: &quot;CAYMAN ISLAND DOLLAR&quot; },{ &quot;symbol&quot;: &quot;JPY&quot;, &quot;label&quot;: &quot;JAPANESE YEN&quot; },{ &quot;symbol&quot;: &quot;NZD&quot;, &quot;label&quot;: &quot;NEW ZEALAND DOLLAR&quot; },{ &quot;symbol&quot;: &quot;USD&quot;, &quot;label&quot;: &quot;UNITED STATES DOLLAR&quot; } ]  "},{"title":"Authentication","type":0,"sectionRef":"#","url":"guides/authentication","content":"","keywords":""},{"title":"Login Flow​","type":1,"pageTitle":"Authentication","url":"guides/authentication#login-flow","content":"sequenceDiagram participant M as Web-3 Wallet participant C as API Client participant I as Immersve C-&gt;&gt;+I: Get EIP-4361 challenge I--&gt;&gt;-C: Challenge C-&gt;&gt;M: Request to sign an EIP-4361 message M--&gt;&gt;C: Signature C-&gt;&gt;+I: Send EIP-4361 message + signature I--&gt;&gt;-C: Return JWT Token note over C: JWT Token will be used for the following requests to Immersve API Request EIP-4361 challenge. The response is a EIP-4361 message to be signed by the wallet in plain text, for example: app.immersve.com wants you to sign in with your Ethereum account: 0xA3058369d6A481B1ff08F62B352409c3D709De9b Sign in with Ethereum to the app. This request will not trigger a blockchain transaction or cost any gas fees. URI: https://app.immersve.com Version: 1 Chain ID: 1 Nonce: 2hFm7TDbZmerUgnrJ Issued At: 2022-08-11T22:29:48.244Z Invoke the wallet's signing capability to get a signature for the challenge message. This part's implementation is specific to the wallet used, but it is fair to say that this abstract function is available in all wallets. Submit the signed challenge with its signature to get the authentication token The received token should be used for consequent requests to protected resources in the Authorization header "},{"title":"Card","type":0,"sectionRef":"#","url":"guides/card","content":"","keywords":""},{"title":"Card State​","type":1,"pageTitle":"Card","url":"guides/card#card-state","content":"After created, the card is activated. when the card is used or canceled by user, it will go to the cancelled state. stateDiagram-v2 [*]--&gt; Active: create Active--&gt;Cancelled : cancel_card Active--&gt;Cancelled : once_used Cancelled --&gt; [*] "},{"title":"Card Usage​","type":1,"pageTitle":"Card","url":"guides/card#card-usage","content":"Before create a card, users need to transfer USDC from their wallet address to Immersve wallet address. Then they create a card associate with the transaction. Immersve will locked the funds of the transaction in the card for further spending. For security sake, the returned card only include truncated pan and expiry. To get the full pan and cvv2, users need to generate card pan token from Immersve that will be used to get full pan and cvv2 from E6 Mobile API. If users authorize a merchant to use the card, credit network will send authorization and clearing request to Immersve, if the transaction are cleared. the card will be cancelled by Immersve automatically.If users change their mind before the card is used, they can cancel the card by calling cancel card API.  sequenceDiagram participant U as User participant C as API Client participant I as Immersve participant E as E6 Mobile API participant CN as Credit Network U-&gt;&gt;U: Create a transaction that transfers the USDC to Immersve wallet address U-&gt;&gt;C : Create a card with the hash of the transaction C-&gt;&gt;+I: Create a card with the hash of the transaction I--&gt;&gt;C: Return a Card C--&gt;&gt;U: Return a Card loop user want to get the card's detail C-&gt;&gt;I: Request a card pan token C-&gt;&gt;E: Validate the card details end alt if user filled in the card in merchant CN-&gt;&gt;I: Authorization of the card I--&gt;&gt;CN: Approved the Authorization of the card CN-&gt;&gt;I: Settle the authorization of the card I--&gt;&gt;CN: Clear the authorization I-&gt;&gt;I : Cancel the card else the card be cancelled before used C-&gt;&gt;I : Cancel the card I--&gt;&gt;-C: card cancelled end "},{"title":"Card","type":0,"sectionRef":"#","url":"models/card-model","content":"","keywords":""},{"title":"Model​","type":1,"pageTitle":"Card","url":"models/card-model#model","content":"Field\tType\tDescriptionaccountId\tString\tWhich account this card belongs to cardExternalId\tInteger\tThe external id for this card cardCurrency\tString\tThe currency of this card cardState\tString\tThe state of the card, enum &quot;active&quot;, &quot;cancelled&quot; cardType\tString\tThe type of the card, Now only support &quot;virtual&quot; panFirst6\tString\tThe first 6 digits of the card panLast4\tString\tThe last 4 digits of the card expiry\tString\tThe expiry of the card "},{"title":"ChallengeRequest","type":0,"sectionRef":"#","url":"models/challenge-request","content":"","keywords":""},{"title":"Model​","type":1,"pageTitle":"ChallengeRequest","url":"models/challenge-request#model","content":"Field\tType\tDescriptionwalletAddress\tString\tWallet Address chainId\tInteger\tChain Id "},{"title":"Immersve Payment Gateway","type":0,"sectionRef":"#","url":"contracts/payment-gateway","content":"","keywords":""},{"title":"Extensions​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#extensions","content":"For security reasons, the smart contract implements the following OpenZeppelin Contracts InitializableAccessControlPausableReentrancyGuard "},{"title":"Proxy​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#proxy","content":"The Smart Contract implements the OpenZeppelin TransparentUpgradeable proxy. Proxy features: Security: If any bugs are found, or potential security risks, the Smart Contract can be updated to resolve any potential issuesFeature Upgradeability: Any new features and bug fixes can be added. The Smart Contract will keep the same state, without the need of expensive migrationsStability: Clients interacting with the Smart Contract will always do so through the same proxy address. The proxy will know the current implementation address and will always keep the same state. More about upgradeable contracts here: https://blog.openzeppelin.com/the-state-of-smart-contract-upgrades/ graph LR Client -- Trx --&gt; Proxy[(Proxy)] Proxy -- &quot;getImplementation()&quot; --&gt; Proxy Proxy -- old --&gt; v1{{ContractImplV1}} Proxy -- &quot;delegate call&quot; --&gt; v2{{ContractImplV2}} "},{"title":"Functions​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#functions","content":""},{"title":"initialize(address payable _settlementAddress, address _usdcSmartContract, uint256 _defaultTimeoutBlocks, uint256 _safetyBlocks) external initializer​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#initializeaddress-payable-_settlementaddress-address-_usdcsmartcontract-uint256-_defaulttimeoutblocks-uint256-_safetyblocks-external-initializer","content":"Initialize the Smart Contract with the required arguments _settlementAddress (type address payable): The web3 address were Locked funds will be sent once a payment is confirmed by Immersve_usdcSmartContract (type address): The current network address of the ERC-20 USDC Smart Contract_defaultTimeoutBlocks (type uin256): Number of blocks in the blockchain that an asset lock will last by default_safetyBlocks (type uin256): Number of blocks on top of the default timeout used to calculate if a Lock is usable or not. Because there might be a delay between a transaction confirmation and the actual use of Locked funds by Immersve, there has to be some safety threshold for Immersve to execute the settlement of funds.  "},{"title":"getVersion() external pure returns(string memory)​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#getversion-external-pure-returnsstring-memory","content":"Get the current version implementation of the smart contract with a Version number stored in a Solidity Constant. This means that the constant is not saved into the Smart Contract store.  "},{"title":"pause() public onlyRole(PAUSER_ROLE)​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#pause-public-onlyrolepauser_role","content":"Pauses the functionality of the Smart Contract. All the functions marked with the whenNotPaused modifier will reject the transaction once a pause is in effect. Only the PAUSER_ROLE will be able to call this function.  "},{"title":"unpause() public onlyRole(PAUSER_ROLE)​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#unpause-public-onlyrolepauser_role","content":"Unpauses the functionality of the Smart Contract. All the functions marked with the whenNotPaused modifier will accept the transaction normally. Only the PAUSER_ROLE will be able to call this function.  "},{"title":"setTimeoutBlocks(uint256 timeoutBlocks) public onlyRole(SETTLER_ROLE)​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#settimeoutblocksuint256-timeoutblocks-public-onlyrolesettler_role","content":"Set the default timeout for AssetLockedFund as described in Asset Locked Funds section. Only the SETTLER_ROLE will be able to call this function. timeoutBlocks (type uin256): Number of blocks for an Asset Lock to be considered expired  "},{"title":"setSafetyBlocks(uint256 timeoutBlocks) public onlyRole(SETTLER_ROLE)​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#setsafetyblocksuint256-timeoutblocks-public-onlyrolesettler_role","content":"Set the safety block threshold for AssetLockedFund as described in Asset Locked Funds section. Only the SETTLER_ROLE will be able to call this function. timeoutBlocks (type uin256): Number of blocks for an Asset Lock to be considered safe to settle  "},{"title":"deposit(uint256 usdcAmount) external whenNotPaused nonReentrant​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#deposituint256-usdcamount-external-whennotpaused-nonreentrant","content":"CardHolders can deposit USDC funds into the Smart Contract using this function. The funds can either be locked or withdrawn by the consumer later. Locked funds cannot be withdrawn until the lock expires, or the user revokes the lock with an Immersve token. There is a pre-requisite for this function to work. Because USDC is an ERC-20 token, the consumer needs to approve (https://polygonscan.com/token/0x2791bca1f2de4661ed88a30c99a7a9449aa84174#writeProxyContract#F1 USDC funds to the Smart Contract public address usdcAmount (type uin256): USDC Amount to deposit in ethers format  "},{"title":"depositTo(uint256 usdcAmount, address sender) external whenNotPaused nonReentrant​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#deposittouint256-usdcamount-address-sender-external-whennotpaused-nonreentrant","content":"CardHolders can deposit USDC funds for a specific address into the Smart Contract using this function. The funds can either be locked or withdrawn by the consumer later. Locked funds cannot be withdrawn until the lock expires, or the user revokes the lock with an Immersve token. There is a pre-requisite for this function to work. Because USDC is an ERC-20 token, the consumer needs to approve (https://polygonscan.com/token/0x2791bca1f2de4661ed88a30c99a7a9449aa84174#writeProxyContract#F1 USDC funds to the target sender address for the Smart Contract public address usdcAmount (type uin256): USDC Amount to deposit in ethers formataddress (type address): Deposit target address  "},{"title":"withdraw(uint256 usdcAmount) external whenNotPaused nonReentrant​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#withdrawuint256-usdcamount-external-whennotpaused-nonreentrant","content":"CardHolders can withdraw USDC funds associated to their balance from the Smart Contract using this function. Locked funds cannot be withdrawn until the lock expires, or the user revokes the lock with an Immersve token. usdcAmount (type uin256): USDC Amount to withdraw in ethers format  "},{"title":"createLockedFund (uint256 usdcAmount) external whenNotPaused nonReentrant​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#createlockedfund-uint256-usdcamount-external-whennotpaused-nonreentrant","content":"CardHolders can put a Lock in place for deposited funds so Immersve can authorize the use of a credit card using those locked funds as collateral. The locked funds will be represented with a AssetLockedFund struct inside the Smart Contract. When created, a timeout will be put in place for this lock based on the default Timeout Blocks (see []) usdcAmount (type uin256): USDC Amount to lock in ethers format  "},{"title":"depositAndCreateLockedFund (uint256 usdcAmount) external whenNotPaused nonReentrant​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#depositandcreatelockedfund-uint256-usdcamount-external-whennotpaused-nonreentrant","content":"Similar to deposit but combined with createLockedFund. This function is doing both the deposit and the lock at the same time to save gas fees. usdcAmount (type uin256): USDC Amount to deposit in ethers format  "},{"title":"depositAndCreateLockedFundFor (uint256 usdcAmount, address sender) external whenNotPaused nonReentrant​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#depositandcreatelockedfundfor-uint256-usdcamount-address-sender-external-whennotpaused-nonreentrant","content":"Similar to depositAndCreateLockedFund but the target address is specified as an argument instead of using msg.sender usdcAmount (type uin256): USDC Amount to deposit in ethers format  "},{"title":"confirmLockedFundPayment (address sender, uint256 price, uint256 lockedFundId) external whenNotPaused nonReentrant onlyRole(SETTLER_ROLE)​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#confirmlockedfundpayment-address-sender-uint256-price-uint256-lockedfundid-external-whennotpaused-nonreentrant-onlyrolesettler_role","content":"Used by Immersve to confirm the settlement of an Immersve Card payment. This function will check that the specified address has enough locked funds for the specified lockedFundId and will transfer the settlement amount (price) to the settlement address, specified in the initialize function. It can only be called by the SETTLER role sender (type address): CardHolder Address doing a payment requiring locked funds with Immersveprice (type uin256): USDC Amount to settle in ethers formatlockedFundId (type uin256): Matching Locked Fund Id (which is linked to a Card) to settle payment being done with an Immersve Credit Card  "},{"title":"getAvailableLockedFundsBalance (address sender)​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#getavailablelockedfundsbalance-address-sender","content":"Get Available Locked funds for the specified address sender (type address): CardHolder Address that already did a funds lock  "},{"title":"getBalance()​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#getbalance","content":"Get the available USDC balance of the msg.sender deposited in the Smart Contract. Balance is not the necessarily the same as locked funds as the former are short lived.  "},{"title":"getSenderBalance (address sender)​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#getsenderbalance-address-sender","content":"Get the available USDC balance of the specified sender argument, deposited in the Smart Contract. Balance is not the necessarily the same as locked funds as the former are short lived. sender (type address): CardHolder Address  "},{"title":"getLockedFunds()​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#getlockedfunds","content":"Get the AssetLockedFund objects of the msg.sender  "},{"title":"getSenderLockedFunds (address sender) onlyRole(SETTLER_ROLE)​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#getsenderlockedfunds-address-sender-onlyrolesettler_role","content":"Get the AssetLockedFund objects of the specified sender argument sender (type address): CardHolder Address that already locked funds at least once  "},{"title":"revokeLockedFundMultiSig (uint256 lockedFundId, uint256 nonce, bytes memory signature) external whenNotPaused nonReentrant​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#revokelockedfundmultisig-uint256-lockedfundid-uint256-nonce-bytes-memory-signature-external-whennotpaused-nonreentrant","content":"CardHolders will be able to revoke a fund lock using an Immersve signature. Immersve will first check if the funds is being used for a payment on Immersve backend. If the funds are free to release, Immersve will sign a message with a nonce only valid for a lockedFundId and the funds will be put back into the CardHolder balance lockedFundId (type uint256): Id of the AssetLockedFund to be releasednonce (type uint256): Nonce provided by Immersve API and matches the signaturesignature (type memory): String signature provided by Immersve API created with a nonce to avoid replay calls  "},{"title":"revokeLockedFund (address sender, uint256 lockedFundId) external whenNotPaused nonReentrant onlyRole(SETTLER_ROLE)​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#revokelockedfund-address-sender-uint256-lockedfundid-external-whennotpaused-nonreentrant-onlyrolesettler_role","content":"Function used by Immersve Backend (only SETTLER role can call this function) to revoke an unexpired lock. This could be done if Immersve detect illegal or malicious activity related to the sender and prefers to revoke locked fund ids sender (type address): CardHolder Address that already locked funds with the Smart ContractlockedFundId (type uint256): Id of the AssetLockedFund to be released "},{"title":"Immersve Card E-Commerce Payment Happy Path​","type":1,"pageTitle":"Immersve Payment Gateway","url":"contracts/payment-gateway#immersve-card-e-commerce-payment-happy-path","content":"Card Holder locks USDC funds with Immersve Smart ContractCard Holder receives a valid Credit Card to be used for E-Commerce transaction from ImmersveCard Holder uses the Immersve Card to pay for goods purchased on an E-Commerce platformImmersve authorizes the payment with Credit Card network once the locked funds are confirmedPurchase is confirmed by Immersve and E-Commerce merchant sequenceDiagram participant H as Card Holder participant W as Web-3 Wallet participant I as Immersve Backend participant S as Smart Contract participant U as USDC Smart Contract participant E as E-Commerce website participant M as E-Commerce Merchant H-&gt;&gt;I: Create card pre-request I--&gt;&gt;H: Web3 Transaction Details H-&gt;&gt;W: Submit Transactions W-&gt;&gt;U: Approve Card Total Authorized Amount in USDC W-&gt;&gt;S: Deposit and Lock USDC funds S-&gt;&gt;U: Transfer approved amount from Card Holder wallet to Immersve Smart Contract S--&gt;&gt;S: Add approved amount to Card Holder address balance S--&gt;&gt;S: Create AssetLockedFund to temporarily lock Card Holder funds to be used by Immersve Card S--&gt;&gt;W: Transaction Hash W--&gt;&gt;H: Transaction Hash H-&gt;&gt;I: Card Create Request I-&gt;&gt;S: Check enough funds for Card creation S--&gt;&gt;I: Locked Funds confirmed I--&gt;&gt;H: Card created H-&gt;&gt;E: Use Immersve Card to pay for goods online E--&gt;&gt;M: Validate Credit Card payment M-&gt;&gt;I: Merchant request payment authorization through Credit Card network I-&gt;&gt;S: Check locked funds and settle payment amount S-&gt;&gt;S: Settle payment funds I-&gt;&gt;M: Authorize payment "},{"title":"CurrencyConversion","type":0,"sectionRef":"#","url":"models/currency-conversion-model","content":"","keywords":""},{"title":"Model​","type":1,"pageTitle":"CurrencyConversion","url":"models/currency-conversion-model#model","content":"Field\tType\tDescriptioncurrency\tString\tThe currency to convert from targetCurrency\tString\tThe target currency for the conversion convertedCurrency\tString\tThe currency converted to amount\tNumber\tThe amount of currency to convert to destination currency convertedAmount\tNumber\tThe resulting amount of the conversion from currency into convertedCurrency rate\tNumber\tThe conversion rate from currency to convertedCurrency "},{"title":"LoginRequest","type":0,"sectionRef":"#","url":"models/login-request","content":"","keywords":""},{"title":"Model​","type":1,"pageTitle":"LoginRequest","url":"models/login-request#model","content":"Field\tType\tDescriptionmessage\tString\tThe EIP-4361 challenge signature\tString\tSignature obtained by signing the message with the wallet "},{"title":"LoginResponse","type":0,"sectionRef":"#","url":"models/login-response","content":"","keywords":""},{"title":"Model​","type":1,"pageTitle":"LoginResponse","url":"models/login-response#model","content":"Field\tType\tDescriptiontoken\tString\tThe token to be used in the authorization header "},{"title":"Token","type":0,"sectionRef":"#","url":"models/token-model","content":"","keywords":""},{"title":"Model​","type":1,"pageTitle":"Token","url":"models/token-model#model","content":"Field\tType\tDescriptiontoken\tString\ta token "},{"title":"Currency","type":0,"sectionRef":"#","url":"models/currency-model","content":"","keywords":""},{"title":"Model​","type":1,"pageTitle":"Currency","url":"models/currency-model#model","content":"Field\tType\tDescriptionsymbol\tString\tThe Alpha code for the currency. label\tString\tThe full name of the currency. "}]