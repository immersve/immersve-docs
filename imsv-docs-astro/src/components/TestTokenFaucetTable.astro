---
import { getCollection } from 'astro:content';
import { isToken } from 'typescript';

const allNetworkTokens = await getCollection('network-tokens');
const allNetworks = await getCollection('networks');

interface Props {
  token: string;
}

const { token } = Astro.props;

function isTestnetToken(tokenSlug: string) {
  const network = allNetworks.find(n => tokenSlug.includes(n.slug));
  return network?.data.netType === 'testnet';
}

const targetTokens = allNetworkTokens.filter(t => t.slug.includes(token));
const targetTestTokens = targetTokens.filter(t => isTestnetToken(t.slug));

function wrappableAddress(addr: string) {
  return addr.match(/.{1,30}/g)!.join('<wbr>');
}

function chainFromSlug(slug: string) {
  const chain = slug.split('-').slice(1).map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
  return chain;
}
---
<div class="overflow-x-auto">
  <table>
    <thead>
      <tr>
        <th>Symbol</th>
        <th>Chain</th>
        <th>Token Address</th>
        <th>Faucet</th>
      </tr>
    </thead>
      <tbody>
      {targetTestTokens?.map(token => (
        <tr>
          <td><nobr>{token.data.title}</nobr></td>
          <td><nobr>{chainFromSlug(token.slug)}</nobr></td>
          <td><a href={token.data.url} target="_blank" set:html={wrappableAddress(token.data.address)}></a></td>
          <td><a href={token.data.faucet} target="_blank" set:html={token.data.faucetTitle}></a></td>
        </tr>
      ))}
    </tbody>
  </table>
</div>
