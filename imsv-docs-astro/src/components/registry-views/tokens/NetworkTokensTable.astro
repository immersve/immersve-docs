---
import { registry } from 'src/content/registry.mjs';
import { wrappableAddress } from 'src/components/registry-views/wrappableAddress.mjs';

interface Props {
  netType: string;
  token: string;
  columns: Array<string>;
}

const {
  netType,
  token,
  columns = [ 'symbol', 'chain', 'address', 'faucet' ],
}: Props = Astro.props;

const networkTokens = registry.allNetworkTokens()
  .filter(networkToken => !netType || networkToken.network.type == netType)
  .filter(networkToken => !token || networkToken.token.name == token);

const columnTitles: Record<string,string> = {
  symbol: 'Symbol',
  chain: 'Chain',
  address: 'Token Address',
  faucet: 'Faucet',
};

---

<div class="overflow-x-auto">
  <table>
    <thead>
      <tr>
        {columns.map(column => (
          <th>{columnTitles[column]}</th>
        ))}
      </tr>
    </thead>
      <tbody>
      {networkTokens.map(networkToken => (
        <tr>
          {columns.map(column=> {
            switch(column) {
              case 'symbol':
                return <td><nobr>{networkToken.token.title}</nobr></td>
              case 'chain':
                return <td><nobr>{networkToken.network.chain.title}</nobr></td>
              case 'address':
                return <td><a href={networkToken.url} set:html={wrappableAddress(networkToken.address)}></a></td>
              case 'faucet':
                return <td><a href={networkToken.faucetUrl}><nobr>{networkToken.faucetTitle}</nobr></a></td>
              default:
                return <td></td>
            }
          })}
        </tr>
      ))}
    </tbody>
  </table>
</div>
