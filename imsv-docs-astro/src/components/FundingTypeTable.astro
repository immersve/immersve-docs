---
import { getCollection } from 'astro:content';

const allFundingTypes = await getCollection('funding-types');
const allNetworks = await getCollection('networks');
const allTokensInstalledOnNetworks = await getCollection('network-tokens');

interface Props {
  categories: Array<string>;
}

const { categories } = Astro.props;

function findTokenFromFundingType(fundingTypeSlug: string) {
  return fundingTypeSlug.split('-')[1];
}

function findToken(networkSlug: string, fundingTypeSlug: string) {
  return allTokensInstalledOnNetworks.filter(
    token => token.slug.includes(networkSlug) && token.slug.includes(findTokenFromFundingType(fundingTypeSlug))
    );
}

const filteredFundingTypes = allFundingTypes.filter(ft => categories?.every(c => ft.data.categories.includes(c)));

const supportedNetworks = filteredFundingTypes.map(
    ft => ft.data.networks.map(
      n =>  { const supportedNetwork = allNetworks.find(
        nw => nw.slug.includes(n)
      )
      const token = findToken(supportedNetwork!.slug, ft.slug)

      return {
        network: supportedNetwork,
        fundingType: ft.slug,
        token: token,
      }}
    )
  )
  .flat()

---
<div class="overflow-x-auto">
  <table>
    <thead>
      <tr>
        <th>Network</th>
        <th>Token</th>
        <th>Funding Type</th>
      </tr>
    </thead>
      <tbody>
        {supportedNetworks.map(network => (
          network.network?.data.protocols.map(protocol => (
            <tr>
              <td><nobr>{network.network?.data.title}</nobr></td>
              <td><nobr>{network.token[0].data.title}</nobr></td>
              <td><nobr><code>{network.fundingType}</code></nobr></td>
            </tr>
          ))
        ))}
    </tbody>
  </table>
</div>
