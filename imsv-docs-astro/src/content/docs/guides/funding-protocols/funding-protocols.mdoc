---
title: Funding Protocols
slug: guides/funding-protocols
description: |
  Immersve offers multiple card funding protocols, letting you choose the best
  way for your users to spend their web3 assets.
sidebar:
  order: 1
---

Funding protocols determine how a card is provided with available balance and
how the Immersve platform can settle or refund. A Funding Protocol is selected
by specifying the {%link page="guides/funding-types" title="Funding Type" /%}
when creating a {% link page="guides/creating-a-funding-channel" title="Funding Channel" /%}.



## Protocol Variants

Four different variants classify immersve card funding protocols: deposit-based,
approval-based, custodial, and mock.


### Approval Based Funding

Approval-based protocols can spend tokens directly from a cardholder's existing
wallet. The {% link page="guides/universal-evm-funding-protocol" /%} supports
approval-based funding on some EVM chains.


### Deposit Based Funding

Deposit-based funding requires cardholders to transfer assets into an Immersve
smart contract. Deposits can be withdrawn at any time. Deposit-based funding is
further classified into two sub-variants based on where tokens are deposited:
universal and flexi.


___Universal___ — The universal variant pools tokens into a single
partner-scoped contract and is optimized for gas usage so it can operate on any
blockchain.

___Flexi___ — The flexi variant holds deposits in a smart contract per
cardholder. The cardholder balance can be inspected on-chain, and permissionless
withdrawals are supported. A cardholder contract will need to be deployed as
part of cardholder onboarding.

### Custodial Funding

Custodial protocols enable the integrating partner to perform off-chain payment
authorizations in real-time. Custodial funding leverages one of the on-chain
deposit-based funding protocols for settlement. See {% link
page="guides/custodial-funding-protocol" /%}.


### Mock Funding

Mock funding enables the creation of test cards without building any funding
integration. This is useful for testing card-issuing user experiences when your
funding solution is not fully implemented. See {% link
page="guides/simulator-funding-protocol" /%}.


## Available Chains

{% supportedChainsTable columns=[
  "chain",
  "depositVariant",
  "depositBasedFunding",
  "approvalBasedFunding",
  "custodialBilling",
] /%}

## Available Protocols

{% fundingProtocolsTable columns=["name", "description"]/%}
