---
title: Custodial Funding Protocol
description: Overview of Immersve's Custodial Funding Protocol.
slug: guides/custodial-funding-protocol
fundingProtocol:
  source: ""
---

The Immersve Custodial {% link page="guides/funding-protocols"
title="funding protocol" /%} allows client applications to authorize
Immersve card payments in real-time using their own ledger.


## Protocol Mechanics

### On-Chain Pooled Float

The custodian deposits a "float" into an Immersve smart contract in order to
cover the anticipated cardholder payments. The available balance of the float is
adjusted in real-time according to cardholder payments. When the available
balance drops to zero then all cardholder payments will be declined. Settlements
are handled automatically by Immersve by drawing on the float.


### Webhook Payment Messages

Card payment authorization requests and other payment lifecycle events are
actioned by delegating to the custodian's webhook endpoints.



## Partner Setup


A Funding Channel must be created using the {% link
endpoint="create-a-funding-channel" /%} endpoint. The funding channel
should have a funding type of `custodial-usdc`.


### Cardholder Setup

A funding source must be created for each Cardholder using the {% link
endpoint="create-funding-source" /%} endpoint. An externalId
field must be supplied which can be correlated to a user's custodial ledger
account. The externalId field will be supplied with every webhook notification
for payments relating to the funding source.


## Webhooks

### Authentication

Webhooks are authenticated by an RSA signature. The signature is made against
the contatenation of the request headers and body like
`{deliveryId}:{keyId}:{body}`. The signature is provided in the
<nobr>`X-Signature`</nobr> header. The public key for validating the signature
can be obtained from the JWKS endpoint at
https://api.immersve.com/.well-known/jwks.json.

### Headers

| Header | Description |
|-|-|
| <nobr>X-Delivery-Id</nobr> | Unique identifier for the message delivery attempt. |
| <nobr>X-Key-Id</nobr>      | The id of the signing key used to generate the signature. The key can be obtained from https://api.immersve.com/.well-known/jwks.json and matched by the "kid" attribute. |
| <nobr>X-Signature</nobr>   | The RSA SHA256 signature of the request. |


### Idempotency

Notification messages are guaranteed to be delivered. When message delivery
fails, delivery will be retried at an exponentially increasing interval.
Authorization messages are not retried; if an authorization message fails a
cancel message will be sent instead.


### Authorize Payment Webhook

{% table %}
---
* Description
* A real-time instruction to authorize a payment.
---
* Method
* POST
---
* URL
* {base_url}/authorize
---
{% /table %}

The authorization webhook is called when a merchant requests payment from the
card.

The authorization request is expected to respond within 1000 milliseconds.
Unresponsive authoriation requests will be canceled.

#### Response Format

The authorize response must contain a JSON object with the following fields.


| Field | Example | Description |
|-|-|-|
| result     | authorized    | The authorization request was `authorized` or `declined`. |



### Payment Notification Webhook

{% table %}
---
* Description
* A notification that a payment status has been updated.
---
* Method
* POST
---
* URL
* {base_url}/notify
---
{% /table %}

A balance adjustment instruction will be sent in several scenarios:
when a payment is cleared for an amount greater or less than the authorized
amount; when a payment is reversed or expired; or when a refund has been issued.

The integrated client must accept the balance adjustment and increment or
decrement the funding source balance accordingly.

Immersve will send a cancel payment instruction incase an error has occured
while handling an authorization request.


### Request Body Format

All custodial webhook endpoints share the same message body format. The request
content type is application/json. Client consumers of the message format
must tolerate the addition of unknown message attributes.

{% table %}
* Field
* Example
* Description

---
* {% wrap %} messageId {% /wrap %}
* {% wrap 9 %}bb32f1106c8d4c45{% /wrap %}
* Identifier which uniquely identifies the message. Payment messages are
  guaranteed to be delivered and must be handled idempotently. This identifier
  can be used to detect duplicate message delivery attempts.

---
* {% wrap %} messageType {% /wrap %}
* payment-advice
* The type of message: `auth-request`, `auth-confirm`, `auth-cancel`, or
  `payment-advice`. See Message Types below for more details about message semantics.


---
* {% wrap %} eventType {% /wrap %}
* clearing-accepted
* The payment lifecycle event which triggered the message. This may be useful to
  discriminate the reason for an auth cancellation message. Clients must
  tolerate unknown event types.

---
* {% wrap %} eventTimestamp {% /wrap %}
* {% wrap "T" %}2022-04-01T10:00:00.000Z{% /wrap %}
* The timestamp for the event that triggered the message.

---
* {% wrap %} eventDescription {% /wrap %}
* Payment Canceled
* A description of the payment event which may include additional details that
  can be useful for debugging.

---
* {% wrap %} paymentId {% /wrap %}
* {% wrap 9 %}38fb58acc55b4907{% /wrap %}
* Immersve payment transaction identifier. This attribute should be used to find
  the existing payment resource to update accordingly based on the message type.

---
* {% wrap %} paymentFinalized {% /wrap %}
* true
* Flag indicating if the payment is expected to have further updates.
  Messages of type "auth-request" will always be non-finalized. Payments are
  eventually finalized after being cleared, expired or cancelled. Payments may
  be updated after being finalized if, for example, the payment is reversed.


---
* {% wrap %} paymentAmount {% /wrap %}
* 1312
* Total payment amount that the cardholder will be debited in minor units. The
  payment amount may increase or decrease when cleared or reversed. A refund
  payment will have a negative amount.

---
* {% wrap %} paymentCurrency {% /wrap %}
* USD
* Required payment currency.

---
* {% wrap %} paymentAcquirerAmount {% /wrap %}
* 978
* Payment amount represented in the merchant's local currency.

---
* {% wrap %} paymentAcquirerCurrency {% /wrap %}
* GBP
* The merchant's local currency.

---
* {% wrap %} paymentFeeAmount {% /wrap %}
* 32
* Immersve's payment fee amount in minor units. The fee currency is
  the same as the payment currency.

---
* {% wrap %} fundingSourceExternalId {% /wrap %}
* abc123
* The custodial account external reference stored on the Immersve funding
  source. This attribute is used to resolve the custodial ledger account
  to be debited.

---
* fundingSourceId
* {% wrap 9 %}c65fe4d184a24619{% /wrap %}
* Immersve funding source identifier.

---
* {% wrap %} cardholderId {% /wrap %}
* {% wrap 9 %}d44d045826d4484c{% /wrap %}
* Immersve cardholder account id.

---
* {% wrap %} cardId {% /wrap %}
* {% wrap 9 %}9ae177ea85ed4128{% /wrap %}
* Immersve card identifier.

---
* {% wrap %} merchantId {% /wrap %}
* {% wrap 9 %}92102062388908{% /wrap %}
* The merchant identifier from the payment network.

---
* {% wrap %} merchantName {% /wrap %}
* Unsworth Height Super
* The merchant's name.

---
* {% wrap %} merchantCountryCode {% /wrap %}
* NZL
* The merchant's ISO-3166 Alpha-3 country code.

---
* {% wrap %} merchantCity {% /wrap %}
* Auckland
* The merchant's city name.

---
* {% wrap %} merchantTerminalId {% /wrap %}
* 50487001
* The merchant's payment terminal identifier.

---
* {% wrap %} merchantCategoryCode {% /wrap %}
* 5451
* The merchant's ISO-18245 category code.

---
* {% wrap %} networkMessageRef {% /wrap %}
* {% wrap 9 %}01005960960820000000000000{% /wrap %}
* The payment network identifier for the message which triggered the payment
  lifecycle event.

---
{% /table %}


### Message Types

{% table %}
* Name
* Description

---
* <nobr>auth-request</nobr>
* The paymentAmount field indicates the type of payment that is being
  authorized. Note that the amount positive indicates a purchase; negative indicates a refund; zero
  amount indicates an account status enquiry.

---
* <nobr>auth-confirm</nobr>
* Confirmation that a payment has been authorized successfully.

---
* <nobr>auth-cancel</nobr>
* The payment has been canceled. There are
  several scenarios where a payment may be canceled such as: payment declined due
  to card block; payment expired; or payment error such as timeout. Specific
  cancelation details can be discovered in the `eventType` and `eventDescription`
  fields. The paymentAmount

---
* <nobr>payment-advice</nobr>
*

{% /table %}
