{
	"info": {
		"_postman_id": "2810ed7e-1c4f-47cc-82a0-ba4b0882b345",
		"name": "Immersve API Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38514942"
	},
	"item": [
		{
			"name": "Custodial Integration Guide",
			"item": [
				{
					"name": "Custodial Partner Setup",
					"item": [
						{
							"name": "Create funding channel - custodial billing funding source",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Creating billing funding source was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has account id\", function () {",
											"        //verify accountId is returned",
											"        pm.expect(responseJSON).to.have.property(\"accountId\");",
											"    });",
											"",
											"    pm.test(\"Response has funding channel id\", function () {",
											"        //verify the funding source ID is returned, and set it within environment if it was",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"billing_fundingChannelId\", responseJSON.id);",
											"    });",
											"} else {",
											"    console.error(\"Response is not a valid JSON.\");",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_adminApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_adminApiKeySecret}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": \"{{partner_accountId}}\",\n    \"fundingTypeName\": \"{{billing_fundingTypeName}}\",\n    \"purpose\": \"billing\",\n    \"params\": {\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/funding-channels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a funding source - custodial billing account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Creating funding source was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has account id\", function () {",
											"        //verify accountId is returned",
											"        pm.expect(responseJSON).to.have.property(\"accountId\");",
											"    });",
											"",
											"    pm.test(\"Response has funding source id\", function () {",
											"        //verify the funding source ID is returned, and set it within environment if it was",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"billing_fundingSourceId\", responseJSON.id);",
											"    });",
											"} else {",
											"    console.error(\"Response is not a valid JSON.\");",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{partner_accountId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": \"{{partner_accountId}}\",\n    \"fundingChannelId\": \"{{billing_fundingChannelId}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/funding-sources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-sources"
									]
								}
							},
							"response": []
						},
						{
							"name": "List funding channels - custodial billing funding source",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// This api has to be called by account admin api key and api secret for auth",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(pm.request.body);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_adminApiKeyId}}"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_adminApiKeySecret}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId/funding-channels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId",
										"funding-channels"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{partner_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a funding source - custodial billing account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/funding-source/:fundingSourceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-source",
										":fundingSourceId"
									],
									"variable": [
										{
											"key": "fundingSourceId",
											"value": "{{billing_fundingSourceId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create funding channel - custodial card-funding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// This api has to be called by account admin",
											"// Use api key and api secret for auth",
											"",
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Creating funding channel was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has funding channel id\", function () {",
											"        //verify id exists and set it within environment",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"cardfunding_fundingChannelId\", responseJSON.id);",
											"    });",
											"",
											"    pm.test (\"Response has a created at datetime stamp\", function () {",
											"        //verify that the created at datetimestamp exists",
											"        pm.expect(responseJSON).to.have.property(\"createdAt\");",
											"    });",
											"",
											"    pm.test (\"Response has a smart contract storage address\", function () {",
											"        //verify that the smart contract storage address exists",
											"        pm.expect(responseJSON).to.have.property(\"storageAddress\");",
											"        //TODO: should we set this as well?",
											"    });",
											"",
											"    pm.test (\"Response has a funding type name that matches request\", function () {",
											"        //verify that the funding type name exists",
											"        pm.expect(responseJSON).to.have.property(\"fundingTypeName\");",
											"    });",
											"",
											"    pm.test (\"Response has a funding channel name\", function () {",
											"        //verify that a funding channel name exists",
											"        pm.expect(responseJSON).to.have.property(\"name\");",
											"    });",
											"",
											"    pm.test (\"Response has a purpose that matches request\", function () {",
											"        //verify that purpose exists",
											"        pm.expect(responseJSON).to.have.property(\"purpose\");",
											"    });",
											"} else {",
											"    console.error(\"Response is not a valid JSON.\");",
											"}",
											"",
											"//log entire response body for debugging",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(pm.request.body);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKeyAccountAdmin}}"
									},
									{
										"key": "x-api-secret",
										"value": "{{apiSecretAccountAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": \"{{partner_accountId}}\",\n    \"fundingTypeName\": \"{{cardfunding_fundingTypeName}}\",\n    \"purpose\": \"card-funding\",\n    \"params\": {\n        \"billingFundingSourceId\":\"{{billing_fundingSourceId}}\",\n        \"webhookBaseUrl\": \"{{webhookBaseUrl}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/funding-channels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a funding channel - custodial cardholder account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// This api has to be called by account admin for auth",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(pm.request.body);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{auth_adminApiKeyId}}"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_adminApiKeySecret}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/funding-channel/:fundingChannelId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-channel",
										":fundingChannelId"
									],
									"variable": [
										{
											"key": "fundingChannelId",
											"value": "{{cardfunding_fundingChannelId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Per Cardholder Setup",
					"item": [
						{
							"name": "Get supported regions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:partnerAccountId/supported-regions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":partnerAccountId",
										"supported-regions"
									],
									"variable": [
										{
											"key": "partnerAccountId",
											"value": "{{partner_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custodial cardholder account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Creating cardholder account was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has account id\", function () {",
											"        //verify and set account id within environment",
											"        pm.expect(responseJSON).to.have.property(\"accountId\");",
											"        pm.environment.set(\"cardholder_accountID\", responseJSON.id);",
											"    });",
											"} else {",
											"    console.error(\"Response is not a valid JSON.\");",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\":\"cardholder\",\n    \"name\":\"test-{{$randomNoun}}\",\n    \"parentAccountId\": \"{{partner_accountId}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custodial card holder account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(pm.request.body);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a funding source - custodial card-holder account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Creating funding source was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has account id\", function () {",
											"        //verify accountId is returned",
											"        pm.expect(responseJSON).to.have.property(\"accountId\");",
											"    });",
											"",
											"    pm.test(\"Response has funding source id\", function () {",
											"        //verify the funding source ID is returned, and set it within the environment if it was",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"cardholder_fundingSourceId\", responseJSON.id);",
											"    });",
											"} else {",
											"    console.error(\"Response is not a valid JSON.\");",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": \"{{cardholder_accountId}}\",\n    \"fundingChannelId\": \"{{cardfunding_fundingChannelId}}\",\n    \"externalId\": \"{{cardholder_externalId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/funding-sources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-sources"
									]
								}
							},
							"response": []
						},
						{
							"name": "List funding sources - custodial cardholder account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId/funding-sources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId",
										"funding-sources"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get KYC spending prerequisites (immersve-conducted)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(pm.request.body);",
											"",
											"//log entire response body for debugging",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardProgramId\":\"{{cardProgramId}}\",\n  \"fundingSourceId\": \"{{cardholder_fundingSourceId}}\",\n  \"spendableAmount\": \"100\",\n  \"spendableCurrency\": \"USD\",\n  \"kycType\": \"immersve-conducted\",\n  \"kycRegion\": \"NZ\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/spending-prerequisites",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"spending-prerequisites"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get KYC spending prerequisites (partner-conducted)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(pm.request.body);",
											"",
											"//log entire response body for debugging",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardProgramId\":\"{{cardProgramId}}\",\n  \"fundingSourceId\": \"{{cardholder_fundingSourceId}}\",\n  \"spendableAmount\": \"100\",\n  \"spendableCurrency\": \"USD\",\n  \"kycType\": \"partner-conducted\",\n  \"kycRegion\": \"NZ\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/spending-prerequisites",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"spending-prerequisites"
									]
								}
							},
							"response": []
						},
						{
							"name": "Submit partner KYC Statement",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate(dateToFormat){",
											"    return `${dateToFormat.getFullYear()}-${dateToFormat.getMonth().toString().padStart(2,'0')}-${dateToFormat.getDate().toString().padStart(2,'0')}`",
											"}",
											"",
											"function randomDate(minimumAge = 18){",
											"    const now = Date.now();",
											"    const upperLimit = 1000 * (60 * 60 * 24 * 365) * minimumAge;",
											"    const random = (now - upperLimit) * Math.random();",
											"    return new Date(random);",
											"}",
											"",
											"console.log(\"randomDate:\", randomDate());",
											"console.log(\"formatted_randomDate:\", formatDate(randomDate()));",
											"pm.environment.set('randomFormattedDoB', formatDate(randomDate()));",
											"",
											"function randomNumber(){",
											"    const random = 1 + (Math.random() * 9999);",
											"    return Math.floor(random);",
											"}",
											"",
											"console.log(\"randomNumber:\", randomNumber());",
											"pm.environment.set('randomStreetNumber', randomNumber());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(pm.request.body);",
											"",
											"//log entire response body for debugging",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"idempotencyKey\": \"{{$guid}}\", \n    \"region\": \"NZ\",\n    \"claims\": [\n        {\n            \"claimType\": \"DOB\",\n            \"attributes\": {\n                \"dateOfBirth\": \"{{cardholder_randomFormattedDoB}}\"\n            }\n        },\n        {\n            \"claimType\": \"FULL_NAME\",\n            \"attributes\": {\n                \"honorific\": \"Mr\",\n                \"givenName\": \"{{$randomFirstName}}_{{$guid}}\",\n                \"middleName\": \"passall\",\n                \"familyName\": \"{{$randomLastName}}_{{$guid}}\"\n            }\n        },\n        {   \n            \"claimType\": \"ADDRESS\",\n            \"attributes\": {\n                \"addressType\": \"RESIDENTIAL\",\n                \"streetNumber\": \"{{cardholder_randomStreetNumber}}\",\n                \"streetName\": \"{{$randomStreetName}}\",\n                \"streetType\": \"ROAD\",\n                \"state\": \"AUK\",\n                \"country\": \"NZ\"\n            }\n        }\n    ],\n    \"evidence\": [\n        {\n            \"evidenceType\": \"PASSPORT\",\n            \"documentId\": \"{{$randomAlphaNumeric}}{{$guid}}\",\n            \"country\": \"NZ\",\n            \"expiry\": \"2030-01-01\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:cardholderAccountId/partner-kyc-statement",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":cardholderAccountId",
										"partner-kyc-statement"
									],
									"variable": [
										{
											"key": "cardholderAccountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update expected spend amount",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(pm.request.body);",
											"",
											"//log entire response body for debugging",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"expectedSpendAmount\": \"{{cardholder_expectedSpendAmount}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:cardholderAccountId/expected-spend-amount",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":cardholderAccountId",
										"expected-spend-amount"
									],
									"variable": [
										{
											"key": "cardholderAccountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update contact details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": {\n    \"emailAddress\": \"{{cardholder_emailAddress}}\"\n  },\n  \"phone\": {\n    \"phoneNumber\": \"{{cardholder_phoneNumber}}\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId/contact-details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId",
										"contact-details"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get contact details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId/contact-details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId",
										"contact-details"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Card created successfully\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has card id\", function () {",
											"        //verify card id is returned, and set it if it was",
											"        pm.expect(responseJSON).to.have.property(\"cardId\");",
											"        pm.environment.set(\"cardId\", responseJSON.cardId);       ",
											"    });",
											"} else {",
											"    console.error(\"Response is not a valid JSON.\");",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cardProgramId\":\"{{cardProgramId}}\",\n    \"fundingSourceId\": \"{{cardholder_fundingSourceId}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/cards",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"cards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a card - get card details merged",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Card created successfully\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has card id\", function () {",
											"        //verify card id is returned, and set it if it was",
											"        pm.expect(responseJSON).to.have.property(\"cardId\");",
											"        pm.environment.set(\"cardId\", responseJSON.cardId);       ",
											"    });",
											"} else {",
											"    console.error(\"Response is not a valid JSON.\");",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());",
											"",
											"// prep request options to get card details",
											"var cardDetailsRequestOptions = {",
											"    url: pm.environment.get('baseUrl') + \"/api/cards/\" + pm.environment.get('cardId'),",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'x-api-key' : pm.environment.get('auth_issuerApiKeyId'),",
											"        'x-api-secret' : pm.environment.get('auth_issuerApiKeySecret'),",
											"        'x-account-id' : pm.environment.get('cardholder_accountId'),",
											"    }",
											"};",
											"",
											"//send the secure card details request using pm.sendRequest",
											"pm.sendRequest(cardDetailsRequestOptions, function (err, res) {",
											"    if (err) {",
											"        console.error('Error in retrieving card details:', err);",
											"    } else {",
											"        pm.test(\"Card details retrieved successfully\", function () {",
											"            pm.expect(res.code).to.eql(200);",
											"        });",
											"",
											"        //log entire request body for debugging",
											"        console.log(\"Request Body:\", pm.request.body);",
											"",
											"        //log entire response body for debugging",
											"        console.log(\"Response Body:\", res.text());",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cardProgramId\":\"{{cardProgramId}}\",\n    \"fundingSourceId\": \"{{cardholder_fundingSourceId}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/cards",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"cards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get card details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/cards/:cardId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"cards",
										":cardId"
									],
									"variable": [
										{
											"key": "cardId",
											"value": "{{cardId}}",
											"description": "card id returned by \"create card\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a card token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Card token retrieved successfully\", function () {",
											"        pm.expect(pm.response.code).to.eql(201);",
											"    });",
											"    pm.environment.set(\"cardSecureTokenId\", responseJSON.tokenId);",
											"    pm.environment.set(\"cardSecureCallbackUrl\", responseJSON.callbackUrl);",
											"} else {",
											"    console.error(\"Response is not a valid JSON.\");",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/cards/:cardId/pan-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"cards",
										":cardId",
										"pan-token"
									],
									"variable": [
										{
											"key": "cardId",
											"value": "{{cardId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a card token - get secure card details merged",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Card token retreived successfully\", function () {",
											"        pm.expect(pm.response.code).to.eql(201);",
											"    });",
											"    ",
											"    pm.environment.set(\"cardSecureTokenId\", responseJSON.tokenId);",
											"    pm.environment.set(\"cardSecureCallbackUrl\", responseJSON.callbackUrl);",
											"} else {",
											"    console.error(\"Response is not a valid JSON.\");",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());",
											"",
											"// prep request options to get secure card details",
											"var secureCardDetailsRequestOptions = {",
											"    url: pm.environment.get('cardSecureCallbackUrl'),",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json'",
											"    }",
											"};",
											"",
											"//send the secure card details request using pm.sendRequest",
											"pm.sendRequest(secureCardDetailsRequestOptions, function (err, res) {",
											"    if (err) {",
											"        console.error('Error in retrieving secure card details:', err);",
											"    } else {",
											"        pm.test(\"Secure card details retrieved successfully\", function () {",
											"            pm.expect(res.code).to.eql(200);",
											"        });",
											"",
											"        var responseJSON2 = res.json();",
											"",
											"        pm.environment.set(\"cardPan\", responseJSON2.pan);",
											"        pm.environment.set(\"cardExpiry\", responseJSON2.expiry);",
											"        pm.environment.set(\"cardCVV2\", responseJSON2.cvv2);",
											"        pm.environment.set(\"cardEmbossedName\", responseJSON2.embossedName);",
											"",
											"        //log entire request body for debugging",
											"        console.log(\"Request Body:\", pm.request.body);",
											"",
											"        //log entire response body for debugging",
											"        console.log(\"Response Body:\", res.text());",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/cards/:cardId/pan-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"cards",
										":cardId",
										"pan-token"
									],
									"variable": [
										{
											"key": "cardId",
											"value": "{{cardId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secure card details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Secure card details retrieved successfully\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"    pm.environment.set(\"cardPan\", responseJSON.pan);",
											"    pm.environment.set(\"cardExpiry\", responseJSON.expiry);",
											"    pm.environment.set(\"cardCVV2\", responseJSON.cvv2);",
											"    pm.environment.set(\"cardEmbossedName\", responseJSON.embossedName);",
											"} else {",
											"    console.error(\"Response is not a valid JSON.\");",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cardSecureCallbackUrl}}",
									"host": [
										"{{cardSecureCallbackUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Perform A Test Card Payment",
					"item": [
						{
							"name": "Authorize a transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Authorisation was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has a authorization request message\", function () {",
											"        //verify and set authorizationRequestMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"authorizationRequestMsg\");",
											"        pm.environment.set(\"authorizationRequestMsg\", responseJSON.requestMsg);",
											"    });",
											"",
											"    pm.test(\"Response has a authorization response message\", function () {",
											"        //verify and set authorizationResponseMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"authorizationResponseMsg\");",
											"        pm.environment.set(\"authorizationResponseMsg\", responseJSON.responseMsg);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactionType\": \"purchase\",\n  \"transactionAmount\": \"200\",\n  \"cardPan\": \"{{cardPan}}\",\n  \"cardExpiry\": \"{{cardExpiry}}\",\n  \"cardCvv\": \"{{cardCVV2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/simulator/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"simulator",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "List funding source interactions  - custodial cardholder account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{auth_adminApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_adminApiKeySecret}}",
										"type": "text"
									},
									{
										"key": "x-account-id",
										"value": "{{cardholder_accountId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/funding-sources/:fundingSourceId/interactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-sources",
										":fundingSourceId",
										"interactions"
									],
									"variable": [
										{
											"key": "fundingSourceId",
											"value": "{{cardholder_fundingSourceId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "API Endpoints",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Create Challenge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{auth_issuerApiKeyId}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{auth_issuerApiKeySecret}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"purpose\": \"claim-web3-address\",\n  \"network\": \"polygon-amoy\",\n  \"address\": \"{{cardholder_siweWalletAddress}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/challenges",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "1. SIWE Signup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    //verify and set partner's login request id",
											"    pm.test(\"Response includes partner login id\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"partner_loginRequestId\", responseJSON.id);",
											"    });",
											"",
											"    //verify and set partner's signing challenge",
											"    pm.test(\"Response includes partner signing challenge\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"signingChallenge\");",
											"        pm.environment.set(\"partner_signingChallenge\", responseJSON.signingChallenge.message);",
											"    });",
											"",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"loginMethod\":\"siwe\",\n  \"network\":\"polygon-amoy\",\n  \"clientApplicationId\":\"{{partner_clientApplicationId}}\",\n  \"scopes\":[\"cardholder-partner\"],\n  \"address\": \"{{cardholder_siweWalletAddress}}\",\n  \"url\": \"{{partner_clientApplicationOrigin}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. SIWE Initiate login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    //verify and set partner's login request id",
											"    pm.test(\"Response includes partner login id\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"partner_loginRequestId\", responseJSON.id);",
											"    });",
											"",
											"    //verify and set partner's signing challenge",
											"    pm.test(\"Response includes partner signing challenge\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"signingChallenge\");",
											"        pm.environment.set(\"partner_signingChallenge\", responseJSON.signingChallenge.message);",
											"    });",
											"",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"loginMethod\":\"siwe\",\n  \"network\":\"polygon-amoy\",\n  \"clientApplicationId\":\"{{partner_clientApplicationId}}\",\n  \"scopes\":[\"cardholder-partner\"],\n  \"address\": \"{{cardholder_siweWalletAddress}}\",\n  \"url\": \"{{partner_clientApplicationOrigin}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login-init",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login-init"
									]
								}
							},
							"response": []
						},
						{
							"name": "1. Algorand Signup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    //verify and set partner's login request id",
											"    pm.test(\"Response includes partner login id\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"partner_loginRequestId\", responseJSON.id);",
											"    });",
											"",
											"    //verify and set partner's signing challenge",
											"    pm.test(\"Response includes partner signing challenge\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"signingChallenge\");",
											"        pm.environment.set(\"partner_signingChallenge\", responseJSON.signingChallenge.message);",
											"    });",
											"",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"loginMethod\":\"algorand\",\n  \"network\":\"algorand-testnet\",\n  \"clientApplicationId\":\"{{partner_clientApplicationId}}\",\n  \"scopes\":[\"cardholder-partner\"],\n  \"address\": \"{{cardholder_algorandWalletAddress}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Algorand Initiate login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    //verify and set partner's login request id",
											"    pm.test(\"Response includes partner login id\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"partner_loginRequestId\", responseJSON.id);",
											"    });",
											"",
											"    //verify and set partner's signing challenge",
											"    pm.test(\"Response includes partner signing challenge\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"signingChallenge\");",
											"        pm.environment.set(\"partner_signingChallenge\", responseJSON.signingChallenge.message);",
											"    });",
											"",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"loginMethod\":\"algorand\",\n  \"network\":\"algorand-testnet\",\n  \"clientApplicationId\":\"{{partner_clientApplicationId}}\",\n  \"scopes\":[\"cardholder-partner\"],\n  \"address\": \"{{cardholder_algorandWalletAddress}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login-init",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login-init"
									]
								}
							},
							"response": []
						},
						{
							"name": "1. XRPL Signup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    //verify and set partner's login request id",
											"    pm.test(\"Response includes partner login id\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"partner_loginRequestId\", responseJSON.id);",
											"    });",
											"",
											"    //verify and set partner's signing challenge",
											"    pm.test(\"Response includes partner signing challenge\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"signingChallenge\");",
											"        pm.environment.set(\"partner_signingChallenge\", responseJSON.signingChallenge.message);",
											"    });",
											"",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"loginMethod\":\"xrpl\",\n  \"network\":\"xahau-testnet\",\n  \"clientApplicationId\":\"{{partner_clientApplicationId}}\",\n  \"scopes\":[\"cardholder-partner\"],\n  \"publicKey\": \"{{cardholder_xrplWalletPublicKey}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. XRPL Initiate login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    //verify and set partner's login request id",
											"    pm.test(\"Response includes partner login id\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"partner_loginRequestId\", responseJSON.id);",
											"    });",
											"",
											"    //verify and set partner's signing challenge",
											"    pm.test(\"Response includes partner signing challenge\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"signingChallenge\");",
											"        pm.environment.set(\"partner_signingChallenge\", responseJSON.signingChallenge.message);",
											"    });",
											"",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"loginMethod\":\"xrpl\",\n  \"network\":\"xahau-testnet\",\n  \"clientApplicationId\":\"{{partner_clientApplicationId}}\",\n  \"scopes\":[\"cardholder-partner\"],\n  \"publicKey\": \"{{cardholder_xrplWalletPublicKey}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login-init",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login-init"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Complete login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    //verify and set access token",
											"    pm.test(\"Response includes access token\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"accessToken\");",
											"        pm.environment.set(\"auth_accessToken\", responseJSON.accessToken);",
											"    });",
											"",
											"    //verify and set reset token",
											"    pm.test(\"Response includes refresh token\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"refreshToken\");",
											"        pm.environment.set(\"auth_refreshToken\", responseJSON.refreshToken);",
											"    });",
											"",
											"    //verify and set cardholder account id",
											"    pm.test(\"Response includes cardholder account id\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"cardholderAccountId\");",
											"        pm.environment.set(\"cardholder_accountId\", responseJSON.cardholderAccountId);",
											"    });",
											"",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"loginRequestId\":\"{{partner_loginRequestId}}\",\n  \"signature\":\"paste signature here\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login-complete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login-complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exchange auth token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    //verify and set access token",
											"    pm.test(\"Response includes access token\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"accessToken\");",
											"        pm.environment.set(\"auth_accessToken\", responseJSON.accessToken);",
											"    });",
											"",
											"    //verify and set reset token",
											"    pm.test(\"Response includes refresh token\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"refreshToken\");",
											"        pm.environment.set(\"auth_refreshToken\", responseJSON.refreshToken);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "{{partner_clientApplicationOrigin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refreshToken\":\"{{auth_refreshToken}}\",\n    \"clientApplicationId\":\"{{partner_clientApplicationId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//set access and refresh token to undefined",
											"pm.environment.set(\"auth_accessToken\", undefined);",
											"pm.environment.set(\"auth_refreshToken\", undefined);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Accounts",
					"item": [
						{
							"name": "Get an account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an account",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\":\"cardholder\",\n    \"name\":\"test-account: {{$randomFullName}}\",\n    \"partnerAccountId\":\"{{partner_accountId}}\",\n    \"ownerUserId\":\"enter owner user id here\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Funding channels",
					"item": [
						{
							"name": "Create funding channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// This api has to be called by account admin",
											"// Use api key and api secret for auth",
											"",
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    //verify and set access token",
											"    pm.test(\"Response includes card funding funding channel id\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"cardfunding_fundingChannelId\", responseJSON.id);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{cardIssuerApiKey}}",
										"disabled": true
									},
									{
										"key": "x-api-secret",
										"value": "{{cardIssuerApiSecret}}",
										"disabled": true
									},
									{
										"key": "x-api-key",
										"value": "{{accountAdminApiKey}}"
									},
									{
										"key": "x-api-secret",
										"value": "{{accountAdminApiSecret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\":\"{{partner_accountId}}\",\n    \"fundingTypeName\":\"{{cardholder_FundingChannelId}}\",\n    \"params\":{\n        \"storageAddress\":\"{{cardholder_fundsStorageAddress}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/funding-channels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "List funding channels",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-account-id",
										"value": "{{partner_accountId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId/funding-channels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId",
										"funding-channels"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{partner_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a funding channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/funding-channel/:fundingChannelId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-channel",
										":fundingChannelId"
									],
									"variable": [
										{
											"key": "fundingChannelId",
											"value": "{{cardfunding_fundingChannelId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Funding sources",
					"item": [
						{
							"name": "1. Create a funding source for an account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    //verify and set access token",
											"    pm.test(\"Response includes cardholder funding source id\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"cardholder_fundingSourceId\", responseJSON.id);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\":\"{{cardholder_accountId}}\",\n    \"fundingAddress\":\"{{cardholder_siweWalletAddress}}\",\n    \"fundingChannelId\":\"{{cardfunding_fundingChannelId}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/funding-sources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-sources"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. List funding sources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId/funding-sources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId",
										"funding-sources"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get a funding source",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/funding-source/:fundingSourceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-source",
										":fundingSourceId"
									],
									"variable": [
										{
											"key": "fundingSourceId",
											"value": "{{cardholder_fundingSourceId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Create withdrawal intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": 0\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/funding-sources/:fundingSourceId/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-sources",
										":fundingSourceId",
										"withdraw"
									],
									"variable": [
										{
											"key": "fundingSourceId",
											"value": "{{cardholder_fundingSourceId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. List funding source interactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/funding-sources/:fundingSourceId/interactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"funding-sources",
										":fundingSourceId",
										"interactions"
									],
									"variable": [
										{
											"key": "fundingSourceId",
											"value": "{{cardholder_fundingSourceId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Prerequisites",
					"item": [
						{
							"name": "Get spending prerequisites (immersve-conducted)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardProgramId\":\"{{partner_cardProgramId}}\",\n  \"fundingSourceId\": \"{{cardholder_fundingSourceId}}\",\n  \"spendableAmount\": \"100\",\n  \"spendableCurrency\": \"USD\",\n  \"kycType\": \"immersve-conducted\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/spending-prerequisites",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"spending-prerequisites"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get spending prerequisites (partner-conducted)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardProgramId\":\"{{partner_cardProgramId}}\",\n  \"fundingSourceId\": \"{{cardholder_fundingSourceId\",\n  \"spendableAmount\": \"100\",\n  \"spendableCurrency\": \"USD\",\n  \"kycType\": \"partner-conducted\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/spending-prerequisites",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"spending-prerequisites"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "KYC",
					"item": [
						{
							"name": "Get KYC profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId/kyc-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId",
										"kyc-profile"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submit KYC Statement",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate(dateToFormat){",
											"    return `${dateToFormat.getFullYear()}-${dateToFormat.getMonth().toString().padStart(2,'0')}-${dateToFormat.getDate().toString().padStart(2,'0')}`",
											"}",
											"",
											"function randomDate(minimumAge = 18){",
											"    const now = Date.now();",
											"    const upperLimit = 1000 * (60 * 60 * 24 * 365) * minimumAge;",
											"    const random = (now - upperLimit) * Math.random();",
											"    return new Date(random);",
											"}",
											"",
											"pm.environment.set('randomFormattedDoB', formatDate(randomDate()));",
											"",
											"function randomNumber(){",
											"    const random = 1 + (Math.random() * 9999);",
											"    return Math.floor(random);",
											"}",
											"",
											"pm.environment.set('randomStreetNumber', randomNumber());",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(pm.request.body);",
											"",
											"//log entire response body for debugging",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"idempotencyKey\": \"{{$guid}}\", \n    \"region\": \"NZ\",\n    \"claims\": [\n        {\n            \"claimType\": \"DOB\",\n            \"attributes\": {\n                \"dateOfBirth\": \"{{cardholder_randomFormattedDoB}}\"\n            }\n        },\n        {\n            \"claimType\": \"FULL_NAME\",\n            \"attributes\": {\n                \"honorific\": \"Mr\",\n                \"givenName\": \"{{$randomFirstName}}_{{$guid}}\",\n                \"middleName\": \"passall\",\n                \"familyName\": \"{{$randomLastName}}_{{$guid}}\"\n            }\n        },\n        {   \n            \"claimType\": \"ADDRESS\",\n            \"attributes\": {\n                \"addressType\": \"RESIDENTIAL\",\n                \"streetNumber\": \"{{randomStreetNumber}}\",\n                \"streetName\": \"{{$randomStreetName}}\",\n                \"streetType\": \"ROAD\",\n                \"state\": \"NSW\",\n                \"country\": \"AU\"\n            }\n        }\n    ],\n    \"evidence\": [\n        {\n            \"evidenceType\": \"PASSPORT\",\n            \"documentId\": \"{{$randomAlphaNumeric}}{{$guid}}\",\n            \"country\": \"AU\",\n            \"expiry\": \"2030-01-01\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:cardholderAccountId/partner-kyc-statement",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":cardholderAccountId",
										"partner-kyc-statement"
									],
									"variable": [
										{
											"key": "cardholderAccountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cards",
					"item": [
						{
							"name": "Create a card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    //verify and set card id",
											"    pm.test(\"Response includes card id\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"id\");",
											"        pm.environment.set(\"cardId\", responseJSON.id);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(pm.request.body);",
											"",
											"//log entire response body for debugging",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cardProgramId\":\"{{partner_cardProgramId}}\",\n    \"fundingSourceId\": \"{{cardholder_fundingSourceId}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/cards",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"cards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get card details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(pm.request.body);",
											"",
											"//log entire response body for debugging",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/cards/:cardId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"cards",
										":cardId"
									],
									"variable": [
										{
											"key": "cardId",
											"value": "{{cardId}}",
											"description": "card id returned by \"create card\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List cards",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(pm.request.body);",
											"",
											"//log entire response body for debugging",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId/cards",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId",
										"cards"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set card PIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(pm.request.body);",
											"",
											"//log entire response body for debugging",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"newPin\":\"7913\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlSecure}}/api/cards/:cardId/set-pin",
									"host": [
										"{{baseUrlSecure}}"
									],
									"path": [
										"api",
										"cards",
										":cardId",
										"set-pin"
									],
									"variable": [
										{
											"key": "cardId",
											"value": "{{cardId}}",
											"description": "id of the card the PIN to be set for"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a card token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    //verify and set secure card details",
											"    pm.test(\"Response includes secure token id\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"tokenId\");",
											"        pm.environment.set(\"cardSecureTokenId\", responseJSON.tokenId);",
											"    });",
											"    pm.test(\"Response includes secure callback URL\", function () {",
											"        pm.expect(responseJSON).to.have.property(\"callbackUrl\");",
											"        pm.environment.set(\"cardSecureCallbackUrl\", responseJSON.callbackUrl);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/cards/:cardId/pan-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"cards",
										":cardId",
										"pan-token"
									],
									"variable": [
										{
											"key": "cardId",
											"value": "{{cardId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/cards/:cardId/cancel-async",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"cards",
										":cardId",
										"cancel-async"
									],
									"variable": [
										{
											"key": "cardId",
											"value": "{{cardId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secure card details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Secure card details retrieved successfully\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"    pm.environment.set(\"cardPan\", responseJSON.pan);",
											"    pm.environment.set(\"cardExpiry\", responseJSON.expiry);",
											"    pm.environment.set(\"cardCVV2\", responseJSON.cvv2);",
											"    pm.environment.set(\"cardEmbossedName\", responseJSON.embossedName);",
											"} else {",
											"    console.error(\"Response is not a valid JSON.\");",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cardSecureCallbackUrl}}",
									"host": [
										"{{cardSecureCallbackUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Currency",
					"item": [
						{
							"name": "List currencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/currencies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"currencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Currency conversion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/currency/convert?currency=NZD&amount=100&targetCurrency=USD",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"currency",
										"convert"
									],
									"query": [
										{
											"key": "currency",
											"value": "NZD"
										},
										{
											"key": "amount",
											"value": "100"
										},
										{
											"key": "targetCurrency",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contact details",
					"item": [
						{
							"name": "Get contact details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId/contact-details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId",
										"contact-details"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update contact details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": {\n    \"emailAddress\":{{cardholder_emailAddress}}\n  },\n  \"phone\": {\n    \"phoneNumber\":{{cardholder_phoneNumber}}\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId/contact-details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId",
										"contact-details"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "List transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/accounts/:accountId/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"accounts",
										":accountId",
										"transactions"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "{{cardholder_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/transactions/:transactionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"transactions",
										":transactionId"
									],
									"variable": [
										{
											"key": "transactionId",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Simulator",
					"item": [
						{
							"name": "Authorize a transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Auth was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has an auth request message\", function () {",
											"        //verify and set authorizationRequestMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"requestMsg\");",
											"        pm.environment.set(\"authorizationRequestMsg\", responseJSON.requestMsg);",
											"    });",
											"",
											"    pm.test(\"Response has an auth response message\", function () {",
											"        //verify and set authorizationResponseMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"responseMsg\");",
											"        pm.environment.set(\"authorizationResponseMsg\", responseJSON.responseMsg);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactionType\": \"purchase\",\n  \"transactionAmount\": \"1\",\n  \"cardPan\": \"{{cardPan}}\",\n  \"cardExpiry\": \"{{cardExpiry}}\",\n  \"cardCvv\": \"{{cardCVV2}}\",\n  \"fxAmount\": {\n    \"amount\": \"1\",\n    \"currencyCode\": \"NZD\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/simulator/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"simulator",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reverse an authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Auth reversal was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has an auth request message\", function () {",
											"        //verify and set authorizationRequestMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"requestMsg\");",
											"        pm.environment.set(\"authorizationRequestMsg\", responseJSON.requestMsg);",
											"    });",
											"",
											"    pm.test(\"Response has an auth response message\", function () {",
											"        //verify and set authorizationResponseMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"responseMsg\");",
											"        pm.environment.set(\"authorizationResponseMsg\", responseJSON.responseMsg);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactionType\": \"purchase\",\n  \"reversalAmount\": \"1\",\n  \"fxReversalAmount\": {\n    \"amount\": \"1\",\n    \"currencyCode\": \"NZD\"\n  },\n  \"authorizationRequestMsg\": {{authorizationRequestMsg}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/simulator/reverse",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"simulator",
										"reverse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear a transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Clearing was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has a authorization request message\", function () {",
											"        //verify and set clearingRequestMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"requestMsg\");",
											"        pm.environment.set(\"clearingRequestMsg\", responseJSON.requestMsg);",
											"    });",
											"",
											"    pm.test(\"Response has a authorization response message\", function () {",
											"        //verify and set clearingResponseMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"responseMsg\");",
											"        pm.environment.set(\"clearingResponseMsg\", responseJSON.responseMsg);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authorizationRequestMsg\": {{authorizationRequestMsg}},\n  \"authorizationResponseMsg\": {{authorizationResponseMsg}},\n  \"transactionType\": \"purchase\",\n  \"transactionAmount\": \"1\",\n  \"cardPan\": \"{{cardPan}}\",\n  \"cardExpiry\": \"{{cardExpiry}}\",\n  \"cardCvv\": \"{{cardCVV2}}\",\n  \"fxAmount\": {\n    \"amount\": \"1\",\n    \"currencyCode\": \"NZD\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/simulator/clear",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"simulator",
										"clear"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reverse a clearing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Clearing reversal was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has a authorization request message\", function () {",
											"        //verify and set authorizationRequestMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"requestMsg\");",
											"        pm.environment.set(\"clearingRequestMsg\", responseJSON.requestMsg);",
											"    });",
											"",
											"    pm.test(\"Response has a authorization response message\", function () {",
											"        //verify and set authorizationResponseMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"responseMsg\");",
											"        pm.environment.set(\"clearingResponseMsg\", responseJSON.responseMsg);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactionType\": \"purchase\",\n  \"reversalAmount\": \"1\",\n  \"fxReversalAmount\": {\n    \"amount\": \"1\",\n    \"currencyCode\": \"NZD\"\n  },\n  \"clearingRequestMsg\": {{clearingRequestMsg}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/simulator/reverse",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"simulator",
										"reverse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authorize a transaction - Incremental Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Incremental auth was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has an auth request message\", function () {",
											"        //verify and set authorizationRequestMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"requestMsg\");",
											"        pm.environment.set(\"authorizationRequestMsg\", responseJSON.requestMsg);",
											"    });",
											"",
											"    pm.test(\"Response has an auth response message\", function () {",
											"        //verify and set authorizationResponseMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"responseMsg\");",
											"        pm.environment.set(\"authorizationResponseMsg\", responseJSON.responseMsg);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactionType\": \"purchase\",\n  \"transactionAmount\": \"1000\",\n  \"cardPan\": \"{{cardPan}}\",\n  \"cardExpiry\": \"{{cardExpiry}}\",\n  \"cardCvv\": \"{{cardCVV2}}\",\n  \"authorizationRequestMsg\": {{authorizationRequestMsg}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/simulator/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"simulator",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authorize a transaction - Forced Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Forced auth was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has an auth request message\", function () {",
											"        //verify and set authorizationRequestMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"requestMsg\");",
											"        pm.environment.set(\"authorizationRequestMsg\", responseJSON.requestMsg);",
											"    });",
											"",
											"    pm.test(\"Response has an auth response message\", function () {",
											"        //verify and set authorizationResponseMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"responseMsg\");",
											"        pm.environment.set(\"authorizationResponseMsg\", responseJSON.responseMsg);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactionType\": \"purchase\",\n  \"transactionAmount\": \"100\",\n  \"cardPan\": \"{{cardPan}}\",\n  \"cardExpiry\": \"{{cardExpiry}}\",\n  \"cardCvv\": \"{{cardCVV2}}\",\n  \"forcePost\": \"true\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/simulator/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"simulator",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authorize a transaction - Incremental Forced Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Incremental forced was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has an auth request message\", function () {",
											"        //verify and set authorizationRequestMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"requestMsg\");",
											"        pm.environment.set(\"authorizationRequestMsg\", responseJSON.requestMsg);",
											"    });",
											"",
											"    pm.test(\"Response has an auth response message\", function () {",
											"        //verify and set authorizationResponseMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"responseMsg\");",
											"        pm.environment.set(\"authorizationResponseMsg\", responseJSON.responseMsg);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactionType\": \"purchase\",\n  \"transactionAmount\": \"801\",\n  \"cardPan\": \"{{cardPan}}\",\n  \"cardExpiry\": \"{{cardExpiry}}\",\n  \"cardCvv\": \"{{cardCVV2}}\",\n  \"forcePost\": true,\n  \"authorizationRequestMsg\": {{authorizationRequestMsg}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/simulator/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"simulator",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authorize a transaction - Refund",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Refund was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has an auth request message\", function () {",
											"        //verify and set authorizationRequestMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"requestMsg\");",
											"        pm.environment.set(\"authorizationRequestMsg\", responseJSON.requestMsg);",
											"    });",
											"",
											"    pm.test(\"Response has an auth response message\", function () {",
											"        //verify and set authorizationResponseMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"responseMsg\");",
											"        pm.environment.set(\"authorizationResponseMsg\", responseJSON.responseMsg);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactionType\": \"refund\",\n  \"transactionAmount\": \"100\",\n  \"cardPan\": \"{{cardPan}}\",\n  \"cardExpiry\": \"{{cardExpiry}}\",\n  \"cardCvv\": \"{{cardCVV2}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/simulator/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"simulator",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reverse an authorisation - Refund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Refund reversal was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has an auth request message\", function () {",
											"        //verify and set authorizationRequestMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"requestMsg\");",
											"        pm.environment.set(\"authorizationRequestMsg\", responseJSON.requestMsg);",
											"    });",
											"",
											"    pm.test(\"Response has an auth response message\", function () {",
											"        //verify and set authorizationResponseMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"responseMsg\");",
											"        pm.environment.set(\"authorizationResponseMsg\", responseJSON.responseMsg);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactionType\": \"refund\",\n  \"reversalAmount\": \"50\",\n  \"authorizationRequestMsg\": {{authorizationRequestMsg}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/simulator/reverse",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"simulator",
										"reverse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear a transaction - Refund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Refund clearing was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has an auth request message\", function () {",
											"        //verify and set authorizationRequestMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"requestMsg\");",
											"        pm.environment.set(\"clearingRequestMsg\", responseJSON.requestMsg);",
											"    });",
											"",
											"    pm.test(\"Response has an auth response message\", function () {",
											"        //verify and set authorizationResponseMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"responseMsg\");",
											"        pm.environment.set(\"clearingResponseMsg\", responseJSON.responseMsg);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authorizationRequestMsg\": {{authorizationRequestMsg}},\n  \"authorizationResponseMsg\": {{authorizationResponseMsg}},\n  \"transactionType\": \"refund\",\n  \"transactionAmount\": \"1000\",\n  \"cardPan\": \"{{cardPan}}\",\n  \"cardExpiry\": \"{{cardExpiry}}\",\n  \"cardCvv\": \"{{cardCVV2}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/simulator/clear",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"simulator",
										"clear"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reverse a clearing - Refund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"if (responseJSON) {",
											"    pm.test(\"Refund clearing reversal was successful\", function () {",
											"        pm.expect(pm.response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"Response has an auth request message\", function () {",
											"        //verify and set authorizationRequestMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"requestMsg\");",
											"        pm.environment.set(\"clearingRequestMsg\", responseJSON.requestMsg);",
											"    });",
											"",
											"    pm.test(\"Response has an auth response message\", function () {",
											"        //verify and set authorizationResponseMsg within environment",
											"        pm.expect(responseJSON).to.have.property(\"responseMsg\");",
											"        pm.environment.set(\"clearingResponseMsg\", responseJSON.responseMsg);",
											"    });",
											"}",
											"",
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactionType\": \"refund\",\n  \"reversalAmount\": \"1\",\n  \"fxReversalAmount\": {\n    \"amount\": \"1\",\n    \"currencyCode\": \"NZD\"\n  },\n  \"clearingRequestMsg\": {{clearingRequestMsg}}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/simulator/reverse",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"simulator",
										"reverse"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Client application",
					"item": [
						{
							"name": "Get Client Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/client-applications/:clientApplicationId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"client-applications",
										":clientApplicationId"
									],
									"variable": [
										{
											"key": "clientApplicationId",
											"value": "{{partner_clientApplicationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allowed origins",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allowedOrigins\": [\"localhost\", \"http://localhost:3000\", \"http://localhost\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/client-applications/:clientApplicationId/update-origins",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"client-applications",
										":clientApplicationId",
										"update-origins"
									],
									"variable": [
										{
											"key": "clientApplicationId",
											"value": "{{partner_clientApplicationId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Support",
					"item": [
						{
							"name": "Create a support session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//log entire request body for debugging",
											"console.log(\"Request Body:\", pm.request.body);",
											"",
											"//log entire request body for debugging",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"accountId\": \"{{cardholder_accountId}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/support-sessions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"support-sessions"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}