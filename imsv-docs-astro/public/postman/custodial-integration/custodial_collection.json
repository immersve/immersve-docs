{
	"info": {
		"_postman_id": "758a973b-81fd-40b8-ab9f-7a9a1ade19b3",
		"name": "Immersve API : Custodial Integration Guide Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38514942"
	},
	"item": [
		{
			"name": "Custodial Partner Setup",
			"item": [
				{
					"name": "Create funding channel - custodial billing funding source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"if (responseJSON) {",
									"    pm.test(\"Creating billing funding source was successful\", function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    });",
									"",
									"    pm.test(\"Response has account id\", function () {",
									"        //verify accountId is returned",
									"        pm.expect(responseJSON).to.have.property(\"accountId\");",
									"    });",
									"",
									"    pm.test(\"Response has funding channel id\", function () {",
									"        //verify the funding source ID is returned, and set it within environment if it was",
									"        pm.expect(responseJSON).to.have.property(\"id\");",
									"        pm.environment.set(\"billingFundingChannelId\", responseJSON.id);",
									"    });",
									"} else {",
									"    console.error(\"Response is not a valid JSON.\");",
									"}",
									"",
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{accountAdminApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{accountAdminApiSecret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountId\": \"{{partnerAccountId}}\",\n    \"fundingTypeName\": \"{{billingFundingTypeName}}\",\n    \"purpose\": \"billing\",\n    \"params\": {\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/funding-channels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"funding-channels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a funding source - custodial billing account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"if (responseJSON) {",
									"    pm.test(\"Creating funding source was successful\", function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    });",
									"",
									"    pm.test(\"Response has account id\", function () {",
									"        //verify accountId is returned",
									"        pm.expect(responseJSON).to.have.property(\"accountId\");",
									"    });",
									"",
									"    pm.test(\"Response has funding source id\", function () {",
									"        //verify the funding source ID is returned, and set it within environment if it was",
									"        pm.expect(responseJSON).to.have.property(\"id\");",
									"        pm.environment.set(\"billingFundingSourceId\", responseJSON.id);",
									"    });",
									"} else {",
									"    console.error(\"Response is not a valid JSON.\");",
									"}",
									"",
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{partnerAccountId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountId\": \"{{partnerAccountId}}\",\n    \"fundingChannelId\": \"{{billingFundingChannelId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/funding-sources",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"funding-sources"
							]
						}
					},
					"response": []
				},
				{
					"name": "List funding channels - custodial billing funding source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This api has to be called by account admin api key and api secret for auth",
									"",
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(pm.request.body);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{accountAdminApiKey}}"
							},
							{
								"key": "x-api-secret",
								"value": "{{accountAdminApiSecret}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/accounts/:accountId/funding-channels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								":accountId",
								"funding-channels"
							],
							"variable": [
								{
									"key": "accountId",
									"value": "{{partnerAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a funding source - custodial billing account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/funding-source/:fundingSourceId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"funding-source",
								":fundingSourceId"
							],
							"variable": [
								{
									"key": "fundingSourceId",
									"value": "{{billingFundingSourceId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create funding channel - custodial card-funding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This api has to be called by account admin",
									"// Use api key and api secret for auth",
									"",
									"var responseJSON = pm.response.json();",
									"",
									"if (responseJSON) {",
									"    pm.test(\"Creating funding channel was successful\", function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    });",
									"",
									"    pm.test(\"Response has funding channel id\", function () {",
									"        //verify id exists and set it within environment",
									"        pm.expect(responseJSON).to.have.property(\"id\");",
									"        pm.environment.set(\"cardFundingChannelId\", responseJSON.id);",
									"    });",
									"",
									"    pm.test (\"Response has a created at datetime stamp\", function () {",
									"        //verify that the created at datetimestamp exists",
									"        pm.expect(responseJSON).to.have.property(\"createdAt\");",
									"    });",
									"",
									"    pm.test (\"Response has a smart contract storage address\", function () {",
									"        //verify that the smart contract storage address exists",
									"        pm.expect(responseJSON).to.have.property(\"storageAddress\");",
									"        //TODO: should we set this as well?",
									"    });",
									"",
									"    pm.test (\"Response has a funding type name that matches request\", function () {",
									"        //verify that the funding type name exists",
									"        pm.expect(responseJSON).to.have.property(\"fundingTypeName\");",
									"    });",
									"",
									"    pm.test (\"Response has a funding channel name\", function () {",
									"        //verify that a funding channel name exists",
									"        pm.expect(responseJSON).to.have.property(\"name\");",
									"    });",
									"",
									"    pm.test (\"Response has a purpose that matches request\", function () {",
									"        //verify that purpose exists",
									"        pm.expect(responseJSON).to.have.property(\"purpose\");",
									"    });",
									"} else {",
									"    console.error(\"Response is not a valid JSON.\");",
									"}",
									"",
									"//log entire response body for debugging",
									"console.log(pm.response.json());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(pm.request.body);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{accountAdminApiKey}}"
							},
							{
								"key": "x-api-secret",
								"value": "{{accountAdminApiSecret}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountId\": \"{{partnerAccountId}}\",\n    \"fundingTypeName\": \"{{cardfundingTypeName}}\",\n    \"purpose\": \"card-funding\",\n    \"params\": {\n        \"billingFundingSourceId\":\"{{billingFundingSourceId}}\",\n        //\"webhookBaseUrl\": \"{{webhookBaseUrl}}\"\n        \"webhookBaseUrl\": \"https://test.immersve.com/webhooks/custodial-test/d1bc97edfa4f7dc9b56726c7d82a9956/authorize\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/funding-channels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"funding-channels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a funding channel - custodial cardholder account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This api has to be called by account admin for auth",
									"",
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(pm.request.body);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{accountAdminApiKey}}"
							},
							{
								"key": "x-api-secret",
								"value": "{{accountAdminApiSecret}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/funding-channel/:fundingChannelId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"funding-channel",
								":fundingChannelId"
							],
							"variable": [
								{
									"key": "fundingChannelId",
									"value": "{{cardFundingChannelId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Per Cardholder Setup",
			"item": [
				{
					"name": "Get supported regions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/accounts/:partnerAccountId/supported-regions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								":partnerAccountId",
								"supported-regions"
							],
							"variable": [
								{
									"key": "partnerAccountId",
									"value": "{{partnerAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create custodial cardholder account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"if (responseJSON) {",
									"    pm.test(\"Creating cardholder account was successful\", function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    });",
									"",
									"    pm.test(\"Response has account id\", function () {",
									"        //verify and set account id within environment",
									"        pm.expect(responseJSON).to.have.property(\"accountId\");",
									"        pm.environment.set(\"cardholderAccountID\", responseJSON.id);",
									"    });",
									"} else {",
									"    console.error(\"Response is not a valid JSON.\");",
									"}",
									"",
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":\"cardholder\",\n    \"name\":\"test-{{$randomNoun}}\",\n    \"parentAccountId\": \"{{partnerAccountId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/accounts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get custodial card holder account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(pm.request.body);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/accounts/:accountId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								":accountId"
							],
							"variable": [
								{
									"key": "accountId",
									"value": "{{cardholderAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a funding source - custodial card-holder account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"if (responseJSON) {",
									"    pm.test(\"Creating funding source was successful\", function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    });",
									"",
									"    pm.test(\"Response has account id\", function () {",
									"        //verify accountId is returned",
									"        pm.expect(responseJSON).to.have.property(\"accountId\");",
									"    });",
									"",
									"    pm.test(\"Response has funding source id\", function () {",
									"        //verify the funding source ID is returned, and set it within the environment if it was",
									"        pm.expect(responseJSON).to.have.property(\"id\");",
									"        pm.environment.set(\"cardholderFundingSourceId\", responseJSON.id);",
									"    });",
									"} else {",
									"    console.error(\"Response is not a valid JSON.\");",
									"}",
									"",
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountId\": \"{{cardholderAccountId}}\",\n    \"fundingChannelId\": \"{{cardFundingChannelId}}\",\n    \"externalId\": \"{{cardholderExternalId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/funding-sources",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"funding-sources"
							]
						}
					},
					"response": []
				},
				{
					"name": "List funding sources - custodial cardholder account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/accounts/:accountId/funding-sources",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								":accountId",
								"funding-sources"
							],
							"variable": [
								{
									"key": "accountId",
									"value": "{{cardholderAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get KYC spending prerequisites (immersve-conducted)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(pm.request.body);",
									"",
									"//log entire response body for debugging",
									"console.log(pm.response.json());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cardProgramId\":\"{{cardProgramId}}\",\n  \"fundingSourceId\": \"{{cardholderFundingSourceId}}\",\n  \"spendableAmount\": \"100\",\n  \"spendableCurrency\": \"USD\",\n  \"kycType\": \"immersve-conducted\",\n  \"kycRegion\": \"NZ\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/spending-prerequisites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"spending-prerequisites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get KYC spending prerequisites (partner-conducted)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(pm.request.body);",
									"",
									"//log entire response body for debugging",
									"console.log(pm.response.json());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cardProgramId\":\"{{cardProgramId}}\",\n  \"fundingSourceId\": \"{{cardholderFundingSourceId}}\",\n  \"spendableAmount\": \"100\",\n  \"spendableCurrency\": \"USD\",\n  \"kycType\": \"partner-conducted\",\n  \"kycRegion\": \"NZ\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/spending-prerequisites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"spending-prerequisites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit partner KYC Statement",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function formatDate(dateToFormat){",
									"    return `${dateToFormat.getFullYear()}-${dateToFormat.getMonth().toString().padStart(2,'0')}-${dateToFormat.getDate().toString().padStart(2,'0')}`",
									"}",
									"",
									"function randomDate(minimumAge = 18){",
									"    const now = Date.now();",
									"    const upperLimit = 1000 * (60 * 60 * 24 * 365) * minimumAge;",
									"    const random = (now - upperLimit) * Math.random();",
									"    return new Date(random);",
									"}",
									"",
									"console.log(\"randomDate:\", randomDate());",
									"console.log(\"formatted_randomDate:\", formatDate(randomDate()));",
									"pm.environment.set('randomFormattedDoB', formatDate(randomDate()));",
									"",
									"function randomNumber(){",
									"    const random = 1 + (Math.random() * 9999);",
									"    return Math.floor(random);",
									"}",
									"",
									"console.log(\"randomNumber:\", randomNumber());",
									"pm.environment.set('randomStreetNumber', randomNumber());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(pm.request.body);",
									"",
									"//log entire response body for debugging",
									"console.log(pm.response.json());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"idempotencyKey\": \"{{$guid}}\", \n    \"region\": \"NZ\",\n    \"claims\": [\n        {\n            \"claimType\": \"DOB\",\n            \"attributes\": {\n                \"dateOfBirth\": \"{{randomFormattedDoB}}\"\n            }\n        },\n        {\n            \"claimType\": \"FULL_NAME\",\n            \"attributes\": {\n                \"honorific\": \"Mr\",\n                \"givenName\": \"{{$randomFirstName}}_{{$guid}}\",\n                \"middleName\": \"passall\",\n                \"familyName\": \"{{$randomLastName}}_{{$guid}}\"\n            }\n        },\n        {   \n            \"claimType\": \"ADDRESS\",\n            \"attributes\": {\n                \"addressType\": \"RESIDENTIAL\",\n                \"streetNumber\": \"{{randomStreetNumber}}\",\n                \"streetName\": \"{{$randomStreetName}}\",\n                \"streetType\": \"ROAD\",\n                \"state\": \"AUK\",\n                \"country\": \"NZ\"\n            }\n        }\n    ],\n    \"evidence\": [\n        {\n            \"evidenceType\": \"PASSPORT\",\n            \"documentId\": \"{{$randomAlphaNumeric}}{{$guid}}\",\n            \"country\": \"NZ\",\n            \"expiry\": \"2030-01-01\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/accounts/:cardholderAccountId/partner-kyc-statement",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								":cardholderAccountId",
								"partner-kyc-statement"
							],
							"variable": [
								{
									"key": "cardholderAccountId",
									"value": "{{cardholderAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update expected spend amount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(pm.request.body);",
									"",
									"//log entire response body for debugging",
									"console.log(pm.response.json());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"expectedSpendAmount\": \"{{expectedSpendAmount}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/accounts/:cardholderAccountId/expected-spend-amount",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								":cardholderAccountId",
								"expected-spend-amount"
							],
							"variable": [
								{
									"key": "cardholderAccountId",
									"value": "{{cardholderAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update contact details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": {\n    \"emailAddress\": \"{{cardholderEmailAddress}}\"\n  },\n  \"phone\": {\n    \"phoneNumber\": \"{{cardholderPhoneNumber}}\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/accounts/:accountId/contact-details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								":accountId",
								"contact-details"
							],
							"variable": [
								{
									"key": "accountId",
									"value": "{{cardholderAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get contact details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/accounts/:accountId/contact-details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								":accountId",
								"contact-details"
							],
							"variable": [
								{
									"key": "accountId",
									"value": "{{cardholderAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"if (responseJSON) {",
									"    pm.test(\"Card created successfully\", function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    });",
									"",
									"    pm.test(\"Response has card id\", function () {",
									"        //verify card id is returned, and set it if it was",
									"        pm.expect(responseJSON).to.have.property(\"cardId\");",
									"        pm.environment.set(\"createdCardId\", responseJSON.cardId);       ",
									"    });",
									"} else {",
									"    console.error(\"Response is not a valid JSON.\");",
									"}",
									"",
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardProgramId\":\"{{cardProgramId}}\",\n    \"fundingSourceId\": \"{{cardholderFundingSourceId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/cards",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cards"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a card - get card details merged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"if (responseJSON) {",
									"    pm.test(\"Card created successfully\", function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    });",
									"",
									"    pm.test(\"Response has card id\", function () {",
									"        //verify card id is returned, and set it if it was",
									"        pm.expect(responseJSON).to.have.property(\"cardId\");",
									"        pm.environment.set(\"createdCardId\", responseJSON.cardId);       ",
									"    });",
									"} else {",
									"    console.error(\"Response is not a valid JSON.\");",
									"}",
									"",
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());",
									"",
									"// prep request options to get card details",
									"var cardDetailsRequestOptions = {",
									"    url: pm.environment.get('baseUrl') + \"/api/cards/\" + pm.environment.get('createdCardId'),",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'x-api-key' : pm.environment.get('cardIssuerApiKey'),",
									"        'x-api-secret' : pm.environment.get('cardIssuerApiSecret'),",
									"        'x-account-id' : pm.environment.get('cardholderAccountId'),",
									"    }",
									"};",
									"",
									"//send the secure card details request using pm.sendRequest",
									"pm.sendRequest(cardDetailsRequestOptions, function (err, res) {",
									"    if (err) {",
									"        console.error('Error in retrieving card details:', err);",
									"    } else {",
									"        pm.test(\"Card details retrieved successfully\", function () {",
									"            pm.expect(res.code).to.eql(200);",
									"        });",
									"",
									"        //log entire request body for debugging",
									"        console.log(\"Request Body:\", pm.request.body);",
									"",
									"        //log entire response body for debugging",
									"        console.log(\"Response Body:\", res.text());",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardProgramId\":\"{{cardProgramId}}\",\n    \"fundingSourceId\": \"{{cardholderFundingSourceId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/cards",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cards"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get card details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/cards/:cardId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cards",
								":cardId"
							],
							"variable": [
								{
									"key": "cardId",
									"value": "{{createdCardId}}",
									"description": "card id returned by \"create card\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a card token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"if (responseJSON) {",
									"    pm.test(\"Card token retrieved successfully\", function () {",
									"        pm.expect(pm.response.code).to.eql(201);",
									"    });",
									"    pm.environment.set(\"secureCardDetailsTokenId\", responseJSON.tokenId);",
									"    pm.environment.set(\"secureCardDetailsCallbackUrl\", responseJSON.callbackUrl);",
									"} else {",
									"    console.error(\"Response is not a valid JSON.\");",
									"}",
									"",
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/cards/:cardId/pan-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cards",
								":cardId",
								"pan-token"
							],
							"variable": [
								{
									"key": "cardId",
									"value": "{{createdCardId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a card token - get secure card details merged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"if (responseJSON) {",
									"    pm.test(\"Card token retreived successfully\", function () {",
									"        pm.expect(pm.response.code).to.eql(201);",
									"    });",
									"    ",
									"    pm.environment.set(\"secureCardDetailsTokenId\", responseJSON.tokenId);",
									"    pm.environment.set(\"secureCardDetailsCallbackUrl\", responseJSON.callbackUrl);",
									"} else {",
									"    console.error(\"Response is not a valid JSON.\");",
									"}",
									"",
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());",
									"",
									"// prep request options to get secure card details",
									"var secureCardDetailsRequestOptions = {",
									"    url: pm.environment.get('secureCardDetailsCallbackUrl'),",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    }",
									"};",
									"",
									"//send the secure card details request using pm.sendRequest",
									"pm.sendRequest(secureCardDetailsRequestOptions, function (err, res) {",
									"    if (err) {",
									"        console.error('Error in retrieving secure card details:', err);",
									"    } else {",
									"        pm.test(\"Secure card details retrieved successfully\", function () {",
									"            pm.expect(res.code).to.eql(200);",
									"        });",
									"",
									"        var responseJSON2 = res.json();",
									"",
									"        pm.environment.set(\"cardPan\", responseJSON2.pan);",
									"        pm.environment.set(\"cardExpiry\", responseJSON2.expiry);",
									"        pm.environment.set(\"cardCVV2\", responseJSON2.cvv2);",
									"        pm.environment.set(\"cardEmbossedName\", responseJSON2.embossedName);",
									"",
									"        //log entire request body for debugging",
									"        console.log(\"Request Body:\", pm.request.body);",
									"",
									"        //log entire response body for debugging",
									"        console.log(\"Response Body:\", res.text());",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/cards/:cardId/pan-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cards",
								":cardId",
								"pan-token"
							],
							"variable": [
								{
									"key": "cardId",
									"value": "{{createdCardId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get secure card details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"if (responseJSON) {",
									"    pm.test(\"Secure card details retrieved successfully\", function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    });",
									"    pm.environment.set(\"cardPan\", responseJSON.pan);",
									"    pm.environment.set(\"cardExpiry\", responseJSON.expiry);",
									"    pm.environment.set(\"cardCVV2\", responseJSON.cvv2);",
									"    pm.environment.set(\"cardEmbossedName\", responseJSON.embossedName);",
									"} else {",
									"    console.error(\"Response is not a valid JSON.\");",
									"}",
									"",
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{secureCardDetailsCallbackUrl}}",
							"host": [
								"{{secureCardDetailsCallbackUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Perform A Test Card Payment",
			"item": [
				{
					"name": "Authorize a transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"if (responseJSON) {",
									"    pm.test(\"Authorisation was successful\", function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    });",
									"",
									"    pm.test(\"Response has a authorization request message\", function () {",
									"        //verify and set account id within environment",
									"        pm.expect(responseJSON).to.have.property(\"authorizationRequestMsg\");",
									"        pm.environment.set(\"authorizationRequestMsg\", responseJSON.requestMsg);",
									"    });",
									"",
									"    pm.test(\"Response has a authorization request message\", function () {",
									"        //verify and set account id within environment",
									"        pm.expect(responseJSON).to.have.property(\"authorizationResponseMsg\");",
									"        pm.environment.set(\"authorizationResponseMsg\", responseJSON.responseMsg);",
									"    });    ",
									"    ",
									"    pm.environment.set(\"authorizationResponseMsg\", responseJSON.responseMsg);",
									"}",
									"",
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{cardIssuerApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{cardIssuerApiSecret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transactionType\": \"purchase\",\n  \"transactionAmount\": \"200\",\n  \"cardPan\": \"{{cardPan}}\",\n  \"cardExpiry\": \"{{cardExpiry}}\",\n  \"cardCvv\": \"{{cardCVV2}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/simulator/authorize",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"simulator",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "List funding source interactions  - custodial cardholder account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//log entire request body for debugging",
									"console.log(\"Request Body:\", pm.request.body);",
									"",
									"//log entire request body for debugging",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{accountAdminApiKey}}",
								"type": "text"
							},
							{
								"key": "x-api-secret",
								"value": "{{accountAdminApiSecret}}",
								"type": "text"
							},
							{
								"key": "x-account-id",
								"value": "{{cardholderAccountId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/funding-sources/:fundingSourceId/interactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"funding-sources",
								":fundingSourceId",
								"interactions"
							],
							"variable": [
								{
									"key": "fundingSourceId",
									"value": "{{cardholderFundingSourceId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}