"use strict";(self.webpackChunkimmersve_docs=self.webpackChunkimmersve_docs||[]).push([[4762],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=c(n),m=i,h=g["".concat(l,".").concat(m)]||g[m]||u[m]||a;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},67457:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(87462),i=(n(67294),n(3905));const a={sidebar_position:1,tags:["authentication","sign-in","sign-up","login"]},o="Authentication",s={unversionedId:"guides/authentication",id:"guides/authentication",title:"Authentication",description:"API calls can be authenticated by providing a user access token in the \u201cAuthorization\u201d header. Immersve uses EIP-4361 for the sign-in process. The following sections describe the process in detail",source:"@site/docs/guides/authentication.md",sourceDirName:"guides",slug:"/guides/authentication",permalink:"/guides/authentication",draft:!1,tags:[{label:"authentication",permalink:"/tags/authentication"},{label:"sign-in",permalink:"/tags/sign-in"},{label:"sign-up",permalink:"/tags/sign-up"},{label:"login",permalink:"/tags/login"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,tags:["authentication","sign-in","sign-up","login"]},sidebar:"primarySidebar",previous:{title:"Getting Started",permalink:"/"},next:{title:"Card",permalink:"/guides/card"}},l={},c=[{value:"Login Flow",id:"login-flow",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"authentication"},"Authentication"),(0,i.kt)("p",null,"API calls can be authenticated by providing a user access token in the \u201cAuthorization\u201d header. Immersve uses ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-4361"},"EIP-4361")," for the sign-in process. The following sections describe the process in detail"),(0,i.kt)("h3",{id:"login-flow"},"Login Flow"),(0,i.kt)("mermaid",{chart:"sequenceDiagram\n    participant M as Web-3 Wallet\n    participant C as API Client\n    participant I as Immersve\n    C->>+I: Get EIP-4361 challenge\n    I--\x3e>-C: Challenge\n    C->>M: Request to sign an EIP-4361 message\n    M--\x3e>C: Signature\n    C->>+I: Send EIP-4361 message + signature\n    I--\x3e>-C: Return JWT Token\n\t  note over C: JWT Token will be used for the following requests to Immersve API"}),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"../api-reference/generate-challenge"},"Request EIP-4361 challenge"),". The response is a EIP-4361 message to be signed by the wallet in plain text, for example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"app.immersve.com wants you to sign in with your Ethereum account:\n0xA3058369d6A481B1ff08F62B352409c3D709De9b\n\nSign in with Ethereum to the app. This request will not trigger a blockchain transaction or cost any gas fees.\n\nURI: https://app.immersve.com\nVersion: 1\nChain ID: 1\nNonce: 2hFm7TDbZmerUgnrJ\nIssued At: 2022-08-11T22:29:48.244Z\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Invoke the wallet's signing capability to get a signature for the challenge message. This part's implementation is specific to the wallet used, but it is fair to say that this abstract function is available in all wallets.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"../api-reference/login"},"Submit the signed challenge with its signature")," to get the authentication token")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The received token should be used for consequent requests to protected resources in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Authorization")," header"))))}u.isMDXComponent=!0}}]);