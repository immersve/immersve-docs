"use strict";(self.webpackChunkimmersve_docs=self.webpackChunkimmersve_docs||[]).push([[3755],{68302:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>g,contentTitle:()=>u,default:()=>y,frontMatter:()=>l,metadata:()=>p,toc:()=>f});var n=t(87462),s=(t(67294),t(3905)),i=(t(8209),t(26389)),r=t(94891),o=(t(75190),t(47507)),d=t(24310),c=t(63303),m=(t(75035),t(85162));const l={id:"claim-a-funding-source-for-an-account",title:"Claim a funding source for an account.",description:"This endpoint can be used to claim a wallet address as a source of funds. The funding wallet may be an EOA or a smart contract",sidebar_label:"Claim a funding source for an account.",hide_title:!0,hide_table_of_contents:!0,api:{tags:["funding-source"],description:"This endpoint can be used to claim a wallet address as a source of funds. The funding wallet may be an EOA or a smart contract \nimplementing the ERC-1271 interface. If the wallet is a smart contract, the `ownerAddress`, `message`, and `signature` fields \nare required.\n",requestBody:{content:{"application/json":{schema:{oneOf:[{type:"object",required:["accountId","fundingAddress","ownerAddress","fundingSourceType","message","signature"],title:"create-funding-source-erc-1271"},{type:"object",required:["accountId","fundingAddress","fundingSourceType"],title:"create-funding-source-eoa"}]}}},required:!0},responses:{200:{content:{"application/json":{schema:{type:"object"}}}},400:{description:"Request fields are invalid",content:{"application/json":{schema:{type:"object",properties:{statusCode:{type:"integer"},message:{type:"string"},error:{type:"string"}},required:["statusCode","message","error"],title:"api-error"}}}},403:{description:"Request failed",content:{"application/json":{schema:{type:"object",properties:{message:{type:"string",description:"The error code",summary:"- SIGNATURE_DENIED: The signature was rejected by the ERC-1271 contract `isValidSignature` function.\n- SIGNATURE_INVALID: The message signature was invalid.\n- ADDRESS_MISMATCH: The `ownerAddress` does not match the EIP-4361 message address.\n",enum:["SIGNATURE_DENIED","SIGNATURE_INVALID","ADDRESS_MISMATCH"]}}}}}}},method:"post",path:"/api/funding-sources",servers:[{url:"https://api.immersve.com/",description:"Sandbox server"}],security:[{apiKeyHeader:[],apiSecretHeader:[],accountIdHeader:[]},{immersve_auth:[]}],securitySchemes:{immersve_auth:{type:"http",scheme:"bearer",bearerFormat:"JWT"},apiKeyHeader:{type:"apiKey",in:"header",name:"x-api-key",description:"See Guides -> Authentication for instructions"},apiKeyHeaderWebhook:{type:"apiKey",in:"header",name:"APIKEY",description:"The API key provided by you to Immersve"},apiSecretHeader:{type:"apiKey",in:"header",name:"x-api-secret"},accountIdHeader:{type:"apiKey",in:"header",name:"x-account-id",description:"The target account id. If targeting the root account, this can be omitted (for example creating an account)"}},jsonRequestBodyExample:{accountId:"65a7e8ef0d230d0a6bf755e07d39eb02",fundingAddress:10392900530713021e31,ownerAddress:"string",fundingSourceType:"ImmersvePolygonMumbaiUSDC",message:"string",signature:"string"},info:{version:"1.0.0",title:"Immersve API"},postman:{name:"Claim a funding source for an account.",description:{content:"This endpoint can be used to claim a wallet address as a source of funds. The funding wallet may be an EOA or a smart contract \nimplementing the ERC-1271 interface. If the wallet is a smart contract, the `ownerAddress`, `message`, and `signature` fields \nare required.\n",type:"text/plain"},url:{path:["api","funding-sources"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"api-reference/immersve-api",custom_edit_url:null},u=void 0,p={unversionedId:"api-reference/claim-a-funding-source-for-an-account",id:"api-reference/claim-a-funding-source-for-an-account",title:"Claim a funding source for an account.",description:"This endpoint can be used to claim a wallet address as a source of funds. The funding wallet may be an EOA or a smart contract",source:"@site/docs/api-reference/claim-a-funding-source-for-an-account.api.mdx",sourceDirName:"api-reference",slug:"/api-reference/claim-a-funding-source-for-an-account",permalink:"/api-reference/claim-a-funding-source-for-an-account",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"claim-a-funding-source-for-an-account",title:"Claim a funding source for an account.",description:"This endpoint can be used to claim a wallet address as a source of funds. The funding wallet may be an EOA or a smart contract",sidebar_label:"Claim a funding source for an account.",hide_title:!0,hide_table_of_contents:!0,api:{tags:["funding-source"],description:"This endpoint can be used to claim a wallet address as a source of funds. The funding wallet may be an EOA or a smart contract \nimplementing the ERC-1271 interface. If the wallet is a smart contract, the `ownerAddress`, `message`, and `signature` fields \nare required.\n",requestBody:{content:{"application/json":{schema:{oneOf:[{type:"object",required:["accountId","fundingAddress","ownerAddress","fundingSourceType","message","signature"],title:"create-funding-source-erc-1271"},{type:"object",required:["accountId","fundingAddress","fundingSourceType"],title:"create-funding-source-eoa"}]}}},required:!0},responses:{200:{content:{"application/json":{schema:{type:"object"}}}},400:{description:"Request fields are invalid",content:{"application/json":{schema:{type:"object",properties:{statusCode:{type:"integer"},message:{type:"string"},error:{type:"string"}},required:["statusCode","message","error"],title:"api-error"}}}},403:{description:"Request failed",content:{"application/json":{schema:{type:"object",properties:{message:{type:"string",description:"The error code",summary:"- SIGNATURE_DENIED: The signature was rejected by the ERC-1271 contract `isValidSignature` function.\n- SIGNATURE_INVALID: The message signature was invalid.\n- ADDRESS_MISMATCH: The `ownerAddress` does not match the EIP-4361 message address.\n",enum:["SIGNATURE_DENIED","SIGNATURE_INVALID","ADDRESS_MISMATCH"]}}}}}}},method:"post",path:"/api/funding-sources",servers:[{url:"https://api.immersve.com/",description:"Sandbox server"}],security:[{apiKeyHeader:[],apiSecretHeader:[],accountIdHeader:[]},{immersve_auth:[]}],securitySchemes:{immersve_auth:{type:"http",scheme:"bearer",bearerFormat:"JWT"},apiKeyHeader:{type:"apiKey",in:"header",name:"x-api-key",description:"See Guides -> Authentication for instructions"},apiKeyHeaderWebhook:{type:"apiKey",in:"header",name:"APIKEY",description:"The API key provided by you to Immersve"},apiSecretHeader:{type:"apiKey",in:"header",name:"x-api-secret"},accountIdHeader:{type:"apiKey",in:"header",name:"x-account-id",description:"The target account id. If targeting the root account, this can be omitted (for example creating an account)"}},jsonRequestBodyExample:{accountId:"65a7e8ef0d230d0a6bf755e07d39eb02",fundingAddress:10392900530713021e31,ownerAddress:"string",fundingSourceType:"ImmersvePolygonMumbaiUSDC",message:"string",signature:"string"},info:{version:"1.0.0",title:"Immersve API"},postman:{name:"Claim a funding source for an account.",description:{content:"This endpoint can be used to claim a wallet address as a source of funds. The funding wallet may be an EOA or a smart contract \nimplementing the ERC-1271 interface. If the wallet is a smart contract, the `ownerAddress`, `message`, and `signature` fields \nare required.\n",type:"text/plain"},url:{path:["api","funding-sources"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"api-reference/immersve-api",custom_edit_url:null},sidebar:"primarySidebar",previous:{title:"List funding sources",permalink:"/api-reference/list-funding-sources"},next:{title:"Transactions",permalink:"/api-reference/transactions"}},g={},f=[{value:"Claim a funding source for an account.",id:"claim-a-funding-source-for-an-account",level:2}],h={toc:f};function y(e){let{components:a,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},h,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"claim-a-funding-source-for-an-account"},"Claim a funding source for an account."),(0,s.kt)("p",null,"This endpoint can be used to claim a wallet address as a source of funds. The funding wallet may be an EOA or a smart contract\nimplementing the ERC-1271 interface. If the wallet is a smart contract, the ",(0,s.kt)("inlineCode",{parentName:"p"},"ownerAddress"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"message"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"signature")," fields\nare required."),(0,s.kt)(r.Z,{mdxType:"MimeTabs"},(0,s.kt)(m.Z,{label:"application/json",value:"application/json-schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{textAlign:"left"}},(0,s.kt)("strong",null,"Request Body"),(0,s.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," required")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)("div",null,(0,s.kt)("span",{className:"badge badge--info"},"oneOf"),(0,s.kt)(c.Z,{mdxType:"SchemaTabs"},(0,s.kt)(m.Z,{label:"create-funding-source-erc-1271",value:"0-item-properties",mdxType:"TabItem"},(0,s.kt)(d.Z,{collapsible:!1,name:"accountId",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The id of the cardholder account to add this funding source to.",example:"65a7e8ef0d230d0a6bf755e07d39eb02"},mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"fundingAddress",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The address to claim as a funding source. This can be a smart contract implementing ERC-1271 or an EOA address.",example:10392900530713021e31},mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"ownerAddress",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"EOA address that matches a login wallet."},mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"fundingSourceType",required:!0,schemaName:"string",qualifierMessage:"**Possible values:** [`ImmersvePolygonMumbaiUSDC`, `ImmersvePolygonUSDC`]",schema:{type:"string",description:"The type of funding source to create.",enum:["ImmersvePolygonMumbaiUSDC","ImmersvePolygonUSDC"]},mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"message",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"An EIP-4361 message which is signed by the ownerAddress. This is used to verify ownership of the owner address."},mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"signature",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The signature of the message."},mdxType:"SchemaItem"})),(0,s.kt)(m.Z,{label:"create-funding-source-eoa",value:"1-item-properties",mdxType:"TabItem"},(0,s.kt)(d.Z,{collapsible:!1,name:"accountId",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The id of the cardholder account to add this funding source to.",example:"65a7e8ef0d230d0a6bf755e07d39eb02"},mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"fundingAddress",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The address to claim as a funding source. This can be a smart contract implementing ERC-1271 or an EOA address.",example:10392900530713021e31},mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"fundingSourceType",required:!0,schemaName:"string",qualifierMessage:"**Possible values:** [`ImmersvePolygonMumbaiUSDC`, `ImmersvePolygonUSDC`]",schema:{type:"string",description:"The type of funding source to create.",enum:["ImmersvePolygonMumbaiUSDC","ImmersvePolygonUSDC"]},mdxType:"SchemaItem"})))))))),(0,s.kt)("div",null,(0,s.kt)(i.Z,{mdxType:"ApiTabs"},(0,s.kt)(m.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,s.kt)("div",null),(0,s.kt)("div",null,(0,s.kt)(r.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,s.kt)(m.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,s.kt)(c.Z,{mdxType:"SchemaTabs"},(0,s.kt)(m.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{textAlign:"left"}},(0,s.kt)("strong",null,"Schema")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem",marginLeft:"1rem"}},(0,s.kt)("p",null,"object"))))),(0,s.kt)(m.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,s.kt)(o.Z,{responseExample:"{}",language:"json",mdxType:"ResponseSamples"}))))))),(0,s.kt)(m.Z,{label:"400",value:"400",mdxType:"TabItem"},(0,s.kt)("div",null,(0,s.kt)("p",null,"Request fields are invalid")),(0,s.kt)("div",null,(0,s.kt)(r.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,s.kt)(m.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,s.kt)(c.Z,{mdxType:"SchemaTabs"},(0,s.kt)(m.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{textAlign:"left"}},(0,s.kt)("strong",null,"Schema")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"statusCode",required:!0,schemaName:"integer",qualifierMessage:void 0,schema:{type:"integer"},mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"message",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"error",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"})))),(0,s.kt)(m.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,s.kt)(o.Z,{responseExample:'{\n  "statusCode": 0,\n  "message": "string",\n  "error": "string"\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,s.kt)(m.Z,{label:"403",value:"403",mdxType:"TabItem"},(0,s.kt)("div",null,(0,s.kt)("p",null,"Request failed")),(0,s.kt)("div",null,(0,s.kt)(r.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,s.kt)(m.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,s.kt)(c.Z,{mdxType:"SchemaTabs"},(0,s.kt)(m.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{textAlign:"left"}},(0,s.kt)("strong",null,"Schema")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"message",required:!1,schemaName:"string",qualifierMessage:"**Possible values:** [`SIGNATURE_DENIED`, `SIGNATURE_INVALID`, `ADDRESS_MISMATCH`]",schema:{type:"string",description:"The error code",summary:"- SIGNATURE_DENIED: The signature was rejected by the ERC-1271 contract `isValidSignature` function.\n- SIGNATURE_INVALID: The message signature was invalid.\n- ADDRESS_MISMATCH: The `ownerAddress` does not match the EIP-4361 message address.\n",enum:["SIGNATURE_DENIED","SIGNATURE_INVALID","ADDRESS_MISMATCH"]},mdxType:"SchemaItem"})))),(0,s.kt)(m.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,s.kt)(o.Z,{responseExample:'{\n  "message": "SIGNATURE_DENIED"\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}y.isMDXComponent=!0}}]);