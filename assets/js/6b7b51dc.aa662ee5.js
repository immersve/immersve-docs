"use strict";(self.webpackChunkimmersve_docs=self.webpackChunkimmersve_docs||[]).push([[4154],{64442:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>h,contentTitle:()=>l,default:()=>I,frontMatter:()=>m,metadata:()=>u,toc:()=>g});var r=t(87462),i=(t(67294),t(3905)),n=t(26389),s=t(94891),o=(t(75190),t(47507)),d=t(24310),p=t(63303),c=(t(75035),t(85162));const m={id:"create-a-card",title:"Create a card",description:"Create a card under a specified card program and affiliated with a Funding Source.",sidebar_label:"Create a card",hide_title:!0,hide_table_of_contents:!0,api:{tags:["card"],description:"Create a card under a specified card program and affiliated with a Funding Source.\nReturns an ID with which to retrieve card details.\n",requestBody:{content:{"application/json":{schema:{type:"object",required:["cardProgramId","fundingSourceId"],properties:{cardProgramId:{type:"string",description:"ID of card program to use when creating a card"},fundingSourceId:{type:"string",description:"ID of the Funding Source the card will authorize against"}},title:"create-card-async-request"}}},required:!0},responses:{200:{description:"Successful operation",content:{"application/json":{schema:{type:"object",properties:{cardId:{type:"string",description:"The created card ID"}},title:"create-card-async-response"}}}},400:{description:"Request fields are invalid",content:{"application/json":{schema:{type:"object",properties:{statusCode:{type:"integer",example:400},statusName:{type:"string",example:"Bad Request"},errorCode:{type:"string",example:"BAD_REQUEST"},errors:{type:"array",items:{type:"string",example:"Expected string, received number"}}},required:["statusCode","statusName","errorCode"],title:"api-error-400"}}}},403:{description:"User is not allowed to perform the action with the reason stated in the `message`\n\n**FORBIDDEN**\nInsufficient permissions to perform the action.\n\n**LIVENESS_MISMATCH** \nCard program or cardholder have the wrong liveness for the request.\n\n**CARD_PROGRAM_INVALID**\nCard program does not belong to a partner this cardholder is associated with.\n\n**FUNDING_SOURCE_INVALID**\nFunding source cannot be used with this card program.\n\n**KYC_REQUIRED**\nKYC profile is missing, does not have PASSED status, or does not match card program region. Use the spending prerequisites endpoint for more details.\n\n**CONTACT_EMAIL_REQUIRED**\nCardholder does not have a contact phone.\n\n**CONTACT_PHONE_REQUIRED**\nCardholder does not have a contact email.\n\n**AML_CHECK_FAILED**\nAML check failed.\n",content:{"application/json":{schema:{type:"object",properties:{statusCode:{type:"integer",example:403},statusName:{type:"string",example:"Forbidden"},errorCode:{type:"string",example:"FORBIDDEN"},reason:{type:"string",example:"Unauthorized"}},required:["statusCode","statusName","errorCode"],title:"api-error-403"}}}}},method:"post",path:"/api/cards",servers:[{url:"https://api.immersve.com/",description:"Sandbox server"}],security:[{immersve_auth:[]},{apiKeyHeader:[],apiSecretHeader:[],accountIdHeader:[]}],securitySchemes:{immersve_auth:{type:"http",scheme:"bearer",bearerFormat:"JWT"},apiKeyHeader:{type:"apiKey",in:"header",name:"x-api-key",description:"See Guides -> Authentication for instructions"},apiKeyHeaderWebhook:{type:"apiKey",in:"header",name:"APIKEY",description:"The API key provided by you to Immersve"},apiSecretHeader:{type:"apiKey",in:"header",name:"x-api-secret"},accountIdHeader:{type:"apiKey",in:"header",name:"x-account-id",description:"The target account ID. If targeting the root account, this can be omitted (for example creating an account)"}},jsonRequestBodyExample:{cardProgramId:"string",fundingSourceId:"string"},info:{version:"1.0.0",title:"Immersve API"},postman:{name:"Create a card",description:{content:"Create a card under a specified card program and affiliated with a Funding Source.\nReturns an ID with which to retrieve card details.\n",type:"text/plain"},url:{path:["api","cards"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"api-reference/immersve-api",custom_edit_url:null},l=void 0,u={unversionedId:"api-reference/create-a-card",id:"api-reference/create-a-card",title:"Create a card",description:"Create a card under a specified card program and affiliated with a Funding Source.",source:"@site/docs/api-reference/create-a-card.api.mdx",sourceDirName:"api-reference",slug:"/api-reference/create-a-card",permalink:"/api-reference/create-a-card",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"create-a-card",title:"Create a card",description:"Create a card under a specified card program and affiliated with a Funding Source.",sidebar_label:"Create a card",hide_title:!0,hide_table_of_contents:!0,api:{tags:["card"],description:"Create a card under a specified card program and affiliated with a Funding Source.\nReturns an ID with which to retrieve card details.\n",requestBody:{content:{"application/json":{schema:{type:"object",required:["cardProgramId","fundingSourceId"],properties:{cardProgramId:{type:"string",description:"ID of card program to use when creating a card"},fundingSourceId:{type:"string",description:"ID of the Funding Source the card will authorize against"}},title:"create-card-async-request"}}},required:!0},responses:{200:{description:"Successful operation",content:{"application/json":{schema:{type:"object",properties:{cardId:{type:"string",description:"The created card ID"}},title:"create-card-async-response"}}}},400:{description:"Request fields are invalid",content:{"application/json":{schema:{type:"object",properties:{statusCode:{type:"integer",example:400},statusName:{type:"string",example:"Bad Request"},errorCode:{type:"string",example:"BAD_REQUEST"},errors:{type:"array",items:{type:"string",example:"Expected string, received number"}}},required:["statusCode","statusName","errorCode"],title:"api-error-400"}}}},403:{description:"User is not allowed to perform the action with the reason stated in the `message`\n\n**FORBIDDEN**\nInsufficient permissions to perform the action.\n\n**LIVENESS_MISMATCH** \nCard program or cardholder have the wrong liveness for the request.\n\n**CARD_PROGRAM_INVALID**\nCard program does not belong to a partner this cardholder is associated with.\n\n**FUNDING_SOURCE_INVALID**\nFunding source cannot be used with this card program.\n\n**KYC_REQUIRED**\nKYC profile is missing, does not have PASSED status, or does not match card program region. Use the spending prerequisites endpoint for more details.\n\n**CONTACT_EMAIL_REQUIRED**\nCardholder does not have a contact phone.\n\n**CONTACT_PHONE_REQUIRED**\nCardholder does not have a contact email.\n\n**AML_CHECK_FAILED**\nAML check failed.\n",content:{"application/json":{schema:{type:"object",properties:{statusCode:{type:"integer",example:403},statusName:{type:"string",example:"Forbidden"},errorCode:{type:"string",example:"FORBIDDEN"},reason:{type:"string",example:"Unauthorized"}},required:["statusCode","statusName","errorCode"],title:"api-error-403"}}}}},method:"post",path:"/api/cards",servers:[{url:"https://api.immersve.com/",description:"Sandbox server"}],security:[{immersve_auth:[]},{apiKeyHeader:[],apiSecretHeader:[],accountIdHeader:[]}],securitySchemes:{immersve_auth:{type:"http",scheme:"bearer",bearerFormat:"JWT"},apiKeyHeader:{type:"apiKey",in:"header",name:"x-api-key",description:"See Guides -> Authentication for instructions"},apiKeyHeaderWebhook:{type:"apiKey",in:"header",name:"APIKEY",description:"The API key provided by you to Immersve"},apiSecretHeader:{type:"apiKey",in:"header",name:"x-api-secret"},accountIdHeader:{type:"apiKey",in:"header",name:"x-account-id",description:"The target account ID. If targeting the root account, this can be omitted (for example creating an account)"}},jsonRequestBodyExample:{cardProgramId:"string",fundingSourceId:"string"},info:{version:"1.0.0",title:"Immersve API"},postman:{name:"Create a card",description:{content:"Create a card under a specified card program and affiliated with a Funding Source.\nReturns an ID with which to retrieve card details.\n",type:"text/plain"},url:{path:["api","cards"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"api-reference/immersve-api",custom_edit_url:null},sidebar:"primarySidebar",previous:{title:"Cards",permalink:"/api-reference/card"},next:{title:"Set a card PIN",permalink:"/api-reference/set-a-card-pin"}},h={},g=[{value:"Create a card",id:"create-a-card",level:2}],y={toc:g},f="wrapper";function I(e){let{components:a,...t}=e;return(0,i.kt)(f,(0,r.Z)({},y,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"create-a-card"},"Create a card"),(0,i.kt)("p",null,"Create a card under a specified card program and affiliated with a Funding Source.\nReturns an ID with which to retrieve card details."),(0,i.kt)(s.Z,{mdxType:"MimeTabs"},(0,i.kt)(c.Z,{label:"application/json",value:"application/json-schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Request Body"),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," required")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(d.Z,{collapsible:!1,name:"cardProgramId",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"ID of card program to use when creating a card"},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"fundingSourceId",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"ID of the Funding Source the card will authorize against"},mdxType:"SchemaItem"}))))),(0,i.kt)("div",null,(0,i.kt)(n.Z,{mdxType:"ApiTabs"},(0,i.kt)(c.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"Successful operation")),(0,i.kt)("div",null,(0,i.kt)(s.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(c.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,i.kt)(p.Z,{mdxType:"SchemaTabs"},(0,i.kt)(c.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Schema")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(d.Z,{collapsible:!1,name:"cardId",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The created card ID"},mdxType:"SchemaItem"})))),(0,i.kt)(c.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,i.kt)(o.Z,{responseExample:'{\n  "cardId": "string"\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,i.kt)(c.Z,{label:"400",value:"400",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"Request fields are invalid")),(0,i.kt)("div",null,(0,i.kt)(s.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(c.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,i.kt)(p.Z,{mdxType:"SchemaTabs"},(0,i.kt)(c.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Schema")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(d.Z,{collapsible:!1,name:"statusCode",required:!0,schemaName:"integer",qualifierMessage:void 0,schema:{type:"integer",example:400},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"statusName",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Bad Request"},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"errorCode",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"BAD_REQUEST"},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"errors",required:!1,schemaName:"string[]",qualifierMessage:void 0,schema:{type:"array",items:{type:"string",example:"Expected string, received number"}},mdxType:"SchemaItem"})))),(0,i.kt)(c.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,i.kt)(o.Z,{responseExample:'{\n  "statusCode": 400,\n  "statusName": "Bad Request",\n  "errorCode": "BAD_REQUEST",\n  "errors": [\n    "Expected string, received number"\n  ]\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,i.kt)(c.Z,{label:"403",value:"403",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"User is not allowed to perform the action with the reason stated in the ",(0,i.kt)("inlineCode",{parentName:"p"},"message")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"FORBIDDEN"),"\nInsufficient permissions to perform the action."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"LIVENESS_MISMATCH"),"\nCard program or cardholder have the wrong liveness for the request."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"CARD_PROGRAM_INVALID"),"\nCard program does not belong to a partner this cardholder is associated with."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"FUNDING_SOURCE_INVALID"),"\nFunding source cannot be used with this card program."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"KYC_REQUIRED"),"\nKYC profile is missing, does not have PASSED status, or does not match card program region. Use the spending prerequisites endpoint for more details."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"CONTACT_EMAIL_REQUIRED"),"\nCardholder does not have a contact phone."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"CONTACT_PHONE_REQUIRED"),"\nCardholder does not have a contact email."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"AML_CHECK_FAILED"),"\nAML check failed.")),(0,i.kt)("div",null,(0,i.kt)(s.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(c.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,i.kt)(p.Z,{mdxType:"SchemaTabs"},(0,i.kt)(c.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Schema")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(d.Z,{collapsible:!1,name:"statusCode",required:!0,schemaName:"integer",qualifierMessage:void 0,schema:{type:"integer",example:403},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"statusName",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Forbidden"},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"errorCode",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"FORBIDDEN"},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"reason",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Unauthorized"},mdxType:"SchemaItem"})))),(0,i.kt)(c.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,i.kt)(o.Z,{responseExample:'{\n  "statusCode": 403,\n  "statusName": "Forbidden",\n  "errorCode": "FORBIDDEN",\n  "reason": "Unauthorized"\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}I.isMDXComponent=!0}}]);