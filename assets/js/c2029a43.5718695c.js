"use strict";(self.webpackChunkimmersve_docs=self.webpackChunkimmersve_docs||[]).push([[3735],{485:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>l,default:()=>f,frontMatter:()=>m,metadata:()=>u,toc:()=>h});var a=n(87462),s=(n(67294),n(3905)),r=(n(8209),n(26389)),i=n(94891),p=(n(75190),n(47507)),o=n(24310),c=n(63303),d=(n(75035),n(85162));const m={id:"get-spending-prerequisites",title:"Get spending prerequisites",description:"This endpoint specifies the necessary prerequisites that must be met for a cardholder to successfully create a card and transact with it against a specified Funding Source.",sidebar_label:"Get spending prerequisites",hide_title:!0,hide_table_of_contents:!0,api:{tags:["prerequisites"],description:"This endpoint specifies the necessary prerequisites that must be met for a cardholder to successfully create a card and transact with it against a specified Funding Source. \nThe caller can specify the desired spend and receive the necessary transactions required, accounting for existing deposits, to deposit funds on-chain to meet that spend. \nIt includes any KYC and AML requirements.\n",requestBody:{content:{"application/json":{schema:{type:"object",required:["cardProgramId","fundingSourceId","spendableAmount","spendableCurrency"],properties:{cardProgramId:{type:"string",description:"ID of card program to create the card under"},fundingSourceId:{type:"string",description:"ID of the Funding Source the card will authorize against"},spendableAmount:{type:"string",description:"Amount of fiat money that should be available on the card, denominated in minor units"},spendableCurrency:{type:"string",description:"Currency to be used when creating the card. Currently only supports USD",enum:["USD"]}},title:"get-spending-prerequisite-request"}}},required:!0},responses:{200:{content:{"application/json":{schema:{type:"object",properties:{prerequisites:{type:"array",items:{type:"object",properties:{type:{type:"string",enum:["smart_contract_write","kyc"]},params:{oneOf:[{title:"smart_contract_write",type:"object",properties:{contractAddress:{type:"string",description:"The address of the smart contract"},abi:{description:"The JSON ABI of the smart contract (contains only required details. more details here https://docs.soliditylang.org/en/v0.8.19/abi-spec.html#json)",type:"object",properties:{type:{type:"string",enum:["function"]},name:{type:"string",example:"approve",description:"The name of the function"},inputs:{type:"array",items:{type:"object",properties:{name:{description:"The name of the parameter",type:"string",example:"_spender"},type:{description:"The type of the parameter",type:"string",example:"address"}}}},outputs:{type:"array",items:{type:"object",properties:{name:{description:"The name of the parameter",type:"string"},type:{description:"The type of the parameter",type:"string",example:"uint256"}}}}}},method:{type:"string",description:"Smart contract method"},params:{type:"object",description:"Smart contract call params. Keys are matching names and order defined in ABI"}}},{title:"kyc",type:"object",properties:{status:{type:"string",description:"The cardholder's KYC status.",enum:["check_in_progress","failed"]}}}]}}}}},title:"get-spending-prerequisite-response"},example:'{\n  "prerequisites": [\n    {\n      "type": "smart_contract_write",\n      "params": {\n        "abi": [\n          {\n            "constant": false,\n            "inputs": [\n              {\n                "name": "_spender",\n                "type": "address"\n              },\n              {\n                "name": "_value",\n                "type": "uint256"\n              }\n            ],\n            "name": "approve",\n            "outputs": [\n              {\n                "name": "",\n                "type": "bool"\n              }\n            ],\n            "payable": false,\n            "stateMutability": "nonpayable",\n            "type": "function"\n          }\n        ],\n        "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",\n        "method": "approve",\n        "params": {\n          "_spender": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",\n          "_value": "1000000"\n        }\n      }\n    },\n    {\n      "type": "smart_contract_write",\n      "params": {\n        "abi": [\n          {\n            "inputs": [\n              {\n                "internalType": "uint256",\n                "name": "_amount",\n                "type": "uint256"\n              }\n            ],\n            "name": "depositAndLock",\n            "outputs": [],\n            "stateMutability": "nonpayable",\n            "type": "function"\n          }\n        ],\n        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",\n        "method": "depositAndLock",\n        "params": {\n          "_amount": "1000000"\n        }\n      }\n    },\n    {\n      "type": "kyc",\n      "params": {\n        "status": "check_in_progress"\n      }\n    }\n  ]\n}\n'}}},403:{description:"User is not allowed to perform the action with the reason stated in the `message`\n\n**FORBIDDEN**\nInsufficient permissions to perform the action.\n\n**LIVENESS_MISMATCH** \nResource liveness does not match request liveness.\n\n**CARD_PROGRAM_INVALID**\nCard program doesn\u2019t belong to a partner this cardholder is associated with.\n\n**FUNDING_SOURCE_INVALID**\nFunding source cannot be used with this card program.\n",content:{"application/json":{schema:{type:"object",properties:{statusCode:{type:"integer"},message:{type:"string"},error:{type:"string"}},required:["statusCode","message","error"],title:"api-error"}}}}},method:"post",path:"/api/spending-prerequisites",servers:[{url:"https://api.immersve.com/",description:"Sandbox server"}],security:[{apiKeyHeader:[],apiSecretHeader:[],accountIdHeader:[]},{immersve_auth:[]}],securitySchemes:{immersve_auth:{type:"http",scheme:"bearer",bearerFormat:"JWT"},apiKeyHeader:{type:"apiKey",in:"header",name:"x-api-key",description:"See Guides -> Authentication for instructions"},apiKeyHeaderWebhook:{type:"apiKey",in:"header",name:"APIKEY",description:"The API key provided by you to Immersve"},apiSecretHeader:{type:"apiKey",in:"header",name:"x-api-secret"},accountIdHeader:{type:"apiKey",in:"header",name:"x-account-id",description:"The target account ID. If targeting the root account, this can be omitted (for example creating an account)"}},jsonRequestBodyExample:{cardProgramId:"string",fundingSourceId:"string",spendableAmount:"string",spendableCurrency:"USD"},info:{version:"1.0.0",title:"Immersve API"},postman:{name:"Get spending prerequisites",description:{content:"This endpoint specifies the necessary prerequisites that must be met for a cardholder to successfully create a card and transact with it against a specified Funding Source. \nThe caller can specify the desired spend and receive the necessary transactions required, accounting for existing deposits, to deposit funds on-chain to meet that spend. \nIt includes any KYC and AML requirements.\n",type:"text/plain"},url:{path:["api","spending-prerequisites"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"api-reference/immersve-api",custom_edit_url:null},l=void 0,u={unversionedId:"api-reference/get-spending-prerequisites",id:"api-reference/get-spending-prerequisites",title:"Get spending prerequisites",description:"This endpoint specifies the necessary prerequisites that must be met for a cardholder to successfully create a card and transact with it against a specified Funding Source.",source:"@site/docs/api-reference/get-spending-prerequisites.api.mdx",sourceDirName:"api-reference",slug:"/api-reference/get-spending-prerequisites",permalink:"/api-reference/get-spending-prerequisites",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"get-spending-prerequisites",title:"Get spending prerequisites",description:"This endpoint specifies the necessary prerequisites that must be met for a cardholder to successfully create a card and transact with it against a specified Funding Source.",sidebar_label:"Get spending prerequisites",hide_title:!0,hide_table_of_contents:!0,api:{tags:["prerequisites"],description:"This endpoint specifies the necessary prerequisites that must be met for a cardholder to successfully create a card and transact with it against a specified Funding Source. \nThe caller can specify the desired spend and receive the necessary transactions required, accounting for existing deposits, to deposit funds on-chain to meet that spend. \nIt includes any KYC and AML requirements.\n",requestBody:{content:{"application/json":{schema:{type:"object",required:["cardProgramId","fundingSourceId","spendableAmount","spendableCurrency"],properties:{cardProgramId:{type:"string",description:"ID of card program to create the card under"},fundingSourceId:{type:"string",description:"ID of the Funding Source the card will authorize against"},spendableAmount:{type:"string",description:"Amount of fiat money that should be available on the card, denominated in minor units"},spendableCurrency:{type:"string",description:"Currency to be used when creating the card. Currently only supports USD",enum:["USD"]}},title:"get-spending-prerequisite-request"}}},required:!0},responses:{200:{content:{"application/json":{schema:{type:"object",properties:{prerequisites:{type:"array",items:{type:"object",properties:{type:{type:"string",enum:["smart_contract_write","kyc"]},params:{oneOf:[{title:"smart_contract_write",type:"object",properties:{contractAddress:{type:"string",description:"The address of the smart contract"},abi:{description:"The JSON ABI of the smart contract (contains only required details. more details here https://docs.soliditylang.org/en/v0.8.19/abi-spec.html#json)",type:"object",properties:{type:{type:"string",enum:["function"]},name:{type:"string",example:"approve",description:"The name of the function"},inputs:{type:"array",items:{type:"object",properties:{name:{description:"The name of the parameter",type:"string",example:"_spender"},type:{description:"The type of the parameter",type:"string",example:"address"}}}},outputs:{type:"array",items:{type:"object",properties:{name:{description:"The name of the parameter",type:"string"},type:{description:"The type of the parameter",type:"string",example:"uint256"}}}}}},method:{type:"string",description:"Smart contract method"},params:{type:"object",description:"Smart contract call params. Keys are matching names and order defined in ABI"}}},{title:"kyc",type:"object",properties:{status:{type:"string",description:"The cardholder's KYC status.",enum:["check_in_progress","failed"]}}}]}}}}},title:"get-spending-prerequisite-response"},example:'{\n  "prerequisites": [\n    {\n      "type": "smart_contract_write",\n      "params": {\n        "abi": [\n          {\n            "constant": false,\n            "inputs": [\n              {\n                "name": "_spender",\n                "type": "address"\n              },\n              {\n                "name": "_value",\n                "type": "uint256"\n              }\n            ],\n            "name": "approve",\n            "outputs": [\n              {\n                "name": "",\n                "type": "bool"\n              }\n            ],\n            "payable": false,\n            "stateMutability": "nonpayable",\n            "type": "function"\n          }\n        ],\n        "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",\n        "method": "approve",\n        "params": {\n          "_spender": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",\n          "_value": "1000000"\n        }\n      }\n    },\n    {\n      "type": "smart_contract_write",\n      "params": {\n        "abi": [\n          {\n            "inputs": [\n              {\n                "internalType": "uint256",\n                "name": "_amount",\n                "type": "uint256"\n              }\n            ],\n            "name": "depositAndLock",\n            "outputs": [],\n            "stateMutability": "nonpayable",\n            "type": "function"\n          }\n        ],\n        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",\n        "method": "depositAndLock",\n        "params": {\n          "_amount": "1000000"\n        }\n      }\n    },\n    {\n      "type": "kyc",\n      "params": {\n        "status": "check_in_progress"\n      }\n    }\n  ]\n}\n'}}},403:{description:"User is not allowed to perform the action with the reason stated in the `message`\n\n**FORBIDDEN**\nInsufficient permissions to perform the action.\n\n**LIVENESS_MISMATCH** \nResource liveness does not match request liveness.\n\n**CARD_PROGRAM_INVALID**\nCard program doesn\u2019t belong to a partner this cardholder is associated with.\n\n**FUNDING_SOURCE_INVALID**\nFunding source cannot be used with this card program.\n",content:{"application/json":{schema:{type:"object",properties:{statusCode:{type:"integer"},message:{type:"string"},error:{type:"string"}},required:["statusCode","message","error"],title:"api-error"}}}}},method:"post",path:"/api/spending-prerequisites",servers:[{url:"https://api.immersve.com/",description:"Sandbox server"}],security:[{apiKeyHeader:[],apiSecretHeader:[],accountIdHeader:[]},{immersve_auth:[]}],securitySchemes:{immersve_auth:{type:"http",scheme:"bearer",bearerFormat:"JWT"},apiKeyHeader:{type:"apiKey",in:"header",name:"x-api-key",description:"See Guides -> Authentication for instructions"},apiKeyHeaderWebhook:{type:"apiKey",in:"header",name:"APIKEY",description:"The API key provided by you to Immersve"},apiSecretHeader:{type:"apiKey",in:"header",name:"x-api-secret"},accountIdHeader:{type:"apiKey",in:"header",name:"x-account-id",description:"The target account ID. If targeting the root account, this can be omitted (for example creating an account)"}},jsonRequestBodyExample:{cardProgramId:"string",fundingSourceId:"string",spendableAmount:"string",spendableCurrency:"USD"},info:{version:"1.0.0",title:"Immersve API"},postman:{name:"Get spending prerequisites",description:{content:"This endpoint specifies the necessary prerequisites that must be met for a cardholder to successfully create a card and transact with it against a specified Funding Source. \nThe caller can specify the desired spend and receive the necessary transactions required, accounting for existing deposits, to deposit funds on-chain to meet that spend. \nIt includes any KYC and AML requirements.\n",type:"text/plain"},url:{path:["api","spending-prerequisites"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"api-reference/immersve-api",custom_edit_url:null},sidebar:"primarySidebar",previous:{title:"Prerequisites",permalink:"/api-reference/prerequisites"},next:{title:"Webhooks",permalink:"/api-reference/immersve-webhooks"}},y={},h=[{value:"Get spending prerequisites",id:"get-spending-prerequisites",level:2}],g={toc:h};function f(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"get-spending-prerequisites"},"Get spending prerequisites"),(0,s.kt)("p",null,"This endpoint specifies the necessary prerequisites that must be met for a cardholder to successfully create a card and transact with it against a specified Funding Source.\nThe caller can specify the desired spend and receive the necessary transactions required, accounting for existing deposits, to deposit funds on-chain to meet that spend.\nIt includes any KYC and AML requirements."),(0,s.kt)(i.Z,{mdxType:"MimeTabs"},(0,s.kt)(d.Z,{label:"application/json",value:"application/json-schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{textAlign:"left"}},(0,s.kt)("strong",null,"Request Body"),(0,s.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," required")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)(o.Z,{collapsible:!1,name:"cardProgramId",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"ID of card program to create the card under"},mdxType:"SchemaItem"}),(0,s.kt)(o.Z,{collapsible:!1,name:"fundingSourceId",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"ID of the Funding Source the card will authorize against"},mdxType:"SchemaItem"}),(0,s.kt)(o.Z,{collapsible:!1,name:"spendableAmount",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"Amount of fiat money that should be available on the card, denominated in minor units"},mdxType:"SchemaItem"}),(0,s.kt)(o.Z,{collapsible:!1,name:"spendableCurrency",required:!0,schemaName:"string",qualifierMessage:"**Possible values:** [`USD`]",schema:{type:"string",description:"Currency to be used when creating the card. Currently only supports USD",enum:["USD"]},mdxType:"SchemaItem"}))))),(0,s.kt)("div",null,(0,s.kt)(r.Z,{mdxType:"ApiTabs"},(0,s.kt)(d.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,s.kt)("div",null),(0,s.kt)("div",null,(0,s.kt)(i.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,s.kt)(d.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,s.kt)(c.Z,{mdxType:"SchemaTabs"},(0,s.kt)(d.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{textAlign:"left"}},(0,s.kt)("strong",null,"Schema")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)(o.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"prerequisites"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,s.kt)(o.Z,{collapsible:!1,name:"type",required:!1,schemaName:"string",qualifierMessage:"**Possible values:** [`smart_contract_write`, `kyc`]",schema:{type:"string",enum:["smart_contract_write","kyc"]},mdxType:"SchemaItem"}),(0,s.kt)(o.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"params"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("li",null,(0,s.kt)("span",{className:"badge badge--info"},"oneOf"),(0,s.kt)(c.Z,{mdxType:"SchemaTabs"},(0,s.kt)(d.Z,{label:"smart_contract_write",value:"0-item-properties",mdxType:"TabItem"},(0,s.kt)(o.Z,{collapsible:!1,name:"contractAddress",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The address of the smart contract"},mdxType:"SchemaItem"}),(0,s.kt)(o.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"abi"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"The JSON ABI of the smart contract (contains only required details. more details here ",(0,s.kt)("a",{parentName:"p",href:"https://docs.soliditylang.org/en/v0.8.19/abi-spec.html#json"},"https://docs.soliditylang.org/en/v0.8.19/abi-spec.html#json"),")")),(0,s.kt)(o.Z,{collapsible:!1,name:"type",required:!1,schemaName:"string",qualifierMessage:"**Possible values:** [`function`]",schema:{type:"string",enum:["function"]},mdxType:"SchemaItem"}),(0,s.kt)(o.Z,{collapsible:!1,name:"name",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"approve",description:"The name of the function"},mdxType:"SchemaItem"}),(0,s.kt)(o.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"inputs"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,s.kt)(o.Z,{collapsible:!1,name:"name",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"The name of the parameter",type:"string",example:"_spender"},mdxType:"SchemaItem"}),(0,s.kt)(o.Z,{collapsible:!1,name:"type",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"The type of the parameter",type:"string",example:"address"},mdxType:"SchemaItem"}),(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))),(0,s.kt)(o.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"outputs"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,s.kt)(o.Z,{collapsible:!1,name:"name",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"The name of the parameter",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(o.Z,{collapsible:!1,name:"type",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"The type of the parameter",type:"string",example:"uint256"},mdxType:"SchemaItem"}),(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))),(0,s.kt)(o.Z,{collapsible:!1,name:"method",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"Smart contract method"},mdxType:"SchemaItem"}),(0,s.kt)(o.Z,{collapsible:!1,name:"params",required:!1,schemaName:"object",qualifierMessage:void 0,schema:{type:"object",description:"Smart contract call params. Keys are matching names and order defined in ABI"},mdxType:"SchemaItem"})),(0,s.kt)(d.Z,{label:"kyc",value:"1-item-properties",mdxType:"TabItem"},(0,s.kt)(o.Z,{collapsible:!1,name:"status",required:!1,schemaName:"string",qualifierMessage:"**Possible values:** [`check_in_progress`, `failed`]",schema:{type:"string",description:"The cardholder's KYC status.",enum:["check_in_progress","failed"]},mdxType:"SchemaItem"}))))))),(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))),(0,s.kt)(d.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,s.kt)(p.Z,{responseExample:'{\n  "prerequisites": [\n    {\n      "type": "smart_contract_write",\n      "params": {\n        "contractAddress": "string",\n        "abi": {\n          "type": "function",\n          "name": "approve",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "string",\n              "type": "uint256"\n            }\n          ]\n        },\n        "method": "string",\n        "params": {}\n      }\n    }\n  ]\n}',language:"json",mdxType:"ResponseSamples"})),(0,s.kt)(d.Z,{label:"Example",value:"Example",mdxType:"TabItem"},(0,s.kt)(p.Z,{responseExample:'{\n  "prerequisites": [\n    {\n      "type": "smart_contract_write",\n      "params": {\n        "abi": [\n          {\n            "constant": false,\n            "inputs": [\n              {\n                "name": "_spender",\n                "type": "address"\n              },\n              {\n                "name": "_value",\n                "type": "uint256"\n              }\n            ],\n            "name": "approve",\n            "outputs": [\n              {\n                "name": "",\n                "type": "bool"\n              }\n            ],\n            "payable": false,\n            "stateMutability": "nonpayable",\n            "type": "function"\n          }\n        ],\n        "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",\n        "method": "approve",\n        "params": {\n          "_spender": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",\n          "_value": "1000000"\n        }\n      }\n    },\n    {\n      "type": "smart_contract_write",\n      "params": {\n        "abi": [\n          {\n            "inputs": [\n              {\n                "internalType": "uint256",\n                "name": "_amount",\n                "type": "uint256"\n              }\n            ],\n            "name": "depositAndLock",\n            "outputs": [],\n            "stateMutability": "nonpayable",\n            "type": "function"\n          }\n        ],\n        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",\n        "method": "depositAndLock",\n        "params": {\n          "_amount": "1000000"\n        }\n      }\n    },\n    {\n      "type": "kyc",\n      "params": {\n        "status": "check_in_progress"\n      }\n    }\n  ]\n}\n',language:"json",mdxType:"ResponseSamples"}))))))),(0,s.kt)(d.Z,{label:"403",value:"403",mdxType:"TabItem"},(0,s.kt)("div",null,(0,s.kt)("p",null,"User is not allowed to perform the action with the reason stated in the ",(0,s.kt)("inlineCode",{parentName:"p"},"message")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"FORBIDDEN"),"\nInsufficient permissions to perform the action."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"LIVENESS_MISMATCH"),"\nResource liveness does not match request liveness."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"CARD_PROGRAM_INVALID"),"\nCard program doesn\u2019t belong to a partner this cardholder is associated with."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"FUNDING_SOURCE_INVALID"),"\nFunding source cannot be used with this card program.")),(0,s.kt)("div",null,(0,s.kt)(i.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,s.kt)(d.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,s.kt)(c.Z,{mdxType:"SchemaTabs"},(0,s.kt)(d.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{textAlign:"left"}},(0,s.kt)("strong",null,"Schema")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)(o.Z,{collapsible:!1,name:"statusCode",required:!0,schemaName:"integer",qualifierMessage:void 0,schema:{type:"integer"},mdxType:"SchemaItem"}),(0,s.kt)(o.Z,{collapsible:!1,name:"message",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(o.Z,{collapsible:!1,name:"error",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,s.kt)(p.Z,{responseExample:'{\n  "statusCode": 0,\n  "message": "string",\n  "error": "string"\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}f.isMDXComponent=!0}}]);