"use strict";(self.webpackChunkimmersve_docs=self.webpackChunkimmersve_docs||[]).push([[1914],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),h=r,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||i;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=h;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},786:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const i={sidebar_position:4,tags:["card","virtual card","non-custodial"]},o="Card Funding",s={unversionedId:"guides/card-funding",id:"guides/card-funding",title:"Card Funding",description:"A Funding Source is an off-chain record of available balance against which card",source:"@site/docs/guides/card-funding.md",sourceDirName:"guides",slug:"/guides/card-funding",permalink:"/guides/card-funding",draft:!1,tags:[{label:"card",permalink:"/tags/card"},{label:"virtual card",permalink:"/tags/virtual-card"},{label:"non-custodial",permalink:"/tags/non-custodial"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,tags:["card","virtual card","non-custodial"]},sidebar:"primarySidebar",previous:{title:"Card Lifecycle",permalink:"/guides/card-lifecycle"},next:{title:"Issue a Virtual Card",permalink:"/guides/issue-a-virtual-card"}},c={},l=[{value:"Authentication",id:"authentication",level:2},{value:"Funding Source Provisioning",id:"funding-source-provisioning",level:2},{value:"Funding Process",id:"funding-process",level:2},{value:"Currency Conversion",id:"currency-conversion",level:3},{value:"Lock Funds",id:"lock-funds",level:3},{value:"How to use prerequisites example for ts/js",id:"how-to-use-prerequisites-example-for-tsjs",level:4},{value:"Wallet Funding for Development and Testing",id:"wallet-funding-for-development-and-testing",level:3},{value:"Funding Sequence Diagram",id:"funding-sequence-diagram",level:3}],u={toc:l},d="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"card-funding"},"Card Funding"),(0,r.kt)("p",null,"A Funding Source is an off-chain record of available balance against which card\ntransactions are authorized. A Funding Source is owned by a cardholder and can\nbe associated with many cards transacting against the same available balance . A\nFunding Source must have sufficient balance for a transaction to be authorized."),(0,r.kt)("p",null,"A Funding Source balance is eventually consistent with the on-chain deposits.\nHowever, the balance available to spend may differ. This could happen if deposit\nor load limits are exceeded. AML/CFT rules can dictate that the funds should not\nbe included in the balance."),(0,r.kt)("p",null,"A card will not authorize transactions without an associated Funding Source. You\nmust reference a Funding Source when creating a card."),(0,r.kt)("h2",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"The authentication processes are described in the ",(0,r.kt)("a",{parentName:"p",href:"/guides/authentication"},"authentication\nguide"),"."),(0,r.kt)("h2",{id:"funding-source-provisioning"},"Funding Source Provisioning"),(0,r.kt)("p",null,"A Funding Source is created by a request to the ",(0,r.kt)("a",{parentName:"p",href:"/api-reference/create-a-funding-source-for-an-account"},"create a Funding Source for an\naccount")," endpoint. The\nfunding wallet may be an EOA or a smart contract implementing the ERC-1271\ninterface."),(0,r.kt)("h2",{id:"funding-process"},"Funding Process"),(0,r.kt)("p",null,"On-chain funding can be done at any time regardless of card or Funding Source\nprovisioning. A Funding Source can be loaded with digital assets without using\nImmersve APIs by depositing funds directly to our smart contract."),(0,r.kt)("p",null,"However, our APIs aim to reduce the complexity of determining what is the amount\nof digital assets needed to meet a users desired spend in their desired fiat\ncurrency. They also provide pre-built ",(0,r.kt)("inlineCode",{parentName:"p"},'"smart-contract-write"')," transactions for\nsuccessful interactions with the Immersve smart contract."),(0,r.kt)("h3",{id:"currency-conversion"},"Currency Conversion"),(0,r.kt)("p",null,"A user may be quoted a price for a purchase by a merchant in a local fiat\ncurrency. To determine the sufficient amount of local fiat currency to fund a\ncard in its billing currency (USD), use the ",(0,r.kt)("a",{parentName:"p",href:"/api-reference/currency-conversion"},"currency\nconversion")," API endpoint."),(0,r.kt)("p",null,"The returned value can passed to the get spending prerequisites endpoint as\ndetailed below."),(0,r.kt)("h3",{id:"lock-funds"},"Lock Funds"),(0,r.kt)("p",null,"To ensure that funds are sufficiently locked within the ",(0,r.kt)("a",{parentName:"p",href:"/contracts/payment-protocol"},"smart\ncontract")," such that Immersve are in a position to\napprove an authorization request received via the card scheme network you will\nneed to have first locked sufficient digital assets within the smart contract\nvia digital asset transfer and smart contract invocations as instructed by the\n",(0,r.kt)("a",{parentName:"p",href:"/api-reference/get-spending-prerequisites"},"get spending prerequisites"),"\noperation. The necessary blockchain transactions are contained within the\n",(0,r.kt)("inlineCode",{parentName:"p"},"prerequisites")," collection returned."),(0,r.kt)("p",null,"If the user has not transacted using the solution before then the ",(0,r.kt)("a",{parentName:"p",href:"/api-reference/get-spending-prerequisites"},"get spending\nprerequisites")," response will\ntypically call for an ERC20 ",(0,r.kt)("inlineCode",{parentName:"p"},"approve")," in favour of the smart contract followed\nby a ",(0,r.kt)("inlineCode",{parentName:"p"},"depositAndLock")," invocation of the smart contract."),(0,r.kt)("p",null,"If multiple transactions are present then they should be carried out in the\norder in which they are presented."),(0,r.kt)("p",null,"The client application is to parse and formulate the raw blockchain transaction\nmessage such that it is presented to the user within the web3 wallet and signed\nand sent to the relevant blockchain."),(0,r.kt)("h4",{id:"how-to-use-prerequisites-example-for-tsjs"},"How to use prerequisites example for ts/js"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/api-reference/get-spending-prerequisites"},"get spending prerequisites"),"\nendpoint returns an array of both regulatory and smart contract prerequisite\ntransactions.",(0,r.kt)("br",{parentName:"p"}),"\n","Each object in the array has ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"params"),".",(0,r.kt)("br",{parentName:"p"}),"\n","Type ",(0,r.kt)("inlineCode",{parentName:"p"},'"smart_contract_write"')," means that this action is about interaction with\nthe smart contract. ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," contains all the details required to perform this\ninteraction."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Code snippet (using ethers.js)"),(0,r.kt)("p",null,"Typescript code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const { abi, contractAddress, method, params } =\n  response.data.prerequisites.params;\n\nconst contract = new Contract(contractAddress, abi, signer); // third param Signer is required\n\nconst { hash } = await contract[method](...Object.values(params));\n"))),(0,r.kt)("h3",{id:"wallet-funding-for-development-and-testing"},"Wallet Funding for Development and Testing"),(0,r.kt)("p",null,"To ensure that integrators can obtain sufficient ERC-20 tokens to facilitate\ndevelopment and testing, Immersve uses an ERC-20 token contract that allows\ntokens to be freely minted as needed."),(0,r.kt)("p",null,"In non-production environments, any transaction returned by ",(0,r.kt)("a",{parentName:"p",href:"/api-reference/get-spending-prerequisites"},"get spending\nprerequisites"),' with actions related\nto ERC20 smart contract will refer to the "IMMUSDC" token. The "IMMUSDC" token\nhas a ',(0,r.kt)("inlineCode",{parentName:"p"},"mint")," function allowing for the unlimited minting of the token to any\nwallet address."),(0,r.kt)("p",null,"One particularly convenient way to get the necessary tokens is to use the\nPolygonscan interface."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Open the ",(0,r.kt)("a",{parentName:"li",href:"https://mumbai.polygonscan.com/address/0x2FaC06acFAeB42CC3B5327fcF53F48D9Da72749d#code"},"IMMUSDC token in\nPolygonscan")),(0,r.kt)("li",{parentName:"ul"},"Click ",(0,r.kt)("inlineCode",{parentName:"li"},"Write as Proxy")),(0,r.kt)("li",{parentName:"ul"},"Click ",(0,r.kt)("inlineCode",{parentName:"li"},"Connect to Web3")," to connect your wallet with Polygonscan"),(0,r.kt)("li",{parentName:"ul"},"Open the ",(0,r.kt)("inlineCode",{parentName:"li"},"mint")," function"),(0,r.kt)("li",{parentName:"ul"},"Set the destination wallet address (where assets are to be sent) in the ",(0,r.kt)("inlineCode",{parentName:"li"},"to"),"\nfield. Set an amount in the ",(0,r.kt)("inlineCode",{parentName:"li"},"amount")," field."),(0,r.kt)("li",{parentName:"ul"},"Initiate the web3 transaction by clicking the ",(0,r.kt)("inlineCode",{parentName:"li"},"Write")," button"),(0,r.kt)("li",{parentName:"ul"},"Confirm the transaction in the web3 wallet and pay the gas fees")),(0,r.kt)("h3",{id:"funding-sequence-diagram"},"Funding Sequence Diagram"),(0,r.kt)("mermaid",{chart:"sequenceDiagram\n    participant U as User\n    participant C as Your Application\n    participant I as Immersve\n    participant W as Wallet\n    participant B as Blockchain\n    note over U: Authentication as per authentication guide\n\n    C->>I: Create Funding Source\n    I--\x3e>C: Funding Source ID\n    C->>I: Get spending prerequisites\n    I--\x3e>C: prerequisites collection\n      loop For each smart-contract-write transaction\n      C->>C: Construct raw transaction message\n      C->>W: Transmit raw transaction to wallet\n      U->>W: Confirm / authorize transaction\n      W->>B: Transmit transaction\n      end\n    C->>I: List Funding Sources\n    I--\x3e>C: Funding Source list"}))}p.isMDXComponent=!0}}]);